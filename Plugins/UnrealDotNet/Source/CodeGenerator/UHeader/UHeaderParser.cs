//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from UHeader.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class UHeaderParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, PtrQuant=11, RefQuant=12, Private=13, Protected=14, Public=15, 
		Inline=16, Explicit=17, Virtual=18, Class=19, Struct=20, Enum=21, Union=22, 
		Const=23, Final=24, Static=25, Extern=26, Mutable=27, Override=28, Template=29, 
		Friend=30, Operator=31, Typedef=32, Constexpr=33, BracketsOpen=34, BracketsClose=35, 
		Tilda=36, Delete=37, GCC_ALIGN=38, UPARAM=39, Namespace=40, Typename=41, 
		DotDot=42, SingleLineDerective=43, MultiLineDerective=44, Identifier=45, 
		Literal=46, SpecalSymbol=47, Whitespace=48, Newline=49, ExportComment=50, 
		BlockComment=51, LineComment=52;
	public const int
		RULE_translationUnit = 0, RULE_namespaceUnit = 1, RULE_namespaceName = 2, 
		RULE_typePreDeclaration = 3, RULE_classDeclaration = 4, RULE_classOrStructOrEnum = 5, 
		RULE_classOrStruct = 6, RULE_classParentList = 7, RULE_classAlignDefine = 8, 
		RULE_classAlignValue = 9, RULE_classBody = 10, RULE_comment = 11, RULE_enumDeclaration = 12, 
		RULE_enumParent = 13, RULE_enumElementList = 14, RULE_enumElement = 15, 
		RULE_enumElementName = 16, RULE_unionDeclaration = 17, RULE_typeDefine = 18, 
		RULE_uDefine = 19, RULE_uDefineName = 20, RULE_uMeta = 21, RULE_uMetaParametrList = 22, 
		RULE_uMetaParametr = 23, RULE_uMetaParamKey = 24, RULE_uMetaParamValue = 25, 
		RULE_undefineBlock = 26, RULE_undefineContent = 27, RULE_constructor = 28, 
		RULE_constructorInitializerList = 29, RULE_constructorInitializer = 30, 
		RULE_method = 31, RULE_methodParamsList = 32, RULE_methodParametr = 33, 
		RULE_methodParametrMetadata = 34, RULE_methodParametrTemplate = 35, RULE_methodParametrName = 36, 
		RULE_methodParametrDefaultValue = 37, RULE_value = 38, RULE_methodBody = 39, 
		RULE_methodBodyContent = 40, RULE_methodName = 41, RULE_methodOperator = 42, 
		RULE_property = 43, RULE_propertyName = 44, RULE_propertyDefaultValue = 45, 
		RULE_type = 46, RULE_isPtrQuant = 47, RULE_isRefQuant = 48, RULE_typeName = 49, 
		RULE_isVirtual = 50, RULE_isOverride = 51, RULE_isConst = 52, RULE_isStatic = 53, 
		RULE_isFriend = 54, RULE_isFinal = 55, RULE_isDestructor = 56, RULE_isDelete = 57, 
		RULE_isArray = 58, RULE_arrayLen = 59, RULE_templateDefine = 60, RULE_templateParamList = 61, 
		RULE_templateParam = 62, RULE_templateParamType = 63, RULE_templateParamLiter = 64, 
		RULE_accessSpecifierContainer = 65, RULE_accessSpecifier = 66, RULE_preprocessDerective = 67;
	public static readonly string[] ruleNames = {
		"translationUnit", "namespaceUnit", "namespaceName", "typePreDeclaration", 
		"classDeclaration", "classOrStructOrEnum", "classOrStruct", "classParentList", 
		"classAlignDefine", "classAlignValue", "classBody", "comment", "enumDeclaration", 
		"enumParent", "enumElementList", "enumElement", "enumElementName", "unionDeclaration", 
		"typeDefine", "uDefine", "uDefineName", "uMeta", "uMetaParametrList", 
		"uMetaParametr", "uMetaParamKey", "uMetaParamValue", "undefineBlock", 
		"undefineContent", "constructor", "constructorInitializerList", "constructorInitializer", 
		"method", "methodParamsList", "methodParametr", "methodParametrMetadata", 
		"methodParametrTemplate", "methodParametrName", "methodParametrDefaultValue", 
		"value", "methodBody", "methodBodyContent", "methodName", "methodOperator", 
		"property", "propertyName", "propertyDefaultValue", "type", "isPtrQuant", 
		"isRefQuant", "typeName", "isVirtual", "isOverride", "isConst", "isStatic", 
		"isFriend", "isFinal", "isDestructor", "isDelete", "isArray", "arrayLen", 
		"templateDefine", "templateParamList", "templateParam", "templateParamType", 
		"templateParamLiter", "accessSpecifierContainer", "accessSpecifier", "preprocessDerective"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "','", "'('", "')'", "'='", "'|'", "'<'", "'>'", "'['", "']'", 
		"'*'", "'&'", "'private'", "'protected'", "'public'", null, "'explicit'", 
		"'virtual'", "'class'", "'struct'", "'enum'", "'union'", "'const'", "'final'", 
		"'static'", "'extern'", "'mutable'", "'override'", "'template'", "'friend'", 
		"'operator'", "'typedef'", "'CONSTEXPR'", "'{'", "'}'", "'~'", "'delete'", 
		"'GCC_ALIGN'", "'UPARAM'", "'namespace'", "'typename'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "PtrQuant", 
		"RefQuant", "Private", "Protected", "Public", "Inline", "Explicit", "Virtual", 
		"Class", "Struct", "Enum", "Union", "Const", "Final", "Static", "Extern", 
		"Mutable", "Override", "Template", "Friend", "Operator", "Typedef", "Constexpr", 
		"BracketsOpen", "BracketsClose", "Tilda", "Delete", "GCC_ALIGN", "UPARAM", 
		"Namespace", "Typename", "DotDot", "SingleLineDerective", "MultiLineDerective", 
		"Identifier", "Literal", "SpecalSymbol", "Whitespace", "Newline", "ExportComment", 
		"BlockComment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "UHeader.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static UHeaderParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public UHeaderParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public UHeaderParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class TranslationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(UHeaderParser.Eof, 0); }
		public TypePreDeclarationContext[] typePreDeclaration() {
			return GetRuleContexts<TypePreDeclarationContext>();
		}
		public TypePreDeclarationContext typePreDeclaration(int i) {
			return GetRuleContext<TypePreDeclarationContext>(i);
		}
		public MethodContext[] method() {
			return GetRuleContexts<MethodContext>();
		}
		public MethodContext method(int i) {
			return GetRuleContext<MethodContext>(i);
		}
		public ClassDeclarationContext[] classDeclaration() {
			return GetRuleContexts<ClassDeclarationContext>();
		}
		public ClassDeclarationContext classDeclaration(int i) {
			return GetRuleContext<ClassDeclarationContext>(i);
		}
		public EnumDeclarationContext[] enumDeclaration() {
			return GetRuleContexts<EnumDeclarationContext>();
		}
		public EnumDeclarationContext enumDeclaration(int i) {
			return GetRuleContext<EnumDeclarationContext>(i);
		}
		public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		public TypeDefineContext[] typeDefine() {
			return GetRuleContexts<TypeDefineContext>();
		}
		public TypeDefineContext typeDefine(int i) {
			return GetRuleContext<TypeDefineContext>(i);
		}
		public UDefineContext[] uDefine() {
			return GetRuleContexts<UDefineContext>();
		}
		public UDefineContext uDefine(int i) {
			return GetRuleContext<UDefineContext>(i);
		}
		public NamespaceUnitContext[] namespaceUnit() {
			return GetRuleContexts<NamespaceUnitContext>();
		}
		public NamespaceUnitContext namespaceUnit(int i) {
			return GetRuleContext<NamespaceUnitContext>(i);
		}
		public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public PreprocessDerectiveContext[] preprocessDerective() {
			return GetRuleContexts<PreprocessDerectiveContext>();
		}
		public PreprocessDerectiveContext preprocessDerective(int i) {
			return GetRuleContext<PreprocessDerectiveContext>(i);
		}
		public TranslationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_translationUnit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTranslationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TranslationUnitContext translationUnit() {
		TranslationUnitContext _localctx = new TranslationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_translationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PtrQuant) | (1L << RefQuant) | (1L << Inline) | (1L << Virtual) | (1L << Class) | (1L << Struct) | (1L << Enum) | (1L << Const) | (1L << Static) | (1L << Extern) | (1L << Mutable) | (1L << Template) | (1L << Friend) | (1L << Typedef) | (1L << Constexpr) | (1L << Namespace) | (1L << SingleLineDerective) | (1L << MultiLineDerective) | (1L << Identifier) | (1L << ExportComment))) != 0)) {
				{
				State = 146;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 136; typePreDeclaration();
					}
					break;
				case 2:
					{
					State = 137; method();
					}
					break;
				case 3:
					{
					State = 138; classDeclaration();
					}
					break;
				case 4:
					{
					State = 139; enumDeclaration();
					}
					break;
				case 5:
					{
					State = 140; property();
					}
					break;
				case 6:
					{
					State = 141; typeDefine();
					}
					break;
				case 7:
					{
					State = 142; uDefine();
					}
					break;
				case 8:
					{
					State = 143; namespaceUnit();
					}
					break;
				case 9:
					{
					State = 144; comment();
					}
					break;
				case 10:
					{
					State = 145; preprocessDerective();
					}
					break;
				}
				}
				State = 150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 151; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceUnitContext : ParserRuleContext {
		public ITerminalNode Namespace() { return GetToken(UHeaderParser.Namespace, 0); }
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public TypePreDeclarationContext[] typePreDeclaration() {
			return GetRuleContexts<TypePreDeclarationContext>();
		}
		public TypePreDeclarationContext typePreDeclaration(int i) {
			return GetRuleContext<TypePreDeclarationContext>(i);
		}
		public MethodContext[] method() {
			return GetRuleContexts<MethodContext>();
		}
		public MethodContext method(int i) {
			return GetRuleContext<MethodContext>(i);
		}
		public ClassDeclarationContext[] classDeclaration() {
			return GetRuleContexts<ClassDeclarationContext>();
		}
		public ClassDeclarationContext classDeclaration(int i) {
			return GetRuleContext<ClassDeclarationContext>(i);
		}
		public EnumDeclarationContext[] enumDeclaration() {
			return GetRuleContexts<EnumDeclarationContext>();
		}
		public EnumDeclarationContext enumDeclaration(int i) {
			return GetRuleContext<EnumDeclarationContext>(i);
		}
		public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		public TypeDefineContext[] typeDefine() {
			return GetRuleContexts<TypeDefineContext>();
		}
		public TypeDefineContext typeDefine(int i) {
			return GetRuleContext<TypeDefineContext>(i);
		}
		public UDefineContext[] uDefine() {
			return GetRuleContexts<UDefineContext>();
		}
		public UDefineContext uDefine(int i) {
			return GetRuleContext<UDefineContext>(i);
		}
		public NamespaceUnitContext[] namespaceUnit() {
			return GetRuleContexts<NamespaceUnitContext>();
		}
		public NamespaceUnitContext namespaceUnit(int i) {
			return GetRuleContext<NamespaceUnitContext>(i);
		}
		public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public PreprocessDerectiveContext[] preprocessDerective() {
			return GetRuleContexts<PreprocessDerectiveContext>();
		}
		public PreprocessDerectiveContext preprocessDerective(int i) {
			return GetRuleContext<PreprocessDerectiveContext>(i);
		}
		public NamespaceUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceUnit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceUnitContext namespaceUnit() {
		NamespaceUnitContext _localctx = new NamespaceUnitContext(Context, State);
		EnterRule(_localctx, 2, RULE_namespaceUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153; Match(Namespace);
			State = 154; namespaceName();
			State = 155; Match(BracketsOpen);
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PtrQuant) | (1L << RefQuant) | (1L << Inline) | (1L << Virtual) | (1L << Class) | (1L << Struct) | (1L << Enum) | (1L << Const) | (1L << Static) | (1L << Extern) | (1L << Mutable) | (1L << Template) | (1L << Friend) | (1L << Typedef) | (1L << Constexpr) | (1L << Namespace) | (1L << SingleLineDerective) | (1L << MultiLineDerective) | (1L << Identifier) | (1L << ExportComment))) != 0)) {
				{
				State = 166;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 156; typePreDeclaration();
					}
					break;
				case 2:
					{
					State = 157; method();
					}
					break;
				case 3:
					{
					State = 158; classDeclaration();
					}
					break;
				case 4:
					{
					State = 159; enumDeclaration();
					}
					break;
				case 5:
					{
					State = 160; property();
					}
					break;
				case 6:
					{
					State = 161; typeDefine();
					}
					break;
				case 7:
					{
					State = 162; uDefine();
					}
					break;
				case 8:
					{
					State = 163; namespaceUnit();
					}
					break;
				case 9:
					{
					State = 164; comment();
					}
					break;
				case 10:
					{
					State = 165; preprocessDerective();
					}
					break;
				}
				}
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 171; Match(BracketsClose);
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 172; Match(T__0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public NamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameContext namespaceName() {
		NamespaceNameContext _localctx = new NamespaceNameContext(Context, State);
		EnterRule(_localctx, 4, RULE_namespaceName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypePreDeclarationContext : ParserRuleContext {
		public ClassOrStructOrEnumContext classOrStructOrEnum() {
			return GetRuleContext<ClassOrStructOrEnumContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TemplateDefineContext templateDefine() {
			return GetRuleContext<TemplateDefineContext>(0);
		}
		public IsFriendContext isFriend() {
			return GetRuleContext<IsFriendContext>(0);
		}
		public TypePreDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typePreDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypePreDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypePreDeclarationContext typePreDeclaration() {
		TypePreDeclarationContext _localctx = new TypePreDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_typePreDeclaration);
		int _la;
		try {
			State = 191;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Class:
			case Struct:
			case Enum:
			case Template:
				EnterOuterAlt(_localctx, 1);
				{
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Template) {
					{
					State = 177; templateDefine();
					}
				}

				State = 180; classOrStructOrEnum();
				State = 181; type();
				State = 182; Match(T__0);
				}
				break;
			case Friend:
				EnterOuterAlt(_localctx, 2);
				{
				State = 184; isFriend();
				State = 186;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 185; classOrStructOrEnum();
					}
					break;
				}
				State = 188; type();
				State = 189; Match(T__0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public ClassOrStructContext classOrStruct() {
			return GetRuleContext<ClassOrStructContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public TemplateDefineContext templateDefine() {
			return GetRuleContext<TemplateDefineContext>(0);
		}
		public IsFinalContext isFinal() {
			return GetRuleContext<IsFinalContext>(0);
		}
		public ITerminalNode DotDot() { return GetToken(UHeaderParser.DotDot, 0); }
		public ClassParentListContext classParentList() {
			return GetRuleContext<ClassParentListContext>(0);
		}
		public ClassAlignDefineContext classAlignDefine() {
			return GetRuleContext<ClassAlignDefineContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Template) {
				{
				State = 193; templateDefine();
				}
			}

			State = 196; classOrStruct();
			State = 197; type();
			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Final) {
				{
				State = 198; isFinal();
				}
			}

			State = 203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DotDot) {
				{
				State = 201; Match(DotDot);
				State = 202; classParentList();
				}
			}

			State = 205; Match(BracketsOpen);
			State = 206; classBody();
			State = 207; Match(BracketsClose);
			State = 209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GCC_ALIGN) {
				{
				State = 208; classAlignDefine();
				}
			}

			State = 211; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrStructOrEnumContext : ParserRuleContext {
		public ITerminalNode Class() { return GetToken(UHeaderParser.Class, 0); }
		public ITerminalNode Struct() { return GetToken(UHeaderParser.Struct, 0); }
		public ITerminalNode Enum() { return GetToken(UHeaderParser.Enum, 0); }
		public ClassOrStructOrEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrStructOrEnum; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassOrStructOrEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrStructOrEnumContext classOrStructOrEnum() {
		ClassOrStructOrEnumContext _localctx = new ClassOrStructOrEnumContext(Context, State);
		EnterRule(_localctx, 10, RULE_classOrStructOrEnum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << Struct) | (1L << Enum))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrStructContext : ParserRuleContext {
		public ITerminalNode Class() { return GetToken(UHeaderParser.Class, 0); }
		public ITerminalNode Struct() { return GetToken(UHeaderParser.Struct, 0); }
		public ClassOrStructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrStruct; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassOrStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrStructContext classOrStruct() {
		ClassOrStructContext _localctx = new ClassOrStructContext(Context, State);
		EnterRule(_localctx, 12, RULE_classOrStruct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			_la = TokenStream.LA(1);
			if ( !(_la==Class || _la==Struct) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassParentListContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public AccessSpecifierContext accessSpecifier() {
			return GetRuleContext<AccessSpecifierContext>(0);
		}
		public ClassParentListContext classParentList() {
			return GetRuleContext<ClassParentListContext>(0);
		}
		public ClassParentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classParentList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassParentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassParentListContext classParentList() {
		ClassParentListContext _localctx = new ClassParentListContext(Context, State);
		EnterRule(_localctx, 14, RULE_classParentList);
		int _la;
		try {
			State = 228;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Private) | (1L << Protected) | (1L << Public))) != 0)) {
					{
					State = 217; accessSpecifier();
					}
				}

				State = 220; type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 222;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Private) | (1L << Protected) | (1L << Public))) != 0)) {
					{
					State = 221; accessSpecifier();
					}
				}

				State = 224; type();
				State = 225; Match(T__1);
				State = 226; classParentList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassAlignDefineContext : ParserRuleContext {
		public ITerminalNode GCC_ALIGN() { return GetToken(UHeaderParser.GCC_ALIGN, 0); }
		public ClassAlignValueContext classAlignValue() {
			return GetRuleContext<ClassAlignValueContext>(0);
		}
		public ClassAlignDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classAlignDefine; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassAlignDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassAlignDefineContext classAlignDefine() {
		ClassAlignDefineContext _localctx = new ClassAlignDefineContext(Context, State);
		EnterRule(_localctx, 16, RULE_classAlignDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230; Match(GCC_ALIGN);
			State = 231; Match(T__2);
			State = 232; classAlignValue();
			State = 233; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassAlignValueContext : ParserRuleContext {
		public ITerminalNode[] Literal() { return GetTokens(UHeaderParser.Literal); }
		public ITerminalNode Literal(int i) {
			return GetToken(UHeaderParser.Literal, i);
		}
		public ClassAlignValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classAlignValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassAlignValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassAlignValueContext classAlignValue() {
		ClassAlignValueContext _localctx = new ClassAlignValueContext(Context, State);
		EnterRule(_localctx, 18, RULE_classAlignValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 235; Match(Literal);
				}
				}
				State = 238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Literal );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public AccessSpecifierContainerContext[] accessSpecifierContainer() {
			return GetRuleContexts<AccessSpecifierContainerContext>();
		}
		public AccessSpecifierContainerContext accessSpecifierContainer(int i) {
			return GetRuleContext<AccessSpecifierContainerContext>(i);
		}
		public MethodContext[] method() {
			return GetRuleContexts<MethodContext>();
		}
		public MethodContext method(int i) {
			return GetRuleContext<MethodContext>(i);
		}
		public ConstructorContext[] constructor() {
			return GetRuleContexts<ConstructorContext>();
		}
		public ConstructorContext constructor(int i) {
			return GetRuleContext<ConstructorContext>(i);
		}
		public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		public UDefineContext[] uDefine() {
			return GetRuleContexts<UDefineContext>();
		}
		public UDefineContext uDefine(int i) {
			return GetRuleContext<UDefineContext>(i);
		}
		public TypeDefineContext[] typeDefine() {
			return GetRuleContexts<TypeDefineContext>();
		}
		public TypeDefineContext typeDefine(int i) {
			return GetRuleContext<TypeDefineContext>(i);
		}
		public ClassDeclarationContext[] classDeclaration() {
			return GetRuleContexts<ClassDeclarationContext>();
		}
		public ClassDeclarationContext classDeclaration(int i) {
			return GetRuleContext<ClassDeclarationContext>(i);
		}
		public EnumDeclarationContext[] enumDeclaration() {
			return GetRuleContexts<EnumDeclarationContext>();
		}
		public EnumDeclarationContext enumDeclaration(int i) {
			return GetRuleContext<EnumDeclarationContext>(i);
		}
		public TypePreDeclarationContext[] typePreDeclaration() {
			return GetRuleContexts<TypePreDeclarationContext>();
		}
		public TypePreDeclarationContext typePreDeclaration(int i) {
			return GetRuleContext<TypePreDeclarationContext>(i);
		}
		public UnionDeclarationContext[] unionDeclaration() {
			return GetRuleContexts<UnionDeclarationContext>();
		}
		public UnionDeclarationContext unionDeclaration(int i) {
			return GetRuleContext<UnionDeclarationContext>(i);
		}
		public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public PreprocessDerectiveContext[] preprocessDerective() {
			return GetRuleContexts<PreprocessDerectiveContext>();
		}
		public PreprocessDerectiveContext preprocessDerective(int i) {
			return GetRuleContext<PreprocessDerectiveContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 20, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PtrQuant) | (1L << RefQuant) | (1L << Private) | (1L << Protected) | (1L << Public) | (1L << Inline) | (1L << Explicit) | (1L << Virtual) | (1L << Class) | (1L << Struct) | (1L << Enum) | (1L << Union) | (1L << Const) | (1L << Static) | (1L << Extern) | (1L << Mutable) | (1L << Template) | (1L << Friend) | (1L << Operator) | (1L << Typedef) | (1L << Constexpr) | (1L << Tilda) | (1L << SingleLineDerective) | (1L << MultiLineDerective) | (1L << Identifier) | (1L << ExportComment))) != 0)) {
				{
				State = 252;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 240; accessSpecifierContainer();
					}
					break;
				case 2:
					{
					State = 241; method();
					}
					break;
				case 3:
					{
					State = 242; constructor();
					}
					break;
				case 4:
					{
					State = 243; property();
					}
					break;
				case 5:
					{
					State = 244; uDefine();
					}
					break;
				case 6:
					{
					State = 245; typeDefine();
					}
					break;
				case 7:
					{
					State = 246; classDeclaration();
					}
					break;
				case 8:
					{
					State = 247; enumDeclaration();
					}
					break;
				case 9:
					{
					State = 248; typePreDeclaration();
					}
					break;
				case 10:
					{
					State = 249; unionDeclaration();
					}
					break;
				case 11:
					{
					State = 250; comment();
					}
					break;
				case 12:
					{
					State = 251; preprocessDerective();
					}
					break;
				}
				}
				State = 256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		public ITerminalNode ExportComment() { return GetToken(UHeaderParser.ExportComment, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 22, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; Match(ExportComment);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		public ITerminalNode Enum() { return GetToken(UHeaderParser.Enum, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode Class() { return GetToken(UHeaderParser.Class, 0); }
		public EnumParentContext enumParent() {
			return GetRuleContext<EnumParentContext>(0);
		}
		public EnumElementListContext enumElementList() {
			return GetRuleContext<EnumElementListContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_enumDeclaration);
		int _la;
		try {
			State = 281;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 259; Match(Enum);
				State = 261;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
				case 1:
					{
					State = 260; Match(Class);
					}
					break;
				}
				State = 263; type();
				State = 265;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DotDot) {
					{
					State = 264; enumParent();
					}
				}

				State = 271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BracketsOpen) {
					{
					State = 267; Match(BracketsOpen);
					State = 268; enumElementList();
					State = 269; Match(BracketsClose);
					}
				}

				State = 273; Match(T__0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 275; Match(Enum);
				State = 276; Match(BracketsOpen);
				State = 277; enumElementList();
				State = 278; Match(BracketsClose);
				State = 279; Match(T__0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumParentContext : ParserRuleContext {
		public ITerminalNode DotDot() { return GetToken(UHeaderParser.DotDot, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public EnumParentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumParent; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumParent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumParentContext enumParent() {
		EnumParentContext _localctx = new EnumParentContext(Context, State);
		EnterRule(_localctx, 26, RULE_enumParent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283; Match(DotDot);
			State = 284; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumElementListContext : ParserRuleContext {
		public EnumElementContext enumElement() {
			return GetRuleContext<EnumElementContext>(0);
		}
		public EnumElementListContext enumElementList() {
			return GetRuleContext<EnumElementListContext>(0);
		}
		public EnumElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumElementList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumElementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumElementListContext enumElementList() {
		EnumElementListContext _localctx = new EnumElementListContext(Context, State);
		EnterRule(_localctx, 28, RULE_enumElementList);
		try {
			State = 293;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 286; enumElement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 287; enumElement();
				State = 288; Match(T__1);
				State = 289; enumElementList();
				State = 291;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 290; Match(T__1);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumElementContext : ParserRuleContext {
		public EnumElementNameContext enumElementName() {
			return GetRuleContext<EnumElementNameContext>(0);
		}
		public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public PropertyDefaultValueContext propertyDefaultValue() {
			return GetRuleContext<PropertyDefaultValueContext>(0);
		}
		public UDefineContext uDefine() {
			return GetRuleContext<UDefineContext>(0);
		}
		public ITerminalNode DotDot() { return GetToken(UHeaderParser.DotDot, 0); }
		public EnumElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumElement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumElementContext enumElement() {
		EnumElementContext _localctx = new EnumElementContext(Context, State);
		EnterRule(_localctx, 30, RULE_enumElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ExportComment) {
				{
				{
				State = 295; comment();
				}
				}
				State = 300;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 301; enumElementName();
			State = 304;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4 || _la==DotDot) {
				{
				State = 302;
				_la = TokenStream.LA(1);
				if ( !(_la==T__4 || _la==DotDot) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 303; propertyDefaultValue();
				}
			}

			State = 307;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 306; uDefine();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumElementNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public EnumElementNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumElementName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumElementName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumElementNameContext enumElementName() {
		EnumElementNameContext _localctx = new EnumElementNameContext(Context, State);
		EnterRule(_localctx, 32, RULE_enumElementName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionDeclarationContext : ParserRuleContext {
		public ITerminalNode Union() { return GetToken(UHeaderParser.Union, 0); }
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public UnionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionDeclarationContext unionDeclaration() {
		UnionDeclarationContext _localctx = new UnionDeclarationContext(Context, State);
		EnterRule(_localctx, 34, RULE_unionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311; Match(Union);
			State = 312; methodBody();
			State = 314;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 313; Match(T__0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefineContext : ParserRuleContext {
		public ITerminalNode Typedef() { return GetToken(UHeaderParser.Typedef, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDefine; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefineContext typeDefine() {
		TypeDefineContext _localctx = new TypeDefineContext(Context, State);
		EnterRule(_localctx, 36, RULE_typeDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316; Match(Typedef);
			State = 317; type();
			State = 318; typeName();
			State = 319; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UDefineContext : ParserRuleContext {
		public UDefineNameContext uDefineName() {
			return GetRuleContext<UDefineNameContext>(0);
		}
		public UMetaContext uMeta() {
			return GetRuleContext<UMetaContext>(0);
		}
		public UDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uDefine; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UDefineContext uDefine() {
		UDefineContext _localctx = new UDefineContext(Context, State);
		EnterRule(_localctx, 38, RULE_uDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321; uDefineName();
			State = 322; Match(T__2);
			State = 323; uMeta();
			State = 324; Match(T__3);
			State = 326;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 325; Match(T__0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UDefineNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public UDefineNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uDefineName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUDefineName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UDefineNameContext uDefineName() {
		UDefineNameContext _localctx = new UDefineNameContext(Context, State);
		EnterRule(_localctx, 40, RULE_uDefineName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UMetaContext : ParserRuleContext {
		public UMetaParametrListContext uMetaParametrList() {
			return GetRuleContext<UMetaParametrListContext>(0);
		}
		public UMetaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uMeta; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUMeta(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UMetaContext uMeta() {
		UMetaContext _localctx = new UMetaContext(Context, State);
		EnterRule(_localctx, 42, RULE_uMeta);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PtrQuant) | (1L << RefQuant) | (1L << Class) | (1L << Struct) | (1L << Enum) | (1L << Const) | (1L << Identifier) | (1L << Literal))) != 0)) {
				{
				State = 330; uMetaParametrList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UMetaParametrListContext : ParserRuleContext {
		public UMetaParametrContext uMetaParametr() {
			return GetRuleContext<UMetaParametrContext>(0);
		}
		public UMetaParametrListContext uMetaParametrList() {
			return GetRuleContext<UMetaParametrListContext>(0);
		}
		public UMetaParametrListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uMetaParametrList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUMetaParametrList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UMetaParametrListContext uMetaParametrList() {
		UMetaParametrListContext _localctx = new UMetaParametrListContext(Context, State);
		EnterRule(_localctx, 44, RULE_uMetaParametrList);
		try {
			State = 338;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 333; uMetaParametr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 334; uMetaParametr();
				State = 335; Match(T__1);
				State = 336; uMetaParametrList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UMetaParametrContext : ParserRuleContext {
		public UMetaParamKeyContext uMetaParamKey() {
			return GetRuleContext<UMetaParamKeyContext>(0);
		}
		public UMetaParamValueContext uMetaParamValue() {
			return GetRuleContext<UMetaParamValueContext>(0);
		}
		public UMetaParametrListContext uMetaParametrList() {
			return GetRuleContext<UMetaParametrListContext>(0);
		}
		public UMetaParametrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uMetaParametr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUMetaParametr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UMetaParametrContext uMetaParametr() {
		UMetaParametrContext _localctx = new UMetaParametrContext(Context, State);
		EnterRule(_localctx, 46, RULE_uMetaParametr);
		try {
			State = 351;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 340; uMetaParamKey(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 341; uMetaParamKey(0);
				State = 342; Match(T__4);
				State = 343; uMetaParamValue();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 345; uMetaParamKey(0);
				State = 346; Match(T__4);
				State = 347; Match(T__2);
				State = 348; uMetaParametrList();
				State = 349; Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UMetaParamKeyContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public UMetaParamKeyContext[] uMetaParamKey() {
			return GetRuleContexts<UMetaParamKeyContext>();
		}
		public UMetaParamKeyContext uMetaParamKey(int i) {
			return GetRuleContext<UMetaParamKeyContext>(i);
		}
		public UMetaParamKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uMetaParamKey; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUMetaParamKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UMetaParamKeyContext uMetaParamKey() {
		return uMetaParamKey(0);
	}

	private UMetaParamKeyContext uMetaParamKey(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		UMetaParamKeyContext _localctx = new UMetaParamKeyContext(Context, _parentState);
		UMetaParamKeyContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_uMetaParamKey, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 356;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 354; type();
				}
				break;
			case 2:
				{
				State = 355; value();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 363;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new UMetaParamKeyContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_uMetaParamKey);
					State = 358;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 359; Match(T__5);
					State = 360; uMetaParamKey(2);
					}
					} 
				}
				State = 365;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UMetaParamValueContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public UMetaParamValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uMetaParamValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUMetaParamValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UMetaParamValueContext uMetaParamValue() {
		UMetaParamValueContext _localctx = new UMetaParamValueContext(Context, State);
		EnterRule(_localctx, 50, RULE_uMetaParamValue);
		try {
			State = 368;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 366; type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 367; value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UndefineBlockContext : ParserRuleContext {
		public UndefineContentContext undefineContent() {
			return GetRuleContext<UndefineContentContext>(0);
		}
		public UndefineBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undefineBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUndefineBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UndefineBlockContext undefineBlock() {
		UndefineBlockContext _localctx = new UndefineBlockContext(Context, State);
		EnterRule(_localctx, 52, RULE_undefineBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370; Match(T__2);
			State = 371; undefineContent();
			State = 372; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UndefineContentContext : ParserRuleContext {
		public UndefineContentContext[] undefineContent() {
			return GetRuleContexts<UndefineContentContext>();
		}
		public UndefineContentContext undefineContent(int i) {
			return GetRuleContext<UndefineContentContext>(i);
		}
		public UndefineContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undefineContent; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUndefineContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UndefineContentContext undefineContent() {
		UndefineContentContext _localctx = new UndefineContentContext(Context, State);
		EnterRule(_localctx, 54, RULE_undefineContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << PtrQuant) | (1L << RefQuant) | (1L << Private) | (1L << Protected) | (1L << Public) | (1L << Inline) | (1L << Explicit) | (1L << Virtual) | (1L << Class) | (1L << Struct) | (1L << Enum) | (1L << Union) | (1L << Const) | (1L << Final) | (1L << Static) | (1L << Extern) | (1L << Mutable) | (1L << Override) | (1L << Template) | (1L << Friend) | (1L << Operator) | (1L << Typedef) | (1L << Constexpr) | (1L << BracketsOpen) | (1L << BracketsClose) | (1L << Tilda) | (1L << Delete) | (1L << GCC_ALIGN) | (1L << UPARAM) | (1L << Namespace) | (1L << Typename) | (1L << DotDot) | (1L << SingleLineDerective) | (1L << MultiLineDerective) | (1L << Identifier) | (1L << Literal) | (1L << SpecalSymbol) | (1L << Whitespace) | (1L << Newline) | (1L << ExportComment) | (1L << BlockComment) | (1L << LineComment))) != 0)) {
				{
				{
				State = 374;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==T__2 || _la==T__3) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 379;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			{
			State = 385;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 380; Match(T__2);
				State = 381; undefineContent();
				State = 382; Match(T__3);
				State = 383; undefineContent();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorContext : ParserRuleContext {
		public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		public ITerminalNode[] Explicit() { return GetTokens(UHeaderParser.Explicit); }
		public ITerminalNode Explicit(int i) {
			return GetToken(UHeaderParser.Explicit, i);
		}
		public ITerminalNode[] Inline() { return GetTokens(UHeaderParser.Inline); }
		public ITerminalNode Inline(int i) {
			return GetToken(UHeaderParser.Inline, i);
		}
		public IsVirtualContext[] isVirtual() {
			return GetRuleContexts<IsVirtualContext>();
		}
		public IsVirtualContext isVirtual(int i) {
			return GetRuleContext<IsVirtualContext>(i);
		}
		public IsDestructorContext isDestructor() {
			return GetRuleContext<IsDestructorContext>(0);
		}
		public MethodParamsListContext methodParamsList() {
			return GetRuleContext<MethodParamsListContext>(0);
		}
		public IsConstContext isConst() {
			return GetRuleContext<IsConstContext>(0);
		}
		public ConstructorInitializerListContext constructorInitializerList() {
			return GetRuleContext<ConstructorInitializerListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public IsDeleteContext isDelete() {
			return GetRuleContext<IsDeleteContext>(0);
		}
		public ConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorContext constructor() {
		ConstructorContext _localctx = new ConstructorContext(Context, State);
		EnterRule(_localctx, 56, RULE_constructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Inline) | (1L << Explicit) | (1L << Virtual))) != 0)) {
				{
				State = 390;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Explicit:
					{
					State = 387; Match(Explicit);
					}
					break;
				case Inline:
					{
					State = 388; Match(Inline);
					}
					break;
				case Virtual:
					{
					State = 389; isVirtual();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 394;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 396;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Tilda) {
				{
				State = 395; isDestructor();
				}
			}

			State = 398; methodName();
			State = 399; Match(T__2);
			State = 401;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PtrQuant) | (1L << RefQuant) | (1L << Class) | (1L << Struct) | (1L << Enum) | (1L << Const) | (1L << UPARAM) | (1L << Typename) | (1L << Identifier))) != 0)) {
				{
				State = 400; methodParamsList();
				}
			}

			State = 403; Match(T__3);
			State = 405;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				State = 404; isConst();
				}
				break;
			}
			State = 409;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DotDot) {
				{
				State = 407; Match(DotDot);
				State = 408; constructorInitializerList();
				}
			}

			State = 413;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BracketsOpen:
				{
				State = 411; methodBody();
				}
				break;
			case T__4:
				{
				State = 412; isDelete();
				}
				break;
			case T__0:
			case PtrQuant:
			case RefQuant:
			case Private:
			case Protected:
			case Public:
			case Inline:
			case Explicit:
			case Virtual:
			case Class:
			case Struct:
			case Enum:
			case Union:
			case Const:
			case Static:
			case Extern:
			case Mutable:
			case Template:
			case Friend:
			case Operator:
			case Typedef:
			case Constexpr:
			case BracketsClose:
			case Tilda:
			case SingleLineDerective:
			case MultiLineDerective:
			case Identifier:
			case ExportComment:
				break;
			default:
				break;
			}
			State = 416;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 415; Match(T__0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorInitializerListContext : ParserRuleContext {
		public ConstructorInitializerContext constructorInitializer() {
			return GetRuleContext<ConstructorInitializerContext>(0);
		}
		public ConstructorInitializerListContext constructorInitializerList() {
			return GetRuleContext<ConstructorInitializerListContext>(0);
		}
		public ConstructorInitializerListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorInitializerList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorInitializerList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorInitializerListContext constructorInitializerList() {
		ConstructorInitializerListContext _localctx = new ConstructorInitializerListContext(Context, State);
		EnterRule(_localctx, 58, RULE_constructorInitializerList);
		try {
			State = 423;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 418; constructorInitializer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 419; constructorInitializer();
				State = 420; Match(T__1);
				State = 421; constructorInitializerList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorInitializerContext : ParserRuleContext {
		public MethodParametrNameContext methodParametrName() {
			return GetRuleContext<MethodParametrNameContext>(0);
		}
		public MethodParametrDefaultValueContext methodParametrDefaultValue() {
			return GetRuleContext<MethodParametrDefaultValueContext>(0);
		}
		public UndefineBlockContext undefineBlock() {
			return GetRuleContext<UndefineBlockContext>(0);
		}
		public ConstructorInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorInitializer; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorInitializerContext constructorInitializer() {
		ConstructorInitializerContext _localctx = new ConstructorInitializerContext(Context, State);
		EnterRule(_localctx, 60, RULE_constructorInitializer);
		int _la;
		try {
			State = 435;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 425; methodParametrName();
				State = 426; Match(T__2);
				State = 428;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PtrQuant) | (1L << RefQuant) | (1L << Identifier) | (1L << Literal))) != 0)) {
					{
					State = 427; methodParametrDefaultValue();
					}
				}

				State = 430; Match(T__3);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 432; methodParametrName();
				State = 433; undefineBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		public TemplateDefineContext templateDefine() {
			return GetRuleContext<TemplateDefineContext>(0);
		}
		public ITerminalNode[] Constexpr() { return GetTokens(UHeaderParser.Constexpr); }
		public ITerminalNode Constexpr(int i) {
			return GetToken(UHeaderParser.Constexpr, i);
		}
		public IsFriendContext[] isFriend() {
			return GetRuleContexts<IsFriendContext>();
		}
		public IsFriendContext isFriend(int i) {
			return GetRuleContext<IsFriendContext>(i);
		}
		public ITerminalNode[] Inline() { return GetTokens(UHeaderParser.Inline); }
		public ITerminalNode Inline(int i) {
			return GetToken(UHeaderParser.Inline, i);
		}
		public ITerminalNode[] Extern() { return GetTokens(UHeaderParser.Extern); }
		public ITerminalNode Extern(int i) {
			return GetToken(UHeaderParser.Extern, i);
		}
		public IsStaticContext[] isStatic() {
			return GetRuleContexts<IsStaticContext>();
		}
		public IsStaticContext isStatic(int i) {
			return GetRuleContext<IsStaticContext>(i);
		}
		public IsVirtualContext[] isVirtual() {
			return GetRuleContexts<IsVirtualContext>();
		}
		public IsVirtualContext isVirtual(int i) {
			return GetRuleContext<IsVirtualContext>(i);
		}
		public MethodParamsListContext methodParamsList() {
			return GetRuleContext<MethodParamsListContext>(0);
		}
		public IsConstContext isConst() {
			return GetRuleContext<IsConstContext>(0);
		}
		public IsOverrideContext isOverride() {
			return GetRuleContext<IsOverrideContext>(0);
		}
		public IsFinalContext isFinal() {
			return GetRuleContext<IsFinalContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public IsDeleteContext isDelete() {
			return GetRuleContext<IsDeleteContext>(0);
		}
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(Context, State);
		EnterRule(_localctx, 62, RULE_method);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Template) {
				{
				State = 437; templateDefine();
				}
			}

			State = 448;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Inline) | (1L << Virtual) | (1L << Static) | (1L << Extern) | (1L << Friend) | (1L << Constexpr))) != 0)) {
				{
				State = 446;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Constexpr:
					{
					State = 440; Match(Constexpr);
					}
					break;
				case Friend:
					{
					State = 441; isFriend();
					}
					break;
				case Inline:
					{
					State = 442; Match(Inline);
					}
					break;
				case Extern:
					{
					State = 443; Match(Extern);
					}
					break;
				case Static:
					{
					State = 444; isStatic();
					}
					break;
				case Virtual:
					{
					State = 445; isVirtual();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 450;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 451; type();
			State = 452; methodName();
			State = 453; Match(T__2);
			State = 455;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PtrQuant) | (1L << RefQuant) | (1L << Class) | (1L << Struct) | (1L << Enum) | (1L << Const) | (1L << UPARAM) | (1L << Typename) | (1L << Identifier))) != 0)) {
				{
				State = 454; methodParamsList();
				}
			}

			State = 457; Match(T__3);
			State = 459;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				State = 458; isConst();
				}
				break;
			}
			State = 462;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Override) {
				{
				State = 461; isOverride();
				}
			}

			State = 465;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Final) {
				{
				State = 464; isFinal();
				}
			}

			State = 469;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BracketsOpen:
				{
				State = 467; methodBody();
				}
				break;
			case T__4:
				{
				State = 468; isDelete();
				}
				break;
			case Eof:
			case T__0:
			case PtrQuant:
			case RefQuant:
			case Private:
			case Protected:
			case Public:
			case Inline:
			case Explicit:
			case Virtual:
			case Class:
			case Struct:
			case Enum:
			case Union:
			case Const:
			case Static:
			case Extern:
			case Mutable:
			case Template:
			case Friend:
			case Operator:
			case Typedef:
			case Constexpr:
			case BracketsClose:
			case Tilda:
			case Namespace:
			case SingleLineDerective:
			case MultiLineDerective:
			case Identifier:
			case ExportComment:
				break;
			default:
				break;
			}
			State = 472;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 471; Match(T__0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParamsListContext : ParserRuleContext {
		public MethodParametrContext methodParametr() {
			return GetRuleContext<MethodParametrContext>(0);
		}
		public MethodParamsListContext methodParamsList() {
			return GetRuleContext<MethodParamsListContext>(0);
		}
		public MethodParamsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParamsList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParamsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParamsListContext methodParamsList() {
		MethodParamsListContext _localctx = new MethodParamsListContext(Context, State);
		EnterRule(_localctx, 64, RULE_methodParamsList);
		try {
			State = 479;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 474; methodParametr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 475; methodParametr();
				State = 476; Match(T__1);
				State = 477; methodParamsList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParametrContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MethodParametrMetadataContext methodParametrMetadata() {
			return GetRuleContext<MethodParametrMetadataContext>(0);
		}
		public MethodParametrTemplateContext methodParametrTemplate() {
			return GetRuleContext<MethodParametrTemplateContext>(0);
		}
		public MethodParametrNameContext methodParametrName() {
			return GetRuleContext<MethodParametrNameContext>(0);
		}
		public MethodParametrDefaultValueContext methodParametrDefaultValue() {
			return GetRuleContext<MethodParametrDefaultValueContext>(0);
		}
		public MethodParametrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParametr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParametr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParametrContext methodParametr() {
		MethodParametrContext _localctx = new MethodParametrContext(Context, State);
		EnterRule(_localctx, 66, RULE_methodParametr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UPARAM) {
				{
				State = 481; methodParametrMetadata();
				}
			}

			State = 485;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Typename) {
				{
				State = 484; methodParametrTemplate();
				}
			}

			State = 487; type();
			State = 493;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 488; methodParametrName();
				State = 491;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__4) {
					{
					State = 489; Match(T__4);
					State = 490; methodParametrDefaultValue();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParametrMetadataContext : ParserRuleContext {
		public ITerminalNode UPARAM() { return GetToken(UHeaderParser.UPARAM, 0); }
		public UMetaParametrListContext uMetaParametrList() {
			return GetRuleContext<UMetaParametrListContext>(0);
		}
		public MethodParametrMetadataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParametrMetadata; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParametrMetadata(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParametrMetadataContext methodParametrMetadata() {
		MethodParametrMetadataContext _localctx = new MethodParametrMetadataContext(Context, State);
		EnterRule(_localctx, 68, RULE_methodParametrMetadata);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495; Match(UPARAM);
			State = 496; Match(T__2);
			State = 498;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PtrQuant) | (1L << RefQuant) | (1L << Class) | (1L << Struct) | (1L << Enum) | (1L << Const) | (1L << Identifier) | (1L << Literal))) != 0)) {
				{
				State = 497; uMetaParametrList();
				}
			}

			State = 500; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParametrTemplateContext : ParserRuleContext {
		public ITerminalNode Typename() { return GetToken(UHeaderParser.Typename, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode[] DotDot() { return GetTokens(UHeaderParser.DotDot); }
		public ITerminalNode DotDot(int i) {
			return GetToken(UHeaderParser.DotDot, i);
		}
		public ITerminalNode Template() { return GetToken(UHeaderParser.Template, 0); }
		public MethodParametrTemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParametrTemplate; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParametrTemplate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParametrTemplateContext methodParametrTemplate() {
		MethodParametrTemplateContext _localctx = new MethodParametrTemplateContext(Context, State);
		EnterRule(_localctx, 70, RULE_methodParametrTemplate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 502; Match(Typename);
			State = 508;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 503; type();
				State = 504; Match(DotDot);
				State = 505; Match(DotDot);
				State = 506; Match(Template);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParametrNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public MethodParametrNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParametrName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParametrName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParametrNameContext methodParametrName() {
		MethodParametrNameContext _localctx = new MethodParametrNameContext(Context, State);
		EnterRule(_localctx, 72, RULE_methodParametrName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 510; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParametrDefaultValueContext : ParserRuleContext {
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public MethodParametrDefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParametrDefaultValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParametrDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParametrDefaultValueContext methodParametrDefaultValue() {
		MethodParametrDefaultValueContext _localctx = new MethodParametrDefaultValueContext(Context, State);
		EnterRule(_localctx, 74, RULE_methodParametrDefaultValue);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 512; value();
			State = 517;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 513; Match(T__1);
					State = 514; value();
					}
					} 
				}
				State = 519;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(UHeaderParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(UHeaderParser.Identifier, i);
		}
		public ITerminalNode[] Literal() { return GetTokens(UHeaderParser.Literal); }
		public ITerminalNode Literal(int i) {
			return GetToken(UHeaderParser.Literal, i);
		}
		public IsPtrQuantContext isPtrQuant() {
			return GetRuleContext<IsPtrQuantContext>(0);
		}
		public IsRefQuantContext isRefQuant() {
			return GetRuleContext<IsRefQuantContext>(0);
		}
		public MethodParametrDefaultValueContext methodParametrDefaultValue() {
			return GetRuleContext<MethodParametrDefaultValueContext>(0);
		}
		public ITerminalNode[] SpecalSymbol() { return GetTokens(UHeaderParser.SpecalSymbol); }
		public ITerminalNode SpecalSymbol(int i) {
			return GetToken(UHeaderParser.SpecalSymbol, i);
		}
		public ITerminalNode[] DotDot() { return GetTokens(UHeaderParser.DotDot); }
		public ITerminalNode DotDot(int i) {
			return GetToken(UHeaderParser.DotDot, i);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 76, RULE_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 522;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PtrQuant:
				{
				State = 520; isPtrQuant();
				}
				break;
			case RefQuant:
				{
				State = 521; isRefQuant();
				}
				break;
			case Identifier:
			case Literal:
				break;
			default:
				break;
			}
			State = 524;
			_la = TokenStream.LA(1);
			if ( !(_la==Identifier || _la==Literal) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 531;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				{
				State = 526;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 525;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << DotDot) | (1L << SpecalSymbol))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 528;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << DotDot) | (1L << SpecalSymbol))) != 0) );
				State = 530;
				_la = TokenStream.LA(1);
				if ( !(_la==Identifier || _la==Literal) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 538;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				{
				State = 533; Match(T__2);
				State = 535;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PtrQuant) | (1L << RefQuant) | (1L << Identifier) | (1L << Literal))) != 0)) {
					{
					State = 534; methodParametrDefaultValue();
					}
				}

				State = 537; Match(T__3);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public MethodBodyContentContext methodBodyContent() {
			return GetRuleContext<MethodBodyContentContext>(0);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 78, RULE_methodBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 540; Match(BracketsOpen);
			State = 541; methodBodyContent();
			State = 542; Match(BracketsClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContentContext : ParserRuleContext {
		public ITerminalNode[] BracketsOpen() { return GetTokens(UHeaderParser.BracketsOpen); }
		public ITerminalNode BracketsOpen(int i) {
			return GetToken(UHeaderParser.BracketsOpen, i);
		}
		public ITerminalNode[] BracketsClose() { return GetTokens(UHeaderParser.BracketsClose); }
		public ITerminalNode BracketsClose(int i) {
			return GetToken(UHeaderParser.BracketsClose, i);
		}
		public MethodBodyContentContext[] methodBodyContent() {
			return GetRuleContexts<MethodBodyContentContext>();
		}
		public MethodBodyContentContext methodBodyContent(int i) {
			return GetRuleContext<MethodBodyContentContext>(i);
		}
		public MethodBodyContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBodyContent; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBodyContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContentContext methodBodyContent() {
		MethodBodyContentContext _localctx = new MethodBodyContentContext(Context, State);
		EnterRule(_localctx, 80, RULE_methodBodyContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 547;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << PtrQuant) | (1L << RefQuant) | (1L << Private) | (1L << Protected) | (1L << Public) | (1L << Inline) | (1L << Explicit) | (1L << Virtual) | (1L << Class) | (1L << Struct) | (1L << Enum) | (1L << Union) | (1L << Const) | (1L << Final) | (1L << Static) | (1L << Extern) | (1L << Mutable) | (1L << Override) | (1L << Template) | (1L << Friend) | (1L << Operator) | (1L << Typedef) | (1L << Constexpr) | (1L << Tilda) | (1L << Delete) | (1L << GCC_ALIGN) | (1L << UPARAM) | (1L << Namespace) | (1L << Typename) | (1L << DotDot) | (1L << SingleLineDerective) | (1L << MultiLineDerective) | (1L << Identifier) | (1L << Literal) | (1L << SpecalSymbol) | (1L << Whitespace) | (1L << Newline) | (1L << ExportComment) | (1L << BlockComment) | (1L << LineComment))) != 0)) {
				{
				{
				State = 544;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==BracketsOpen || _la==BracketsClose) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 549;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			{
			State = 555;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BracketsOpen) {
				{
				State = 550; Match(BracketsOpen);
				State = 551; methodBodyContent();
				State = 552; Match(BracketsClose);
				State = 553; methodBodyContent();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public ITerminalNode[] DotDot() { return GetTokens(UHeaderParser.DotDot); }
		public ITerminalNode DotDot(int i) {
			return GetToken(UHeaderParser.DotDot, i);
		}
		public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		public ITerminalNode Operator() { return GetToken(UHeaderParser.Operator, 0); }
		public MethodOperatorContext methodOperator() {
			return GetRuleContext<MethodOperatorContext>(0);
		}
		public MethodNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodNameContext methodName() {
		MethodNameContext _localctx = new MethodNameContext(Context, State);
		EnterRule(_localctx, 82, RULE_methodName);
		int _la;
		try {
			State = 565;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 557; Match(Identifier);
				State = 561;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DotDot) {
					{
					State = 558; Match(DotDot);
					State = 559; Match(DotDot);
					State = 560; methodName();
					}
				}

				}
				break;
			case Operator:
				EnterOuterAlt(_localctx, 2);
				{
				State = 563; Match(Operator);
				State = 564; methodOperator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodOperatorContext : ParserRuleContext {
		public ITerminalNode[] PtrQuant() { return GetTokens(UHeaderParser.PtrQuant); }
		public ITerminalNode PtrQuant(int i) {
			return GetToken(UHeaderParser.PtrQuant, i);
		}
		public ITerminalNode[] SpecalSymbol() { return GetTokens(UHeaderParser.SpecalSymbol); }
		public ITerminalNode SpecalSymbol(int i) {
			return GetToken(UHeaderParser.SpecalSymbol, i);
		}
		public ITerminalNode[] Identifier() { return GetTokens(UHeaderParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(UHeaderParser.Identifier, i);
		}
		public MethodOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodOperator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodOperatorContext methodOperator() {
		MethodOperatorContext _localctx = new MethodOperatorContext(Context, State);
		EnterRule(_localctx, 84, RULE_methodOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 568;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 567;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PtrQuant) | (1L << RefQuant) | (1L << Identifier) | (1L << SpecalSymbol))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 570;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PtrQuant) | (1L << RefQuant) | (1L << Identifier) | (1L << SpecalSymbol))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public TemplateDefineContext templateDefine() {
			return GetRuleContext<TemplateDefineContext>(0);
		}
		public ITerminalNode[] Mutable() { return GetTokens(UHeaderParser.Mutable); }
		public ITerminalNode Mutable(int i) {
			return GetToken(UHeaderParser.Mutable, i);
		}
		public ITerminalNode[] Extern() { return GetTokens(UHeaderParser.Extern); }
		public ITerminalNode Extern(int i) {
			return GetToken(UHeaderParser.Extern, i);
		}
		public IsStaticContext[] isStatic() {
			return GetRuleContexts<IsStaticContext>();
		}
		public IsStaticContext isStatic(int i) {
			return GetRuleContext<IsStaticContext>(i);
		}
		public IsArrayContext isArray() {
			return GetRuleContext<IsArrayContext>(0);
		}
		public PropertyDefaultValueContext propertyDefaultValue() {
			return GetRuleContext<PropertyDefaultValueContext>(0);
		}
		public ITerminalNode DotDot() { return GetToken(UHeaderParser.DotDot, 0); }
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 86, RULE_property);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 573;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Template) {
				{
				State = 572; templateDefine();
				}
			}

			State = 580;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Static) | (1L << Extern) | (1L << Mutable))) != 0)) {
				{
				State = 578;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Mutable:
					{
					State = 575; Match(Mutable);
					}
					break;
				case Extern:
					{
					State = 576; Match(Extern);
					}
					break;
				case Static:
					{
					State = 577; isStatic();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 582;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 583; type();
			State = 584; propertyName();
			State = 586;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 585; isArray();
				}
			}

			State = 590;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4 || _la==DotDot) {
				{
				State = 588;
				_la = TokenStream.LA(1);
				if ( !(_la==T__4 || _la==DotDot) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 589; propertyDefaultValue();
				}
			}

			State = 592; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public TemplateParamListContext templateParamList() {
			return GetRuleContext<TemplateParamListContext>(0);
		}
		public ITerminalNode[] DotDot() { return GetTokens(UHeaderParser.DotDot); }
		public ITerminalNode DotDot(int i) {
			return GetToken(UHeaderParser.DotDot, i);
		}
		public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public PropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyNameContext propertyName() {
		PropertyNameContext _localctx = new PropertyNameContext(Context, State);
		EnterRule(_localctx, 88, RULE_propertyName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 594; Match(Identifier);
			State = 599;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 595; Match(T__6);
				State = 596; templateParamList();
				State = 597; Match(T__7);
				}
			}

			State = 604;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				{
				State = 601; Match(DotDot);
				State = 602; Match(DotDot);
				State = 603; propertyName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyDefaultValueContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public PropertyDefaultValueContext propertyDefaultValue() {
			return GetRuleContext<PropertyDefaultValueContext>(0);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public PropertyDefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyDefaultValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyDefaultValueContext propertyDefaultValue() {
		PropertyDefaultValueContext _localctx = new PropertyDefaultValueContext(Context, State);
		EnterRule(_localctx, 90, RULE_propertyDefaultValue);
		int _la;
		try {
			State = 614;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 606; Match(Identifier);
				State = 611;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 607; Match(T__2);
					State = 608; propertyDefaultValue();
					State = 609; Match(T__3);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 613; value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public IsConstContext[] isConst() {
			return GetRuleContexts<IsConstContext>();
		}
		public IsConstContext isConst(int i) {
			return GetRuleContext<IsConstContext>(i);
		}
		public ClassOrStructOrEnumContext classOrStructOrEnum() {
			return GetRuleContext<ClassOrStructOrEnumContext>(0);
		}
		public IsPtrQuantContext[] isPtrQuant() {
			return GetRuleContexts<IsPtrQuantContext>();
		}
		public IsPtrQuantContext isPtrQuant(int i) {
			return GetRuleContext<IsPtrQuantContext>(i);
		}
		public IsRefQuantContext[] isRefQuant() {
			return GetRuleContexts<IsRefQuantContext>();
		}
		public IsRefQuantContext isRefQuant(int i) {
			return GetRuleContext<IsRefQuantContext>(i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 92, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 617;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Const) {
				{
				State = 616; isConst();
				}
			}

			State = 620;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << Struct) | (1L << Enum))) != 0)) {
				{
				State = 619; classOrStructOrEnum();
				}
			}

			State = 624;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PtrQuant:
				{
				State = 622; isPtrQuant();
				}
				break;
			case RefQuant:
				{
				State = 623; isRefQuant();
				}
				break;
			case Identifier:
				break;
			default:
				break;
			}
			State = 626; typeName();
			State = 629;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				{
				State = 627; isPtrQuant();
				}
				break;
			case 2:
				{
				State = 628; isRefQuant();
				}
				break;
			}
			State = 632;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				{
				State = 631; isConst();
				}
				break;
			}
			State = 636;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				{
				State = 634; isPtrQuant();
				}
				break;
			case 2:
				{
				State = 635; isRefQuant();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsPtrQuantContext : ParserRuleContext {
		public ITerminalNode PtrQuant() { return GetToken(UHeaderParser.PtrQuant, 0); }
		public IsPtrQuantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isPtrQuant; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsPtrQuant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsPtrQuantContext isPtrQuant() {
		IsPtrQuantContext _localctx = new IsPtrQuantContext(Context, State);
		EnterRule(_localctx, 94, RULE_isPtrQuant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 638; Match(PtrQuant);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsRefQuantContext : ParserRuleContext {
		public ITerminalNode RefQuant() { return GetToken(UHeaderParser.RefQuant, 0); }
		public IsRefQuantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isRefQuant; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsRefQuant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsRefQuantContext isRefQuant() {
		IsRefQuantContext _localctx = new IsRefQuantContext(Context, State);
		EnterRule(_localctx, 96, RULE_isRefQuant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 640; Match(RefQuant);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public ITerminalNode[] DotDot() { return GetTokens(UHeaderParser.DotDot); }
		public ITerminalNode DotDot(int i) {
			return GetToken(UHeaderParser.DotDot, i);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode[] Literal() { return GetTokens(UHeaderParser.Literal); }
		public ITerminalNode Literal(int i) {
			return GetToken(UHeaderParser.Literal, i);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 98, RULE_typeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 642; Match(Identifier);
			State = 659;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				{
				State = 643; Match(T__6);
				State = 646;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PtrQuant:
				case RefQuant:
				case Class:
				case Struct:
				case Enum:
				case Const:
				case Identifier:
					{
					State = 644; type();
					}
					break;
				case Literal:
					{
					State = 645; Match(Literal);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 655;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 648; Match(T__1);
					State = 651;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case PtrQuant:
					case RefQuant:
					case Class:
					case Struct:
					case Enum:
					case Const:
					case Identifier:
						{
						State = 649; type();
						}
						break;
					case Literal:
						{
						State = 650; Match(Literal);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					State = 657;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 658; Match(T__7);
				}
				break;
			}
			State = 664;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				{
				State = 661; Match(DotDot);
				State = 662; Match(DotDot);
				State = 663; typeName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsVirtualContext : ParserRuleContext {
		public ITerminalNode Virtual() { return GetToken(UHeaderParser.Virtual, 0); }
		public IsVirtualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isVirtual; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsVirtual(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsVirtualContext isVirtual() {
		IsVirtualContext _localctx = new IsVirtualContext(Context, State);
		EnterRule(_localctx, 100, RULE_isVirtual);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 666; Match(Virtual);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsOverrideContext : ParserRuleContext {
		public ITerminalNode Override() { return GetToken(UHeaderParser.Override, 0); }
		public IsOverrideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isOverride; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsOverride(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsOverrideContext isOverride() {
		IsOverrideContext _localctx = new IsOverrideContext(Context, State);
		EnterRule(_localctx, 102, RULE_isOverride);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 668; Match(Override);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsConstContext : ParserRuleContext {
		public ITerminalNode Const() { return GetToken(UHeaderParser.Const, 0); }
		public IsConstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isConst; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsConst(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsConstContext isConst() {
		IsConstContext _localctx = new IsConstContext(Context, State);
		EnterRule(_localctx, 104, RULE_isConst);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 670; Match(Const);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsStaticContext : ParserRuleContext {
		public ITerminalNode Static() { return GetToken(UHeaderParser.Static, 0); }
		public IsStaticContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isStatic; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsStatic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsStaticContext isStatic() {
		IsStaticContext _localctx = new IsStaticContext(Context, State);
		EnterRule(_localctx, 106, RULE_isStatic);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 672; Match(Static);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsFriendContext : ParserRuleContext {
		public ITerminalNode Friend() { return GetToken(UHeaderParser.Friend, 0); }
		public IsFriendContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isFriend; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsFriend(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsFriendContext isFriend() {
		IsFriendContext _localctx = new IsFriendContext(Context, State);
		EnterRule(_localctx, 108, RULE_isFriend);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 674; Match(Friend);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsFinalContext : ParserRuleContext {
		public ITerminalNode Final() { return GetToken(UHeaderParser.Final, 0); }
		public IsFinalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isFinal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsFinal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsFinalContext isFinal() {
		IsFinalContext _localctx = new IsFinalContext(Context, State);
		EnterRule(_localctx, 110, RULE_isFinal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 676; Match(Final);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsDestructorContext : ParserRuleContext {
		public ITerminalNode Tilda() { return GetToken(UHeaderParser.Tilda, 0); }
		public IsDestructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isDestructor; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsDestructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsDestructorContext isDestructor() {
		IsDestructorContext _localctx = new IsDestructorContext(Context, State);
		EnterRule(_localctx, 112, RULE_isDestructor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 678; Match(Tilda);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsDeleteContext : ParserRuleContext {
		public ITerminalNode Delete() { return GetToken(UHeaderParser.Delete, 0); }
		public IsDeleteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isDelete; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsDelete(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsDeleteContext isDelete() {
		IsDeleteContext _localctx = new IsDeleteContext(Context, State);
		EnterRule(_localctx, 114, RULE_isDelete);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 680; Match(T__4);
			State = 681; Match(Delete);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsArrayContext : ParserRuleContext {
		public ArrayLenContext arrayLen() {
			return GetRuleContext<ArrayLenContext>(0);
		}
		public IsArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isArray; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsArrayContext isArray() {
		IsArrayContext _localctx = new IsArrayContext(Context, State);
		EnterRule(_localctx, 116, RULE_isArray);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 683; Match(T__8);
			State = 684; arrayLen();
			State = 685; Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLenContext : ParserRuleContext {
		public ITerminalNode Literal() { return GetToken(UHeaderParser.Literal, 0); }
		public ArrayLenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLen; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLenContext arrayLen() {
		ArrayLenContext _localctx = new ArrayLenContext(Context, State);
		EnterRule(_localctx, 118, RULE_arrayLen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 687; Match(Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateDefineContext : ParserRuleContext {
		public ITerminalNode Template() { return GetToken(UHeaderParser.Template, 0); }
		public TemplateParamListContext templateParamList() {
			return GetRuleContext<TemplateParamListContext>(0);
		}
		public TemplateDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateDefine; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateDefineContext templateDefine() {
		TemplateDefineContext _localctx = new TemplateDefineContext(Context, State);
		EnterRule(_localctx, 120, RULE_templateDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 689; Match(Template);
			State = 690; Match(T__6);
			State = 692;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << Struct) | (1L << Enum) | (1L << Typename) | (1L << Identifier))) != 0)) {
				{
				State = 691; templateParamList();
				}
			}

			State = 694; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateParamListContext : ParserRuleContext {
		public TemplateParamContext templateParam() {
			return GetRuleContext<TemplateParamContext>(0);
		}
		public ITerminalNode Typename() { return GetToken(UHeaderParser.Typename, 0); }
		public TemplateParamListContext templateParamList() {
			return GetRuleContext<TemplateParamListContext>(0);
		}
		public TemplateParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateParamList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateParamListContext templateParamList() {
		TemplateParamListContext _localctx = new TemplateParamListContext(Context, State);
		EnterRule(_localctx, 122, RULE_templateParamList);
		int _la;
		try {
			State = 709;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 697;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Typename) {
					{
					State = 696; Match(Typename);
					}
				}

				State = 699; templateParam();
				State = 702;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 700; Match(T__1);
					State = 701; templateParamList();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 704; Match(Typename);
				State = 707;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 705; Match(T__1);
					State = 706; templateParamList();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateParamContext : ParserRuleContext {
		public TemplateParamTypeContext templateParamType() {
			return GetRuleContext<TemplateParamTypeContext>(0);
		}
		public TemplateParamLiterContext templateParamLiter() {
			return GetRuleContext<TemplateParamLiterContext>(0);
		}
		public PropertyDefaultValueContext propertyDefaultValue() {
			return GetRuleContext<PropertyDefaultValueContext>(0);
		}
		public TemplateParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateParam; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateParamContext templateParam() {
		TemplateParamContext _localctx = new TemplateParamContext(Context, State);
		EnterRule(_localctx, 124, RULE_templateParam);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 711; templateParamType();
			State = 713;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 712; templateParamLiter();
				}
			}

			State = 717;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 715; Match(T__4);
				State = 716; propertyDefaultValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateParamTypeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public ITerminalNode Class() { return GetToken(UHeaderParser.Class, 0); }
		public ITerminalNode Struct() { return GetToken(UHeaderParser.Struct, 0); }
		public ITerminalNode Enum() { return GetToken(UHeaderParser.Enum, 0); }
		public TemplateParamTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateParamType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateParamType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateParamTypeContext templateParamType() {
		TemplateParamTypeContext _localctx = new TemplateParamTypeContext(Context, State);
		EnterRule(_localctx, 126, RULE_templateParamType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 719;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << Struct) | (1L << Enum) | (1L << Identifier))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateParamLiterContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public TemplateParamLiterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateParamLiter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateParamLiter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateParamLiterContext templateParamLiter() {
		TemplateParamLiterContext _localctx = new TemplateParamLiterContext(Context, State);
		EnterRule(_localctx, 128, RULE_templateParamLiter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 721; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessSpecifierContainerContext : ParserRuleContext {
		public AccessSpecifierContext accessSpecifier() {
			return GetRuleContext<AccessSpecifierContext>(0);
		}
		public ITerminalNode DotDot() { return GetToken(UHeaderParser.DotDot, 0); }
		public AccessSpecifierContainerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessSpecifierContainer; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessSpecifierContainer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessSpecifierContainerContext accessSpecifierContainer() {
		AccessSpecifierContainerContext _localctx = new AccessSpecifierContainerContext(Context, State);
		EnterRule(_localctx, 130, RULE_accessSpecifierContainer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 723; accessSpecifier();
			State = 724; Match(DotDot);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessSpecifierContext : ParserRuleContext {
		public ITerminalNode Private() { return GetToken(UHeaderParser.Private, 0); }
		public ITerminalNode Protected() { return GetToken(UHeaderParser.Protected, 0); }
		public ITerminalNode Public() { return GetToken(UHeaderParser.Public, 0); }
		public AccessSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessSpecifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessSpecifierContext accessSpecifier() {
		AccessSpecifierContext _localctx = new AccessSpecifierContext(Context, State);
		EnterRule(_localctx, 132, RULE_accessSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 726;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Private) | (1L << Protected) | (1L << Public))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessDerectiveContext : ParserRuleContext {
		public ITerminalNode SingleLineDerective() { return GetToken(UHeaderParser.SingleLineDerective, 0); }
		public ITerminalNode MultiLineDerective() { return GetToken(UHeaderParser.MultiLineDerective, 0); }
		public PreprocessDerectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessDerective; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessDerective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessDerectiveContext preprocessDerective() {
		PreprocessDerectiveContext _localctx = new PreprocessDerectiveContext(Context, State);
		EnterRule(_localctx, 134, RULE_preprocessDerective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 728;
			_la = TokenStream.LA(1);
			if ( !(_la==SingleLineDerective || _la==MultiLineDerective) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 24: return uMetaParamKey_sempred((UMetaParamKeyContext)_localctx, predIndex);
		}
		return true;
	}
	private bool uMetaParamKey_sempred(UMetaParamKeyContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x36', '\x2DD', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\a', '\x2', '\x95', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x98', 
		'\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\a', '\x3', '\xA9', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\xAC', 
		'\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\xB0', '\n', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x5', '\x5', '\xB5', '\n', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', '\xBD', '\n', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\xC2', '\n', '\x5', '\x3', 
		'\x6', '\x5', '\x6', '\xC5', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x5', '\x6', '\xCA', '\n', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x5', '\x6', '\xCE', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\xD4', '\n', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x5', '\t', '\xDD', '\n', '\t', '\x3', '\t', '\x3', '\t', 
		'\x5', '\t', '\xE1', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x5', '\t', '\xE7', '\n', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x6', '\v', '\xEF', 
		'\n', '\v', '\r', '\v', '\xE', '\v', '\xF0', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', 
		'\xFF', '\n', '\f', '\f', '\f', '\xE', '\f', '\x102', '\v', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x108', 
		'\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x10C', '\n', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\x112', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '\x11C', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x5', '\x10', '\x126', '\n', '\x10', '\x5', '\x10', '\x128', 
		'\n', '\x10', '\x3', '\x11', '\a', '\x11', '\x12B', '\n', '\x11', '\f', 
		'\x11', '\xE', '\x11', '\x12E', '\v', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x5', '\x11', '\x133', '\n', '\x11', '\x3', '\x11', '\x5', 
		'\x11', '\x136', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x13D', '\n', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', 
		'\x15', '\x149', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', 
		'\x5', '\x17', '\x14E', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x155', '\n', '\x18', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x5', '\x19', '\x162', '\n', '\x19', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x167', '\n', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\x16C', '\n', '\x1A', '\f', 
		'\x1A', '\xE', '\x1A', '\x16F', '\v', '\x1A', '\x3', '\x1B', '\x3', '\x1B', 
		'\x5', '\x1B', '\x173', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1D', '\a', '\x1D', '\x17A', '\n', '\x1D', 
		'\f', '\x1D', '\xE', '\x1D', '\x17D', '\v', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x184', 
		'\n', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\a', '\x1E', 
		'\x189', '\n', '\x1E', '\f', '\x1E', '\xE', '\x1E', '\x18C', '\v', '\x1E', 
		'\x3', '\x1E', '\x5', '\x1E', '\x18F', '\n', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x194', '\n', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x5', '\x1E', '\x198', '\n', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x5', '\x1E', '\x19C', '\n', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x5', '\x1E', '\x1A0', '\n', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x1A3', 
		'\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x5', '\x1F', '\x1AA', '\n', '\x1F', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x5', ' ', '\x1AF', '\n', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x1B6', '\n', ' ', '\x3', 
		'!', '\x5', '!', '\x1B9', '\n', '!', '\x3', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x3', '!', '\x3', '!', '\a', '!', '\x1C1', '\n', '!', '\f', 
		'!', '\xE', '!', '\x1C4', '\v', '!', '\x3', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x5', '!', '\x1CA', '\n', '!', '\x3', '!', '\x3', '!', '\x5', 
		'!', '\x1CE', '\n', '!', '\x3', '!', '\x5', '!', '\x1D1', '\n', '!', '\x3', 
		'!', '\x5', '!', '\x1D4', '\n', '!', '\x3', '!', '\x3', '!', '\x5', '!', 
		'\x1D8', '\n', '!', '\x3', '!', '\x5', '!', '\x1DB', '\n', '!', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', 
		'\x1E2', '\n', '\"', '\x3', '#', '\x5', '#', '\x1E5', '\n', '#', '\x3', 
		'#', '\x5', '#', '\x1E8', '\n', '#', '\x3', '#', '\x3', '#', '\x3', '#', 
		'\x3', '#', '\x5', '#', '\x1EE', '\n', '#', '\x5', '#', '\x1F0', '\n', 
		'#', '\x3', '$', '\x3', '$', '\x3', '$', '\x5', '$', '\x1F5', '\n', '$', 
		'\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\x5', '%', '\x1FF', '\n', '%', '\x3', '&', '\x3', 
		'&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\a', '\'', '\x206', '\n', 
		'\'', '\f', '\'', '\xE', '\'', '\x209', '\v', '\'', '\x3', '(', '\x3', 
		'(', '\x5', '(', '\x20D', '\n', '(', '\x3', '(', '\x3', '(', '\x6', '(', 
		'\x211', '\n', '(', '\r', '(', '\xE', '(', '\x212', '\x3', '(', '\x5', 
		'(', '\x216', '\n', '(', '\x3', '(', '\x3', '(', '\x5', '(', '\x21A', 
		'\n', '(', '\x3', '(', '\x5', '(', '\x21D', '\n', '(', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x3', '*', '\a', '*', '\x224', '\n', '*', 
		'\f', '*', '\xE', '*', '\x227', '\v', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x5', '*', '\x22E', '\n', '*', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x5', '+', '\x234', '\n', '+', '\x3', 
		'+', '\x3', '+', '\x5', '+', '\x238', '\n', '+', '\x3', ',', '\x6', ',', 
		'\x23B', '\n', ',', '\r', ',', '\xE', ',', '\x23C', '\x3', '-', '\x5', 
		'-', '\x240', '\n', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\a', '-', 
		'\x245', '\n', '-', '\f', '-', '\xE', '-', '\x248', '\v', '-', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x5', '-', '\x24D', '\n', '-', '\x3', '-', 
		'\x3', '-', '\x5', '-', '\x251', '\n', '-', '\x3', '-', '\x3', '-', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x5', '.', '\x25A', 
		'\n', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x5', '.', '\x25F', '\n', 
		'.', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x5', 
		'/', '\x266', '\n', '/', '\x3', '/', '\x5', '/', '\x269', '\n', '/', '\x3', 
		'\x30', '\x5', '\x30', '\x26C', '\n', '\x30', '\x3', '\x30', '\x5', '\x30', 
		'\x26F', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x273', 
		'\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', 
		'\x278', '\n', '\x30', '\x3', '\x30', '\x5', '\x30', '\x27B', '\n', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x27F', '\n', '\x30', '\x3', 
		'\x31', '\x3', '\x31', '\x3', '\x32', '\x3', '\x32', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x289', '\n', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x28E', '\n', 
		'\x33', '\a', '\x33', '\x290', '\n', '\x33', '\f', '\x33', '\xE', '\x33', 
		'\x293', '\v', '\x33', '\x3', '\x33', '\x5', '\x33', '\x296', '\n', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x29B', '\n', 
		'\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x37', '\x3', '\x37', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x39', '\x3', '\x39', '\x3', ':', '\x3', ':', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', 
		'\x3', '=', '\x3', '=', '\x3', '>', '\x3', '>', '\x3', '>', '\x5', '>', 
		'\x2B7', '\n', '>', '\x3', '>', '\x3', '>', '\x3', '?', '\x5', '?', '\x2BC', 
		'\n', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x5', '?', '\x2C1', '\n', 
		'?', '\x3', '?', '\x3', '?', '\x3', '?', '\x5', '?', '\x2C6', '\n', '?', 
		'\x5', '?', '\x2C8', '\n', '?', '\x3', '@', '\x3', '@', '\x5', '@', '\x2CC', 
		'\n', '@', '\x3', '@', '\x3', '@', '\x5', '@', '\x2D0', '\n', '@', '\x3', 
		'\x41', '\x3', '\x41', '\x3', '\x42', '\x3', '\x42', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x3', '\x44', '\x3', '\x44', '\x3', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x2', '\x3', '\x32', '\x46', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', 
		'\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 
		'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', 
		'\x66', 'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', 
		'\x82', '\x84', '\x86', '\x88', '\x2', '\r', '\x3', '\x2', '\x15', '\x17', 
		'\x3', '\x2', '\x15', '\x16', '\x4', '\x2', '\a', '\a', ',', ',', '\x3', 
		'\x2', '\x5', '\x6', '\x3', '\x2', '/', '\x30', '\x5', '\x2', '\b', '\n', 
		',', ',', '\x31', '\x31', '\x3', '\x2', '$', '%', '\x5', '\x2', '\r', 
		'\xE', '/', '/', '\x31', '\x31', '\x4', '\x2', '\x15', '\x17', '/', '/', 
		'\x3', '\x2', '\xF', '\x11', '\x3', '\x2', '-', '.', '\x2', '\x325', '\x2', 
		'\x96', '\x3', '\x2', '\x2', '\x2', '\x4', '\x9B', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\xB1', '\x3', '\x2', '\x2', '\x2', '\b', '\xC1', '\x3', 
		'\x2', '\x2', '\x2', '\n', '\xC4', '\x3', '\x2', '\x2', '\x2', '\f', '\xD7', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\xD9', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\xE6', '\x3', '\x2', '\x2', '\x2', '\x12', '\xE8', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\xEE', '\x3', '\x2', '\x2', '\x2', '\x16', '\x100', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\x103', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x11D', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x127', '\x3', '\x2', '\x2', '\x2', ' ', '\x12C', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\x137', '\x3', '\x2', '\x2', '\x2', 
		'$', '\x139', '\x3', '\x2', '\x2', '\x2', '&', '\x13E', '\x3', '\x2', 
		'\x2', '\x2', '(', '\x143', '\x3', '\x2', '\x2', '\x2', '*', '\x14A', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x14D', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x154', '\x3', '\x2', '\x2', '\x2', '\x30', '\x161', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x166', '\x3', '\x2', '\x2', '\x2', '\x34', '\x172', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x174', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x17B', '\x3', '\x2', '\x2', '\x2', ':', '\x18A', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x1A9', '\x3', '\x2', '\x2', '\x2', '>', '\x1B5', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x1B8', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\x44', '\x1E4', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x1F1', '\x3', '\x2', '\x2', '\x2', 'H', '\x1F8', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x200', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x202', '\x3', '\x2', '\x2', '\x2', 'N', '\x20C', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\x21E', '\x3', '\x2', '\x2', '\x2', 'R', '\x225', 
		'\x3', '\x2', '\x2', '\x2', 'T', '\x237', '\x3', '\x2', '\x2', '\x2', 
		'V', '\x23A', '\x3', '\x2', '\x2', '\x2', 'X', '\x23F', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\x254', '\x3', '\x2', '\x2', '\x2', '\\', '\x268', 
		'\x3', '\x2', '\x2', '\x2', '^', '\x26B', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x280', '\x3', '\x2', '\x2', '\x2', '\x62', '\x282', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x284', '\x3', '\x2', '\x2', '\x2', '\x66', '\x29C', 
		'\x3', '\x2', '\x2', '\x2', 'h', '\x29E', '\x3', '\x2', '\x2', '\x2', 
		'j', '\x2A0', '\x3', '\x2', '\x2', '\x2', 'l', '\x2A2', '\x3', '\x2', 
		'\x2', '\x2', 'n', '\x2A4', '\x3', '\x2', '\x2', '\x2', 'p', '\x2A6', 
		'\x3', '\x2', '\x2', '\x2', 'r', '\x2A8', '\x3', '\x2', '\x2', '\x2', 
		't', '\x2AA', '\x3', '\x2', '\x2', '\x2', 'v', '\x2AD', '\x3', '\x2', 
		'\x2', '\x2', 'x', '\x2B1', '\x3', '\x2', '\x2', '\x2', 'z', '\x2B3', 
		'\x3', '\x2', '\x2', '\x2', '|', '\x2C7', '\x3', '\x2', '\x2', '\x2', 
		'~', '\x2C9', '\x3', '\x2', '\x2', '\x2', '\x80', '\x2D1', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x2D3', '\x3', '\x2', '\x2', '\x2', '\x84', '\x2D5', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x2D8', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x2DA', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x95', '\x5', '\b', 
		'\x5', '\x2', '\x8B', '\x95', '\x5', '@', '!', '\x2', '\x8C', '\x95', 
		'\x5', '\n', '\x6', '\x2', '\x8D', '\x95', '\x5', '\x1A', '\xE', '\x2', 
		'\x8E', '\x95', '\x5', 'X', '-', '\x2', '\x8F', '\x95', '\x5', '&', '\x14', 
		'\x2', '\x90', '\x95', '\x5', '(', '\x15', '\x2', '\x91', '\x95', '\x5', 
		'\x4', '\x3', '\x2', '\x92', '\x95', '\x5', '\x18', '\r', '\x2', '\x93', 
		'\x95', '\x5', '\x88', '\x45', '\x2', '\x94', '\x8A', '\x3', '\x2', '\x2', 
		'\x2', '\x94', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x94', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x94', 
		'\x8E', '\x3', '\x2', '\x2', '\x2', '\x94', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x94', '\x90', '\x3', '\x2', '\x2', '\x2', '\x94', '\x91', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '\x92', '\x3', '\x2', '\x2', '\x2', '\x94', 
		'\x93', '\x3', '\x2', '\x2', '\x2', '\x95', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\x96', '\x94', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\x3', 
		'\x2', '\x2', '\x2', '\x97', '\x99', '\x3', '\x2', '\x2', '\x2', '\x98', 
		'\x96', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\a', '\x2', '\x2', 
		'\x3', '\x9A', '\x3', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\a', 
		'*', '\x2', '\x2', '\x9C', '\x9D', '\x5', '\x6', '\x4', '\x2', '\x9D', 
		'\xAA', '\a', '$', '\x2', '\x2', '\x9E', '\xA9', '\x5', '\b', '\x5', '\x2', 
		'\x9F', '\xA9', '\x5', '@', '!', '\x2', '\xA0', '\xA9', '\x5', '\n', '\x6', 
		'\x2', '\xA1', '\xA9', '\x5', '\x1A', '\xE', '\x2', '\xA2', '\xA9', '\x5', 
		'X', '-', '\x2', '\xA3', '\xA9', '\x5', '&', '\x14', '\x2', '\xA4', '\xA9', 
		'\x5', '(', '\x15', '\x2', '\xA5', '\xA9', '\x5', '\x4', '\x3', '\x2', 
		'\xA6', '\xA9', '\x5', '\x18', '\r', '\x2', '\xA7', '\xA9', '\x5', '\x88', 
		'\x45', '\x2', '\xA8', '\x9E', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x9F', 
		'\x3', '\x2', '\x2', '\x2', '\xA8', '\xA0', '\x3', '\x2', '\x2', '\x2', 
		'\xA8', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA2', '\x3', '\x2', 
		'\x2', '\x2', '\xA8', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA4', 
		'\x3', '\x2', '\x2', '\x2', '\xA8', '\xA5', '\x3', '\x2', '\x2', '\x2', 
		'\xA8', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA7', '\x3', '\x2', 
		'\x2', '\x2', '\xA9', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xA8', 
		'\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\x3', '\x2', '\x2', '\x2', 
		'\xAB', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAA', '\x3', '\x2', 
		'\x2', '\x2', '\xAD', '\xAF', '\a', '%', '\x2', '\x2', '\xAE', '\xB0', 
		'\a', '\x3', '\x2', '\x2', '\xAF', '\xAE', '\x3', '\x2', '\x2', '\x2', 
		'\xAF', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB0', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\xB1', '\xB2', '\a', '/', '\x2', '\x2', '\xB2', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\xB5', '\x5', 'z', '>', '\x2', '\xB4', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', '\x3', '\x2', '\x2', '\x2', 
		'\xB5', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\x5', '\f', 
		'\a', '\x2', '\xB7', '\xB8', '\x5', '^', '\x30', '\x2', '\xB8', '\xB9', 
		'\a', '\x3', '\x2', '\x2', '\xB9', '\xC2', '\x3', '\x2', '\x2', '\x2', 
		'\xBA', '\xBC', '\x5', 'n', '\x38', '\x2', '\xBB', '\xBD', '\x5', '\f', 
		'\a', '\x2', '\xBC', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', 
		'\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\x3', '\x2', '\x2', '\x2', 
		'\xBE', '\xBF', '\x5', '^', '\x30', '\x2', '\xBF', '\xC0', '\a', '\x3', 
		'\x2', '\x2', '\xC0', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xB4', 
		'\x3', '\x2', '\x2', '\x2', '\xC1', '\xBA', '\x3', '\x2', '\x2', '\x2', 
		'\xC2', '\t', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC5', '\x5', 'z', 
		'>', '\x2', '\xC4', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', 
		'\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\x3', '\x2', '\x2', '\x2', 
		'\xC6', '\xC7', '\x5', '\xE', '\b', '\x2', '\xC7', '\xC9', '\x5', '^', 
		'\x30', '\x2', '\xC8', '\xCA', '\x5', 'p', '\x39', '\x2', '\xC9', '\xC8', 
		'\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\x3', '\x2', '\x2', '\x2', 
		'\xCA', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\a', ',', 
		'\x2', '\x2', '\xCC', '\xCE', '\x5', '\x10', '\t', '\x2', '\xCD', '\xCB', 
		'\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', '\x3', '\x2', '\x2', '\x2', 
		'\xCE', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD0', '\a', '$', 
		'\x2', '\x2', '\xD0', '\xD1', '\x5', '\x16', '\f', '\x2', '\xD1', '\xD3', 
		'\a', '%', '\x2', '\x2', '\xD2', '\xD4', '\x5', '\x12', '\n', '\x2', '\xD3', 
		'\xD2', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', '\x3', '\x2', '\x2', 
		'\x2', '\xD4', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\a', 
		'\x3', '\x2', '\x2', '\xD6', '\v', '\x3', '\x2', '\x2', '\x2', '\xD7', 
		'\xD8', '\t', '\x2', '\x2', '\x2', '\xD8', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\xD9', '\xDA', '\t', '\x3', '\x2', '\x2', '\xDA', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\xDB', '\xDD', '\x5', '\x86', '\x44', '\x2', '\xDC', 
		'\xDB', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', '\x3', '\x2', '\x2', 
		'\x2', '\xDD', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xE7', '\x5', 
		'^', '\x30', '\x2', '\xDF', '\xE1', '\x5', '\x86', '\x44', '\x2', '\xE0', 
		'\xDF', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', '\x3', '\x2', '\x2', 
		'\x2', '\xE1', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', '\x5', 
		'^', '\x30', '\x2', '\xE3', '\xE4', '\a', '\x4', '\x2', '\x2', '\xE4', 
		'\xE5', '\x5', '\x10', '\t', '\x2', '\xE5', '\xE7', '\x3', '\x2', '\x2', 
		'\x2', '\xE6', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE0', '\x3', 
		'\x2', '\x2', '\x2', '\xE7', '\x11', '\x3', '\x2', '\x2', '\x2', '\xE8', 
		'\xE9', '\a', '(', '\x2', '\x2', '\xE9', '\xEA', '\a', '\x5', '\x2', '\x2', 
		'\xEA', '\xEB', '\x5', '\x14', '\v', '\x2', '\xEB', '\xEC', '\a', '\x6', 
		'\x2', '\x2', '\xEC', '\x13', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEF', 
		'\a', '\x30', '\x2', '\x2', '\xEE', '\xED', '\x3', '\x2', '\x2', '\x2', 
		'\xEF', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xEE', '\x3', '\x2', 
		'\x2', '\x2', '\xF0', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF1', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\xF2', '\xFF', '\x5', '\x84', '\x43', '\x2', 
		'\xF3', '\xFF', '\x5', '@', '!', '\x2', '\xF4', '\xFF', '\x5', ':', '\x1E', 
		'\x2', '\xF5', '\xFF', '\x5', 'X', '-', '\x2', '\xF6', '\xFF', '\x5', 
		'(', '\x15', '\x2', '\xF7', '\xFF', '\x5', '&', '\x14', '\x2', '\xF8', 
		'\xFF', '\x5', '\n', '\x6', '\x2', '\xF9', '\xFF', '\x5', '\x1A', '\xE', 
		'\x2', '\xFA', '\xFF', '\x5', '\b', '\x5', '\x2', '\xFB', '\xFF', '\x5', 
		'$', '\x13', '\x2', '\xFC', '\xFF', '\x5', '\x18', '\r', '\x2', '\xFD', 
		'\xFF', '\x5', '\x88', '\x45', '\x2', '\xFE', '\xF2', '\x3', '\x2', '\x2', 
		'\x2', '\xFE', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xF4', '\x3', 
		'\x2', '\x2', '\x2', '\xFE', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xFE', 
		'\xF6', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xF7', '\x3', '\x2', '\x2', 
		'\x2', '\xFE', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xF9', '\x3', 
		'\x2', '\x2', '\x2', '\xFE', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFE', 
		'\xFB', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFC', '\x3', '\x2', '\x2', 
		'\x2', '\xFE', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x102', '\x3', 
		'\x2', '\x2', '\x2', '\x100', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x100', 
		'\x101', '\x3', '\x2', '\x2', '\x2', '\x101', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x102', '\x100', '\x3', '\x2', '\x2', '\x2', '\x103', '\x104', 
		'\a', '\x34', '\x2', '\x2', '\x104', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x105', '\x107', '\a', '\x17', '\x2', '\x2', '\x106', '\x108', '\a', 
		'\x15', '\x2', '\x2', '\x107', '\x106', '\x3', '\x2', '\x2', '\x2', '\x107', 
		'\x108', '\x3', '\x2', '\x2', '\x2', '\x108', '\x109', '\x3', '\x2', '\x2', 
		'\x2', '\x109', '\x10B', '\x5', '^', '\x30', '\x2', '\x10A', '\x10C', 
		'\x5', '\x1C', '\xF', '\x2', '\x10B', '\x10A', '\x3', '\x2', '\x2', '\x2', 
		'\x10B', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x111', '\x3', 
		'\x2', '\x2', '\x2', '\x10D', '\x10E', '\a', '$', '\x2', '\x2', '\x10E', 
		'\x10F', '\x5', '\x1E', '\x10', '\x2', '\x10F', '\x110', '\a', '%', '\x2', 
		'\x2', '\x110', '\x112', '\x3', '\x2', '\x2', '\x2', '\x111', '\x10D', 
		'\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\x3', '\x2', '\x2', '\x2', 
		'\x112', '\x113', '\x3', '\x2', '\x2', '\x2', '\x113', '\x114', '\a', 
		'\x3', '\x2', '\x2', '\x114', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x115', 
		'\x116', '\a', '\x17', '\x2', '\x2', '\x116', '\x117', '\a', '$', '\x2', 
		'\x2', '\x117', '\x118', '\x5', '\x1E', '\x10', '\x2', '\x118', '\x119', 
		'\a', '%', '\x2', '\x2', '\x119', '\x11A', '\a', '\x3', '\x2', '\x2', 
		'\x11A', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x105', '\x3', 
		'\x2', '\x2', '\x2', '\x11B', '\x115', '\x3', '\x2', '\x2', '\x2', '\x11C', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11E', '\a', ',', '\x2', 
		'\x2', '\x11E', '\x11F', '\x5', '^', '\x30', '\x2', '\x11F', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x120', '\x128', '\x5', ' ', '\x11', '\x2', '\x121', 
		'\x122', '\x5', ' ', '\x11', '\x2', '\x122', '\x123', '\a', '\x4', '\x2', 
		'\x2', '\x123', '\x125', '\x5', '\x1E', '\x10', '\x2', '\x124', '\x126', 
		'\a', '\x4', '\x2', '\x2', '\x125', '\x124', '\x3', '\x2', '\x2', '\x2', 
		'\x125', '\x126', '\x3', '\x2', '\x2', '\x2', '\x126', '\x128', '\x3', 
		'\x2', '\x2', '\x2', '\x127', '\x120', '\x3', '\x2', '\x2', '\x2', '\x127', 
		'\x121', '\x3', '\x2', '\x2', '\x2', '\x128', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\x129', '\x12B', '\x5', '\x18', '\r', '\x2', '\x12A', '\x129', 
		'\x3', '\x2', '\x2', '\x2', '\x12B', '\x12E', '\x3', '\x2', '\x2', '\x2', 
		'\x12C', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12D', '\x3', 
		'\x2', '\x2', '\x2', '\x12D', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x12E', 
		'\x12C', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x132', '\x5', '\"', '\x12', 
		'\x2', '\x130', '\x131', '\t', '\x4', '\x2', '\x2', '\x131', '\x133', 
		'\x5', '\\', '/', '\x2', '\x132', '\x130', '\x3', '\x2', '\x2', '\x2', 
		'\x132', '\x133', '\x3', '\x2', '\x2', '\x2', '\x133', '\x135', '\x3', 
		'\x2', '\x2', '\x2', '\x134', '\x136', '\x5', '(', '\x15', '\x2', '\x135', 
		'\x134', '\x3', '\x2', '\x2', '\x2', '\x135', '\x136', '\x3', '\x2', '\x2', 
		'\x2', '\x136', '!', '\x3', '\x2', '\x2', '\x2', '\x137', '\x138', '\a', 
		'/', '\x2', '\x2', '\x138', '#', '\x3', '\x2', '\x2', '\x2', '\x139', 
		'\x13A', '\a', '\x18', '\x2', '\x2', '\x13A', '\x13C', '\x5', 'P', ')', 
		'\x2', '\x13B', '\x13D', '\a', '\x3', '\x2', '\x2', '\x13C', '\x13B', 
		'\x3', '\x2', '\x2', '\x2', '\x13C', '\x13D', '\x3', '\x2', '\x2', '\x2', 
		'\x13D', '%', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x13F', '\a', '\"', 
		'\x2', '\x2', '\x13F', '\x140', '\x5', '^', '\x30', '\x2', '\x140', '\x141', 
		'\x5', '\x64', '\x33', '\x2', '\x141', '\x142', '\a', '\x3', '\x2', '\x2', 
		'\x142', '\'', '\x3', '\x2', '\x2', '\x2', '\x143', '\x144', '\x5', '*', 
		'\x16', '\x2', '\x144', '\x145', '\a', '\x5', '\x2', '\x2', '\x145', '\x146', 
		'\x5', ',', '\x17', '\x2', '\x146', '\x148', '\a', '\x6', '\x2', '\x2', 
		'\x147', '\x149', '\a', '\x3', '\x2', '\x2', '\x148', '\x147', '\x3', 
		'\x2', '\x2', '\x2', '\x148', '\x149', '\x3', '\x2', '\x2', '\x2', '\x149', 
		')', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x14B', '\a', '/', '\x2', '\x2', 
		'\x14B', '+', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14E', '\x5', '.', 
		'\x18', '\x2', '\x14D', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14D', 
		'\x14E', '\x3', '\x2', '\x2', '\x2', '\x14E', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x14F', '\x155', '\x5', '\x30', '\x19', '\x2', '\x150', '\x151', 
		'\x5', '\x30', '\x19', '\x2', '\x151', '\x152', '\a', '\x4', '\x2', '\x2', 
		'\x152', '\x153', '\x5', '.', '\x18', '\x2', '\x153', '\x155', '\x3', 
		'\x2', '\x2', '\x2', '\x154', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x154', 
		'\x150', '\x3', '\x2', '\x2', '\x2', '\x155', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x156', '\x162', '\x5', '\x32', '\x1A', '\x2', '\x157', '\x158', 
		'\x5', '\x32', '\x1A', '\x2', '\x158', '\x159', '\a', '\a', '\x2', '\x2', 
		'\x159', '\x15A', '\x5', '\x34', '\x1B', '\x2', '\x15A', '\x162', '\x3', 
		'\x2', '\x2', '\x2', '\x15B', '\x15C', '\x5', '\x32', '\x1A', '\x2', '\x15C', 
		'\x15D', '\a', '\a', '\x2', '\x2', '\x15D', '\x15E', '\a', '\x5', '\x2', 
		'\x2', '\x15E', '\x15F', '\x5', '.', '\x18', '\x2', '\x15F', '\x160', 
		'\a', '\x6', '\x2', '\x2', '\x160', '\x162', '\x3', '\x2', '\x2', '\x2', 
		'\x161', '\x156', '\x3', '\x2', '\x2', '\x2', '\x161', '\x157', '\x3', 
		'\x2', '\x2', '\x2', '\x161', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x162', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x163', '\x164', '\b', '\x1A', '\x1', 
		'\x2', '\x164', '\x167', '\x5', '^', '\x30', '\x2', '\x165', '\x167', 
		'\x5', 'N', '(', '\x2', '\x166', '\x163', '\x3', '\x2', '\x2', '\x2', 
		'\x166', '\x165', '\x3', '\x2', '\x2', '\x2', '\x167', '\x16D', '\x3', 
		'\x2', '\x2', '\x2', '\x168', '\x169', '\f', '\x3', '\x2', '\x2', '\x169', 
		'\x16A', '\a', '\b', '\x2', '\x2', '\x16A', '\x16C', '\x5', '\x32', '\x1A', 
		'\x4', '\x16B', '\x168', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x16F', 
		'\x3', '\x2', '\x2', '\x2', '\x16D', '\x16B', '\x3', '\x2', '\x2', '\x2', 
		'\x16D', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x16F', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x170', 
		'\x173', '\x5', '^', '\x30', '\x2', '\x171', '\x173', '\x5', 'N', '(', 
		'\x2', '\x172', '\x170', '\x3', '\x2', '\x2', '\x2', '\x172', '\x171', 
		'\x3', '\x2', '\x2', '\x2', '\x173', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x174', '\x175', '\a', '\x5', '\x2', '\x2', '\x175', '\x176', '\x5', 
		'\x38', '\x1D', '\x2', '\x176', '\x177', '\a', '\x6', '\x2', '\x2', '\x177', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x178', '\x17A', '\n', '\x5', '\x2', 
		'\x2', '\x179', '\x178', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x17D', 
		'\x3', '\x2', '\x2', '\x2', '\x17B', '\x179', '\x3', '\x2', '\x2', '\x2', 
		'\x17B', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x183', '\x3', 
		'\x2', '\x2', '\x2', '\x17D', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x17E', 
		'\x17F', '\a', '\x5', '\x2', '\x2', '\x17F', '\x180', '\x5', '\x38', '\x1D', 
		'\x2', '\x180', '\x181', '\a', '\x6', '\x2', '\x2', '\x181', '\x182', 
		'\x5', '\x38', '\x1D', '\x2', '\x182', '\x184', '\x3', '\x2', '\x2', '\x2', 
		'\x183', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x183', '\x184', '\x3', 
		'\x2', '\x2', '\x2', '\x184', '\x39', '\x3', '\x2', '\x2', '\x2', '\x185', 
		'\x189', '\a', '\x13', '\x2', '\x2', '\x186', '\x189', '\a', '\x12', '\x2', 
		'\x2', '\x187', '\x189', '\x5', '\x66', '\x34', '\x2', '\x188', '\x185', 
		'\x3', '\x2', '\x2', '\x2', '\x188', '\x186', '\x3', '\x2', '\x2', '\x2', 
		'\x188', '\x187', '\x3', '\x2', '\x2', '\x2', '\x189', '\x18C', '\x3', 
		'\x2', '\x2', '\x2', '\x18A', '\x188', '\x3', '\x2', '\x2', '\x2', '\x18A', 
		'\x18B', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x18E', '\x3', '\x2', '\x2', 
		'\x2', '\x18C', '\x18A', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x18F', 
		'\x5', 'r', ':', '\x2', '\x18E', '\x18D', '\x3', '\x2', '\x2', '\x2', 
		'\x18E', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x18F', '\x190', '\x3', 
		'\x2', '\x2', '\x2', '\x190', '\x191', '\x5', 'T', '+', '\x2', '\x191', 
		'\x193', '\a', '\x5', '\x2', '\x2', '\x192', '\x194', '\x5', '\x42', '\"', 
		'\x2', '\x193', '\x192', '\x3', '\x2', '\x2', '\x2', '\x193', '\x194', 
		'\x3', '\x2', '\x2', '\x2', '\x194', '\x195', '\x3', '\x2', '\x2', '\x2', 
		'\x195', '\x197', '\a', '\x6', '\x2', '\x2', '\x196', '\x198', '\x5', 
		'j', '\x36', '\x2', '\x197', '\x196', '\x3', '\x2', '\x2', '\x2', '\x197', 
		'\x198', '\x3', '\x2', '\x2', '\x2', '\x198', '\x19B', '\x3', '\x2', '\x2', 
		'\x2', '\x199', '\x19A', '\a', ',', '\x2', '\x2', '\x19A', '\x19C', '\x5', 
		'<', '\x1F', '\x2', '\x19B', '\x199', '\x3', '\x2', '\x2', '\x2', '\x19B', 
		'\x19C', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x19F', '\x3', '\x2', '\x2', 
		'\x2', '\x19D', '\x1A0', '\x5', 'P', ')', '\x2', '\x19E', '\x1A0', '\x5', 
		't', ';', '\x2', '\x19F', '\x19D', '\x3', '\x2', '\x2', '\x2', '\x19F', 
		'\x19E', '\x3', '\x2', '\x2', '\x2', '\x19F', '\x1A0', '\x3', '\x2', '\x2', 
		'\x2', '\x1A0', '\x1A2', '\x3', '\x2', '\x2', '\x2', '\x1A1', '\x1A3', 
		'\a', '\x3', '\x2', '\x2', '\x1A2', '\x1A1', '\x3', '\x2', '\x2', '\x2', 
		'\x1A2', '\x1A3', '\x3', '\x2', '\x2', '\x2', '\x1A3', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x1A4', '\x1AA', '\x5', '>', ' ', '\x2', '\x1A5', '\x1A6', 
		'\x5', '>', ' ', '\x2', '\x1A6', '\x1A7', '\a', '\x4', '\x2', '\x2', '\x1A7', 
		'\x1A8', '\x5', '<', '\x1F', '\x2', '\x1A8', '\x1AA', '\x3', '\x2', '\x2', 
		'\x2', '\x1A9', '\x1A4', '\x3', '\x2', '\x2', '\x2', '\x1A9', '\x1A5', 
		'\x3', '\x2', '\x2', '\x2', '\x1AA', '=', '\x3', '\x2', '\x2', '\x2', 
		'\x1AB', '\x1AC', '\x5', 'J', '&', '\x2', '\x1AC', '\x1AE', '\a', '\x5', 
		'\x2', '\x2', '\x1AD', '\x1AF', '\x5', 'L', '\'', '\x2', '\x1AE', '\x1AD', 
		'\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1AF', '\x3', '\x2', '\x2', '\x2', 
		'\x1AF', '\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1B1', '\a', 
		'\x6', '\x2', '\x2', '\x1B1', '\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1B2', 
		'\x1B3', '\x5', 'J', '&', '\x2', '\x1B3', '\x1B4', '\x5', '\x36', '\x1C', 
		'\x2', '\x1B4', '\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1AB', 
		'\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1B2', '\x3', '\x2', '\x2', '\x2', 
		'\x1B6', '?', '\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1B9', '\x5', 'z', 
		'>', '\x2', '\x1B8', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1B9', 
		'\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1C2', '\x3', '\x2', '\x2', '\x2', 
		'\x1BA', '\x1C1', '\a', '#', '\x2', '\x2', '\x1BB', '\x1C1', '\x5', 'n', 
		'\x38', '\x2', '\x1BC', '\x1C1', '\a', '\x12', '\x2', '\x2', '\x1BD', 
		'\x1C1', '\a', '\x1C', '\x2', '\x2', '\x1BE', '\x1C1', '\x5', 'l', '\x37', 
		'\x2', '\x1BF', '\x1C1', '\x5', '\x66', '\x34', '\x2', '\x1C0', '\x1BA', 
		'\x3', '\x2', '\x2', '\x2', '\x1C0', '\x1BB', '\x3', '\x2', '\x2', '\x2', 
		'\x1C0', '\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x1BD', '\x3', 
		'\x2', '\x2', '\x2', '\x1C0', '\x1BE', '\x3', '\x2', '\x2', '\x2', '\x1C0', 
		'\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1C4', '\x3', '\x2', '\x2', 
		'\x2', '\x1C2', '\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C3', 
		'\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1C5', '\x3', '\x2', '\x2', '\x2', 
		'\x1C4', '\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1C6', '\x5', 
		'^', '\x30', '\x2', '\x1C6', '\x1C7', '\x5', 'T', '+', '\x2', '\x1C7', 
		'\x1C9', '\a', '\x5', '\x2', '\x2', '\x1C8', '\x1CA', '\x5', '\x42', '\"', 
		'\x2', '\x1C9', '\x1C8', '\x3', '\x2', '\x2', '\x2', '\x1C9', '\x1CA', 
		'\x3', '\x2', '\x2', '\x2', '\x1CA', '\x1CB', '\x3', '\x2', '\x2', '\x2', 
		'\x1CB', '\x1CD', '\a', '\x6', '\x2', '\x2', '\x1CC', '\x1CE', '\x5', 
		'j', '\x36', '\x2', '\x1CD', '\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1CD', 
		'\x1CE', '\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1D0', '\x3', '\x2', '\x2', 
		'\x2', '\x1CF', '\x1D1', '\x5', 'h', '\x35', '\x2', '\x1D0', '\x1CF', 
		'\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1D1', '\x3', '\x2', '\x2', '\x2', 
		'\x1D1', '\x1D3', '\x3', '\x2', '\x2', '\x2', '\x1D2', '\x1D4', '\x5', 
		'p', '\x39', '\x2', '\x1D3', '\x1D2', '\x3', '\x2', '\x2', '\x2', '\x1D3', 
		'\x1D4', '\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1D7', '\x3', '\x2', '\x2', 
		'\x2', '\x1D5', '\x1D8', '\x5', 'P', ')', '\x2', '\x1D6', '\x1D8', '\x5', 
		't', ';', '\x2', '\x1D7', '\x1D5', '\x3', '\x2', '\x2', '\x2', '\x1D7', 
		'\x1D6', '\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1D8', '\x3', '\x2', '\x2', 
		'\x2', '\x1D8', '\x1DA', '\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1DB', 
		'\a', '\x3', '\x2', '\x2', '\x1DA', '\x1D9', '\x3', '\x2', '\x2', '\x2', 
		'\x1DA', '\x1DB', '\x3', '\x2', '\x2', '\x2', '\x1DB', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x1DC', '\x1E2', '\x5', '\x44', '#', '\x2', '\x1DD', 
		'\x1DE', '\x5', '\x44', '#', '\x2', '\x1DE', '\x1DF', '\a', '\x4', '\x2', 
		'\x2', '\x1DF', '\x1E0', '\x5', '\x42', '\"', '\x2', '\x1E0', '\x1E2', 
		'\x3', '\x2', '\x2', '\x2', '\x1E1', '\x1DC', '\x3', '\x2', '\x2', '\x2', 
		'\x1E1', '\x1DD', '\x3', '\x2', '\x2', '\x2', '\x1E2', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x1E3', '\x1E5', '\x5', '\x46', '$', '\x2', '\x1E4', 
		'\x1E3', '\x3', '\x2', '\x2', '\x2', '\x1E4', '\x1E5', '\x3', '\x2', '\x2', 
		'\x2', '\x1E5', '\x1E7', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E8', 
		'\x5', 'H', '%', '\x2', '\x1E7', '\x1E6', '\x3', '\x2', '\x2', '\x2', 
		'\x1E7', '\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1E9', '\x3', 
		'\x2', '\x2', '\x2', '\x1E9', '\x1EF', '\x5', '^', '\x30', '\x2', '\x1EA', 
		'\x1ED', '\x5', 'J', '&', '\x2', '\x1EB', '\x1EC', '\a', '\a', '\x2', 
		'\x2', '\x1EC', '\x1EE', '\x5', 'L', '\'', '\x2', '\x1ED', '\x1EB', '\x3', 
		'\x2', '\x2', '\x2', '\x1ED', '\x1EE', '\x3', '\x2', '\x2', '\x2', '\x1EE', 
		'\x1F0', '\x3', '\x2', '\x2', '\x2', '\x1EF', '\x1EA', '\x3', '\x2', '\x2', 
		'\x2', '\x1EF', '\x1F0', '\x3', '\x2', '\x2', '\x2', '\x1F0', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\x1F1', '\x1F2', '\a', ')', '\x2', '\x2', 
		'\x1F2', '\x1F4', '\a', '\x5', '\x2', '\x2', '\x1F3', '\x1F5', '\x5', 
		'.', '\x18', '\x2', '\x1F4', '\x1F3', '\x3', '\x2', '\x2', '\x2', '\x1F4', 
		'\x1F5', '\x3', '\x2', '\x2', '\x2', '\x1F5', '\x1F6', '\x3', '\x2', '\x2', 
		'\x2', '\x1F6', '\x1F7', '\a', '\x6', '\x2', '\x2', '\x1F7', 'G', '\x3', 
		'\x2', '\x2', '\x2', '\x1F8', '\x1FE', '\a', '+', '\x2', '\x2', '\x1F9', 
		'\x1FA', '\x5', '^', '\x30', '\x2', '\x1FA', '\x1FB', '\a', ',', '\x2', 
		'\x2', '\x1FB', '\x1FC', '\a', ',', '\x2', '\x2', '\x1FC', '\x1FD', '\a', 
		'\x1F', '\x2', '\x2', '\x1FD', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x1FE', 
		'\x1F9', '\x3', '\x2', '\x2', '\x2', '\x1FE', '\x1FF', '\x3', '\x2', '\x2', 
		'\x2', '\x1FF', 'I', '\x3', '\x2', '\x2', '\x2', '\x200', '\x201', '\a', 
		'/', '\x2', '\x2', '\x201', 'K', '\x3', '\x2', '\x2', '\x2', '\x202', 
		'\x207', '\x5', 'N', '(', '\x2', '\x203', '\x204', '\a', '\x4', '\x2', 
		'\x2', '\x204', '\x206', '\x5', 'N', '(', '\x2', '\x205', '\x203', '\x3', 
		'\x2', '\x2', '\x2', '\x206', '\x209', '\x3', '\x2', '\x2', '\x2', '\x207', 
		'\x205', '\x3', '\x2', '\x2', '\x2', '\x207', '\x208', '\x3', '\x2', '\x2', 
		'\x2', '\x208', 'M', '\x3', '\x2', '\x2', '\x2', '\x209', '\x207', '\x3', 
		'\x2', '\x2', '\x2', '\x20A', '\x20D', '\x5', '`', '\x31', '\x2', '\x20B', 
		'\x20D', '\x5', '\x62', '\x32', '\x2', '\x20C', '\x20A', '\x3', '\x2', 
		'\x2', '\x2', '\x20C', '\x20B', '\x3', '\x2', '\x2', '\x2', '\x20C', '\x20D', 
		'\x3', '\x2', '\x2', '\x2', '\x20D', '\x20E', '\x3', '\x2', '\x2', '\x2', 
		'\x20E', '\x215', '\t', '\x6', '\x2', '\x2', '\x20F', '\x211', '\t', '\a', 
		'\x2', '\x2', '\x210', '\x20F', '\x3', '\x2', '\x2', '\x2', '\x211', '\x212', 
		'\x3', '\x2', '\x2', '\x2', '\x212', '\x210', '\x3', '\x2', '\x2', '\x2', 
		'\x212', '\x213', '\x3', '\x2', '\x2', '\x2', '\x213', '\x214', '\x3', 
		'\x2', '\x2', '\x2', '\x214', '\x216', '\t', '\x6', '\x2', '\x2', '\x215', 
		'\x210', '\x3', '\x2', '\x2', '\x2', '\x215', '\x216', '\x3', '\x2', '\x2', 
		'\x2', '\x216', '\x21C', '\x3', '\x2', '\x2', '\x2', '\x217', '\x219', 
		'\a', '\x5', '\x2', '\x2', '\x218', '\x21A', '\x5', 'L', '\'', '\x2', 
		'\x219', '\x218', '\x3', '\x2', '\x2', '\x2', '\x219', '\x21A', '\x3', 
		'\x2', '\x2', '\x2', '\x21A', '\x21B', '\x3', '\x2', '\x2', '\x2', '\x21B', 
		'\x21D', '\a', '\x6', '\x2', '\x2', '\x21C', '\x217', '\x3', '\x2', '\x2', 
		'\x2', '\x21C', '\x21D', '\x3', '\x2', '\x2', '\x2', '\x21D', 'O', '\x3', 
		'\x2', '\x2', '\x2', '\x21E', '\x21F', '\a', '$', '\x2', '\x2', '\x21F', 
		'\x220', '\x5', 'R', '*', '\x2', '\x220', '\x221', '\a', '%', '\x2', '\x2', 
		'\x221', 'Q', '\x3', '\x2', '\x2', '\x2', '\x222', '\x224', '\n', '\b', 
		'\x2', '\x2', '\x223', '\x222', '\x3', '\x2', '\x2', '\x2', '\x224', '\x227', 
		'\x3', '\x2', '\x2', '\x2', '\x225', '\x223', '\x3', '\x2', '\x2', '\x2', 
		'\x225', '\x226', '\x3', '\x2', '\x2', '\x2', '\x226', '\x22D', '\x3', 
		'\x2', '\x2', '\x2', '\x227', '\x225', '\x3', '\x2', '\x2', '\x2', '\x228', 
		'\x229', '\a', '$', '\x2', '\x2', '\x229', '\x22A', '\x5', 'R', '*', '\x2', 
		'\x22A', '\x22B', '\a', '%', '\x2', '\x2', '\x22B', '\x22C', '\x5', 'R', 
		'*', '\x2', '\x22C', '\x22E', '\x3', '\x2', '\x2', '\x2', '\x22D', '\x228', 
		'\x3', '\x2', '\x2', '\x2', '\x22D', '\x22E', '\x3', '\x2', '\x2', '\x2', 
		'\x22E', 'S', '\x3', '\x2', '\x2', '\x2', '\x22F', '\x233', '\a', '/', 
		'\x2', '\x2', '\x230', '\x231', '\a', ',', '\x2', '\x2', '\x231', '\x232', 
		'\a', ',', '\x2', '\x2', '\x232', '\x234', '\x5', 'T', '+', '\x2', '\x233', 
		'\x230', '\x3', '\x2', '\x2', '\x2', '\x233', '\x234', '\x3', '\x2', '\x2', 
		'\x2', '\x234', '\x238', '\x3', '\x2', '\x2', '\x2', '\x235', '\x236', 
		'\a', '!', '\x2', '\x2', '\x236', '\x238', '\x5', 'V', ',', '\x2', '\x237', 
		'\x22F', '\x3', '\x2', '\x2', '\x2', '\x237', '\x235', '\x3', '\x2', '\x2', 
		'\x2', '\x238', 'U', '\x3', '\x2', '\x2', '\x2', '\x239', '\x23B', '\t', 
		'\t', '\x2', '\x2', '\x23A', '\x239', '\x3', '\x2', '\x2', '\x2', '\x23B', 
		'\x23C', '\x3', '\x2', '\x2', '\x2', '\x23C', '\x23A', '\x3', '\x2', '\x2', 
		'\x2', '\x23C', '\x23D', '\x3', '\x2', '\x2', '\x2', '\x23D', 'W', '\x3', 
		'\x2', '\x2', '\x2', '\x23E', '\x240', '\x5', 'z', '>', '\x2', '\x23F', 
		'\x23E', '\x3', '\x2', '\x2', '\x2', '\x23F', '\x240', '\x3', '\x2', '\x2', 
		'\x2', '\x240', '\x246', '\x3', '\x2', '\x2', '\x2', '\x241', '\x245', 
		'\a', '\x1D', '\x2', '\x2', '\x242', '\x245', '\a', '\x1C', '\x2', '\x2', 
		'\x243', '\x245', '\x5', 'l', '\x37', '\x2', '\x244', '\x241', '\x3', 
		'\x2', '\x2', '\x2', '\x244', '\x242', '\x3', '\x2', '\x2', '\x2', '\x244', 
		'\x243', '\x3', '\x2', '\x2', '\x2', '\x245', '\x248', '\x3', '\x2', '\x2', 
		'\x2', '\x246', '\x244', '\x3', '\x2', '\x2', '\x2', '\x246', '\x247', 
		'\x3', '\x2', '\x2', '\x2', '\x247', '\x249', '\x3', '\x2', '\x2', '\x2', 
		'\x248', '\x246', '\x3', '\x2', '\x2', '\x2', '\x249', '\x24A', '\x5', 
		'^', '\x30', '\x2', '\x24A', '\x24C', '\x5', 'Z', '.', '\x2', '\x24B', 
		'\x24D', '\x5', 'v', '<', '\x2', '\x24C', '\x24B', '\x3', '\x2', '\x2', 
		'\x2', '\x24C', '\x24D', '\x3', '\x2', '\x2', '\x2', '\x24D', '\x250', 
		'\x3', '\x2', '\x2', '\x2', '\x24E', '\x24F', '\t', '\x4', '\x2', '\x2', 
		'\x24F', '\x251', '\x5', '\\', '/', '\x2', '\x250', '\x24E', '\x3', '\x2', 
		'\x2', '\x2', '\x250', '\x251', '\x3', '\x2', '\x2', '\x2', '\x251', '\x252', 
		'\x3', '\x2', '\x2', '\x2', '\x252', '\x253', '\a', '\x3', '\x2', '\x2', 
		'\x253', 'Y', '\x3', '\x2', '\x2', '\x2', '\x254', '\x259', '\a', '/', 
		'\x2', '\x2', '\x255', '\x256', '\a', '\t', '\x2', '\x2', '\x256', '\x257', 
		'\x5', '|', '?', '\x2', '\x257', '\x258', '\a', '\n', '\x2', '\x2', '\x258', 
		'\x25A', '\x3', '\x2', '\x2', '\x2', '\x259', '\x255', '\x3', '\x2', '\x2', 
		'\x2', '\x259', '\x25A', '\x3', '\x2', '\x2', '\x2', '\x25A', '\x25E', 
		'\x3', '\x2', '\x2', '\x2', '\x25B', '\x25C', '\a', ',', '\x2', '\x2', 
		'\x25C', '\x25D', '\a', ',', '\x2', '\x2', '\x25D', '\x25F', '\x5', 'Z', 
		'.', '\x2', '\x25E', '\x25B', '\x3', '\x2', '\x2', '\x2', '\x25E', '\x25F', 
		'\x3', '\x2', '\x2', '\x2', '\x25F', '[', '\x3', '\x2', '\x2', '\x2', 
		'\x260', '\x265', '\a', '/', '\x2', '\x2', '\x261', '\x262', '\a', '\x5', 
		'\x2', '\x2', '\x262', '\x263', '\x5', '\\', '/', '\x2', '\x263', '\x264', 
		'\a', '\x6', '\x2', '\x2', '\x264', '\x266', '\x3', '\x2', '\x2', '\x2', 
		'\x265', '\x261', '\x3', '\x2', '\x2', '\x2', '\x265', '\x266', '\x3', 
		'\x2', '\x2', '\x2', '\x266', '\x269', '\x3', '\x2', '\x2', '\x2', '\x267', 
		'\x269', '\x5', 'N', '(', '\x2', '\x268', '\x260', '\x3', '\x2', '\x2', 
		'\x2', '\x268', '\x267', '\x3', '\x2', '\x2', '\x2', '\x269', ']', '\x3', 
		'\x2', '\x2', '\x2', '\x26A', '\x26C', '\x5', 'j', '\x36', '\x2', '\x26B', 
		'\x26A', '\x3', '\x2', '\x2', '\x2', '\x26B', '\x26C', '\x3', '\x2', '\x2', 
		'\x2', '\x26C', '\x26E', '\x3', '\x2', '\x2', '\x2', '\x26D', '\x26F', 
		'\x5', '\f', '\a', '\x2', '\x26E', '\x26D', '\x3', '\x2', '\x2', '\x2', 
		'\x26E', '\x26F', '\x3', '\x2', '\x2', '\x2', '\x26F', '\x272', '\x3', 
		'\x2', '\x2', '\x2', '\x270', '\x273', '\x5', '`', '\x31', '\x2', '\x271', 
		'\x273', '\x5', '\x62', '\x32', '\x2', '\x272', '\x270', '\x3', '\x2', 
		'\x2', '\x2', '\x272', '\x271', '\x3', '\x2', '\x2', '\x2', '\x272', '\x273', 
		'\x3', '\x2', '\x2', '\x2', '\x273', '\x274', '\x3', '\x2', '\x2', '\x2', 
		'\x274', '\x277', '\x5', '\x64', '\x33', '\x2', '\x275', '\x278', '\x5', 
		'`', '\x31', '\x2', '\x276', '\x278', '\x5', '\x62', '\x32', '\x2', '\x277', 
		'\x275', '\x3', '\x2', '\x2', '\x2', '\x277', '\x276', '\x3', '\x2', '\x2', 
		'\x2', '\x277', '\x278', '\x3', '\x2', '\x2', '\x2', '\x278', '\x27A', 
		'\x3', '\x2', '\x2', '\x2', '\x279', '\x27B', '\x5', 'j', '\x36', '\x2', 
		'\x27A', '\x279', '\x3', '\x2', '\x2', '\x2', '\x27A', '\x27B', '\x3', 
		'\x2', '\x2', '\x2', '\x27B', '\x27E', '\x3', '\x2', '\x2', '\x2', '\x27C', 
		'\x27F', '\x5', '`', '\x31', '\x2', '\x27D', '\x27F', '\x5', '\x62', '\x32', 
		'\x2', '\x27E', '\x27C', '\x3', '\x2', '\x2', '\x2', '\x27E', '\x27D', 
		'\x3', '\x2', '\x2', '\x2', '\x27E', '\x27F', '\x3', '\x2', '\x2', '\x2', 
		'\x27F', '_', '\x3', '\x2', '\x2', '\x2', '\x280', '\x281', '\a', '\r', 
		'\x2', '\x2', '\x281', '\x61', '\x3', '\x2', '\x2', '\x2', '\x282', '\x283', 
		'\a', '\xE', '\x2', '\x2', '\x283', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\x284', '\x295', '\a', '/', '\x2', '\x2', '\x285', '\x288', '\a', '\t', 
		'\x2', '\x2', '\x286', '\x289', '\x5', '^', '\x30', '\x2', '\x287', '\x289', 
		'\a', '\x30', '\x2', '\x2', '\x288', '\x286', '\x3', '\x2', '\x2', '\x2', 
		'\x288', '\x287', '\x3', '\x2', '\x2', '\x2', '\x289', '\x291', '\x3', 
		'\x2', '\x2', '\x2', '\x28A', '\x28D', '\a', '\x4', '\x2', '\x2', '\x28B', 
		'\x28E', '\x5', '^', '\x30', '\x2', '\x28C', '\x28E', '\a', '\x30', '\x2', 
		'\x2', '\x28D', '\x28B', '\x3', '\x2', '\x2', '\x2', '\x28D', '\x28C', 
		'\x3', '\x2', '\x2', '\x2', '\x28E', '\x290', '\x3', '\x2', '\x2', '\x2', 
		'\x28F', '\x28A', '\x3', '\x2', '\x2', '\x2', '\x290', '\x293', '\x3', 
		'\x2', '\x2', '\x2', '\x291', '\x28F', '\x3', '\x2', '\x2', '\x2', '\x291', 
		'\x292', '\x3', '\x2', '\x2', '\x2', '\x292', '\x294', '\x3', '\x2', '\x2', 
		'\x2', '\x293', '\x291', '\x3', '\x2', '\x2', '\x2', '\x294', '\x296', 
		'\a', '\n', '\x2', '\x2', '\x295', '\x285', '\x3', '\x2', '\x2', '\x2', 
		'\x295', '\x296', '\x3', '\x2', '\x2', '\x2', '\x296', '\x29A', '\x3', 
		'\x2', '\x2', '\x2', '\x297', '\x298', '\a', ',', '\x2', '\x2', '\x298', 
		'\x299', '\a', ',', '\x2', '\x2', '\x299', '\x29B', '\x5', '\x64', '\x33', 
		'\x2', '\x29A', '\x297', '\x3', '\x2', '\x2', '\x2', '\x29A', '\x29B', 
		'\x3', '\x2', '\x2', '\x2', '\x29B', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'\x29C', '\x29D', '\a', '\x14', '\x2', '\x2', '\x29D', 'g', '\x3', '\x2', 
		'\x2', '\x2', '\x29E', '\x29F', '\a', '\x1E', '\x2', '\x2', '\x29F', 'i', 
		'\x3', '\x2', '\x2', '\x2', '\x2A0', '\x2A1', '\a', '\x19', '\x2', '\x2', 
		'\x2A1', 'k', '\x3', '\x2', '\x2', '\x2', '\x2A2', '\x2A3', '\a', '\x1B', 
		'\x2', '\x2', '\x2A3', 'm', '\x3', '\x2', '\x2', '\x2', '\x2A4', '\x2A5', 
		'\a', ' ', '\x2', '\x2', '\x2A5', 'o', '\x3', '\x2', '\x2', '\x2', '\x2A6', 
		'\x2A7', '\a', '\x1A', '\x2', '\x2', '\x2A7', 'q', '\x3', '\x2', '\x2', 
		'\x2', '\x2A8', '\x2A9', '\a', '&', '\x2', '\x2', '\x2A9', 's', '\x3', 
		'\x2', '\x2', '\x2', '\x2AA', '\x2AB', '\a', '\a', '\x2', '\x2', '\x2AB', 
		'\x2AC', '\a', '\'', '\x2', '\x2', '\x2AC', 'u', '\x3', '\x2', '\x2', 
		'\x2', '\x2AD', '\x2AE', '\a', '\v', '\x2', '\x2', '\x2AE', '\x2AF', '\x5', 
		'x', '=', '\x2', '\x2AF', '\x2B0', '\a', '\f', '\x2', '\x2', '\x2B0', 
		'w', '\x3', '\x2', '\x2', '\x2', '\x2B1', '\x2B2', '\a', '\x30', '\x2', 
		'\x2', '\x2B2', 'y', '\x3', '\x2', '\x2', '\x2', '\x2B3', '\x2B4', '\a', 
		'\x1F', '\x2', '\x2', '\x2B4', '\x2B6', '\a', '\t', '\x2', '\x2', '\x2B5', 
		'\x2B7', '\x5', '|', '?', '\x2', '\x2B6', '\x2B5', '\x3', '\x2', '\x2', 
		'\x2', '\x2B6', '\x2B7', '\x3', '\x2', '\x2', '\x2', '\x2B7', '\x2B8', 
		'\x3', '\x2', '\x2', '\x2', '\x2B8', '\x2B9', '\a', '\n', '\x2', '\x2', 
		'\x2B9', '{', '\x3', '\x2', '\x2', '\x2', '\x2BA', '\x2BC', '\a', '+', 
		'\x2', '\x2', '\x2BB', '\x2BA', '\x3', '\x2', '\x2', '\x2', '\x2BB', '\x2BC', 
		'\x3', '\x2', '\x2', '\x2', '\x2BC', '\x2BD', '\x3', '\x2', '\x2', '\x2', 
		'\x2BD', '\x2C0', '\x5', '~', '@', '\x2', '\x2BE', '\x2BF', '\a', '\x4', 
		'\x2', '\x2', '\x2BF', '\x2C1', '\x5', '|', '?', '\x2', '\x2C0', '\x2BE', 
		'\x3', '\x2', '\x2', '\x2', '\x2C0', '\x2C1', '\x3', '\x2', '\x2', '\x2', 
		'\x2C1', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x2C2', '\x2C5', '\a', 
		'+', '\x2', '\x2', '\x2C3', '\x2C4', '\a', '\x4', '\x2', '\x2', '\x2C4', 
		'\x2C6', '\x5', '|', '?', '\x2', '\x2C5', '\x2C3', '\x3', '\x2', '\x2', 
		'\x2', '\x2C5', '\x2C6', '\x3', '\x2', '\x2', '\x2', '\x2C6', '\x2C8', 
		'\x3', '\x2', '\x2', '\x2', '\x2C7', '\x2BB', '\x3', '\x2', '\x2', '\x2', 
		'\x2C7', '\x2C2', '\x3', '\x2', '\x2', '\x2', '\x2C8', '}', '\x3', '\x2', 
		'\x2', '\x2', '\x2C9', '\x2CB', '\x5', '\x80', '\x41', '\x2', '\x2CA', 
		'\x2CC', '\x5', '\x82', '\x42', '\x2', '\x2CB', '\x2CA', '\x3', '\x2', 
		'\x2', '\x2', '\x2CB', '\x2CC', '\x3', '\x2', '\x2', '\x2', '\x2CC', '\x2CF', 
		'\x3', '\x2', '\x2', '\x2', '\x2CD', '\x2CE', '\a', '\a', '\x2', '\x2', 
		'\x2CE', '\x2D0', '\x5', '\\', '/', '\x2', '\x2CF', '\x2CD', '\x3', '\x2', 
		'\x2', '\x2', '\x2CF', '\x2D0', '\x3', '\x2', '\x2', '\x2', '\x2D0', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x2D1', '\x2D2', '\t', '\n', '\x2', '\x2', 
		'\x2D2', '\x81', '\x3', '\x2', '\x2', '\x2', '\x2D3', '\x2D4', '\a', '/', 
		'\x2', '\x2', '\x2D4', '\x83', '\x3', '\x2', '\x2', '\x2', '\x2D5', '\x2D6', 
		'\x5', '\x86', '\x44', '\x2', '\x2D6', '\x2D7', '\a', ',', '\x2', '\x2', 
		'\x2D7', '\x85', '\x3', '\x2', '\x2', '\x2', '\x2D8', '\x2D9', '\t', '\v', 
		'\x2', '\x2', '\x2D9', '\x87', '\x3', '\x2', '\x2', '\x2', '\x2DA', '\x2DB', 
		'\t', '\f', '\x2', '\x2', '\x2DB', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'h', '\x94', '\x96', '\xA8', '\xAA', '\xAF', '\xB4', '\xBC', '\xC1', '\xC4', 
		'\xC9', '\xCD', '\xD3', '\xDC', '\xE0', '\xE6', '\xF0', '\xFE', '\x100', 
		'\x107', '\x10B', '\x111', '\x11B', '\x125', '\x127', '\x12C', '\x132', 
		'\x135', '\x13C', '\x148', '\x14D', '\x154', '\x161', '\x166', '\x16D', 
		'\x172', '\x17B', '\x183', '\x188', '\x18A', '\x18E', '\x193', '\x197', 
		'\x19B', '\x19F', '\x1A2', '\x1A9', '\x1AE', '\x1B5', '\x1B8', '\x1C0', 
		'\x1C2', '\x1C9', '\x1CD', '\x1D0', '\x1D3', '\x1D7', '\x1DA', '\x1E1', 
		'\x1E4', '\x1E7', '\x1ED', '\x1EF', '\x1F4', '\x1FE', '\x207', '\x20C', 
		'\x212', '\x215', '\x219', '\x21C', '\x225', '\x22D', '\x233', '\x237', 
		'\x23C', '\x23F', '\x244', '\x246', '\x24C', '\x250', '\x259', '\x25E', 
		'\x265', '\x268', '\x26B', '\x26E', '\x272', '\x277', '\x27A', '\x27E', 
		'\x288', '\x28D', '\x291', '\x295', '\x29A', '\x2B6', '\x2BB', '\x2C0', 
		'\x2C5', '\x2C7', '\x2CB', '\x2CF',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
