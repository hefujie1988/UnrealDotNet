//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from UHeader.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class UHeaderParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, PtrQuant=11, RefQuant=12, Private=13, Protected=14, Public=15, 
		Inline=16, Explicit=17, Virtual=18, Class=19, Struct=20, Enum=21, Union=22, 
		Const=23, Final=24, Static=25, Extern=26, Mutable=27, Override=28, Template=29, 
		Friend=30, Operator=31, Typedef=32, Constexpr=33, BracketsOpen=34, BracketsClose=35, 
		Tilda=36, Delete=37, GCC_ALIGN=38, Namespace=39, DotDot=40, SingleLineDerective=41, 
		MultiLineDerective=42, Identifier=43, Literal=44, SpecalSymbol=45, Whitespace=46, 
		Newline=47, ExportComment=48, BlockComment=49, LineComment=50;
	public const int
		RULE_translationUnit = 0, RULE_namespaceUnit = 1, RULE_namespaceName = 2, 
		RULE_typePreDeclaration = 3, RULE_classDeclaration = 4, RULE_classOrStructOrEnum = 5, 
		RULE_classOrStruct = 6, RULE_classParentList = 7, RULE_classAlignDefine = 8, 
		RULE_classAlignValue = 9, RULE_classBody = 10, RULE_comment = 11, RULE_enumDeclaration = 12, 
		RULE_enumParent = 13, RULE_enumElementList = 14, RULE_enumElement = 15, 
		RULE_enumElementName = 16, RULE_unionDeclaration = 17, RULE_typeDefine = 18, 
		RULE_uDefine = 19, RULE_uDefineName = 20, RULE_uMeta = 21, RULE_uMetaParametrList = 22, 
		RULE_uMetaParametr = 23, RULE_uMetaParamKey = 24, RULE_uMetaParamValue = 25, 
		RULE_undefineBlock = 26, RULE_undefineContent = 27, RULE_constructor = 28, 
		RULE_constructorInitializerList = 29, RULE_constructorInitializer = 30, 
		RULE_method = 31, RULE_methodParamsList = 32, RULE_methodParametr = 33, 
		RULE_methodParametrName = 34, RULE_methodParametrDefaultValue = 35, RULE_value = 36, 
		RULE_methodBody = 37, RULE_methodBodyContent = 38, RULE_methodName = 39, 
		RULE_methodOperator = 40, RULE_property = 41, RULE_propertyName = 42, 
		RULE_propertyDefaultValue = 43, RULE_type = 44, RULE_isPtrQuant = 45, 
		RULE_isRefQuant = 46, RULE_typeName = 47, RULE_isVirtual = 48, RULE_isOverride = 49, 
		RULE_isConst = 50, RULE_isStatic = 51, RULE_isFriend = 52, RULE_isFinal = 53, 
		RULE_isDestructor = 54, RULE_isDelete = 55, RULE_isArray = 56, RULE_arrayLen = 57, 
		RULE_templateDefine = 58, RULE_templateParamList = 59, RULE_templateParam = 60, 
		RULE_templateParamType = 61, RULE_templateParamLiter = 62, RULE_accessSpecifierContainer = 63, 
		RULE_accessSpecifier = 64, RULE_preprocessDerective = 65;
	public static readonly string[] ruleNames = {
		"translationUnit", "namespaceUnit", "namespaceName", "typePreDeclaration", 
		"classDeclaration", "classOrStructOrEnum", "classOrStruct", "classParentList", 
		"classAlignDefine", "classAlignValue", "classBody", "comment", "enumDeclaration", 
		"enumParent", "enumElementList", "enumElement", "enumElementName", "unionDeclaration", 
		"typeDefine", "uDefine", "uDefineName", "uMeta", "uMetaParametrList", 
		"uMetaParametr", "uMetaParamKey", "uMetaParamValue", "undefineBlock", 
		"undefineContent", "constructor", "constructorInitializerList", "constructorInitializer", 
		"method", "methodParamsList", "methodParametr", "methodParametrName", 
		"methodParametrDefaultValue", "value", "methodBody", "methodBodyContent", 
		"methodName", "methodOperator", "property", "propertyName", "propertyDefaultValue", 
		"type", "isPtrQuant", "isRefQuant", "typeName", "isVirtual", "isOverride", 
		"isConst", "isStatic", "isFriend", "isFinal", "isDestructor", "isDelete", 
		"isArray", "arrayLen", "templateDefine", "templateParamList", "templateParam", 
		"templateParamType", "templateParamLiter", "accessSpecifierContainer", 
		"accessSpecifier", "preprocessDerective"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "','", "'('", "')'", "'='", "'|'", "'<'", "'>'", "'['", "']'", 
		"'*'", "'&'", "'private'", "'protected'", "'public'", null, "'explicit'", 
		"'virtual'", "'class'", "'struct'", "'enum'", "'union'", "'const'", "'final'", 
		"'static'", "'extern'", "'mutable'", "'override'", "'template'", "'friend'", 
		"'operator'", "'typedef'", "'CONSTEXPR'", "'{'", "'}'", "'~'", "'delete'", 
		"'GCC_ALIGN'", "'namespace'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "PtrQuant", 
		"RefQuant", "Private", "Protected", "Public", "Inline", "Explicit", "Virtual", 
		"Class", "Struct", "Enum", "Union", "Const", "Final", "Static", "Extern", 
		"Mutable", "Override", "Template", "Friend", "Operator", "Typedef", "Constexpr", 
		"BracketsOpen", "BracketsClose", "Tilda", "Delete", "GCC_ALIGN", "Namespace", 
		"DotDot", "SingleLineDerective", "MultiLineDerective", "Identifier", "Literal", 
		"SpecalSymbol", "Whitespace", "Newline", "ExportComment", "BlockComment", 
		"LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "UHeader.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static UHeaderParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public UHeaderParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public UHeaderParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class TranslationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(UHeaderParser.Eof, 0); }
		public TypePreDeclarationContext[] typePreDeclaration() {
			return GetRuleContexts<TypePreDeclarationContext>();
		}
		public TypePreDeclarationContext typePreDeclaration(int i) {
			return GetRuleContext<TypePreDeclarationContext>(i);
		}
		public MethodContext[] method() {
			return GetRuleContexts<MethodContext>();
		}
		public MethodContext method(int i) {
			return GetRuleContext<MethodContext>(i);
		}
		public ClassDeclarationContext[] classDeclaration() {
			return GetRuleContexts<ClassDeclarationContext>();
		}
		public ClassDeclarationContext classDeclaration(int i) {
			return GetRuleContext<ClassDeclarationContext>(i);
		}
		public EnumDeclarationContext[] enumDeclaration() {
			return GetRuleContexts<EnumDeclarationContext>();
		}
		public EnumDeclarationContext enumDeclaration(int i) {
			return GetRuleContext<EnumDeclarationContext>(i);
		}
		public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		public TypeDefineContext[] typeDefine() {
			return GetRuleContexts<TypeDefineContext>();
		}
		public TypeDefineContext typeDefine(int i) {
			return GetRuleContext<TypeDefineContext>(i);
		}
		public UDefineContext[] uDefine() {
			return GetRuleContexts<UDefineContext>();
		}
		public UDefineContext uDefine(int i) {
			return GetRuleContext<UDefineContext>(i);
		}
		public NamespaceUnitContext[] namespaceUnit() {
			return GetRuleContexts<NamespaceUnitContext>();
		}
		public NamespaceUnitContext namespaceUnit(int i) {
			return GetRuleContext<NamespaceUnitContext>(i);
		}
		public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public PreprocessDerectiveContext[] preprocessDerective() {
			return GetRuleContexts<PreprocessDerectiveContext>();
		}
		public PreprocessDerectiveContext preprocessDerective(int i) {
			return GetRuleContext<PreprocessDerectiveContext>(i);
		}
		public TranslationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_translationUnit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTranslationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TranslationUnitContext translationUnit() {
		TranslationUnitContext _localctx = new TranslationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_translationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PtrQuant) | (1L << RefQuant) | (1L << Inline) | (1L << Virtual) | (1L << Class) | (1L << Struct) | (1L << Enum) | (1L << Const) | (1L << Static) | (1L << Extern) | (1L << Mutable) | (1L << Template) | (1L << Friend) | (1L << Typedef) | (1L << Constexpr) | (1L << Namespace) | (1L << SingleLineDerective) | (1L << MultiLineDerective) | (1L << Identifier) | (1L << ExportComment))) != 0)) {
				{
				State = 142;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 132; typePreDeclaration();
					}
					break;
				case 2:
					{
					State = 133; method();
					}
					break;
				case 3:
					{
					State = 134; classDeclaration();
					}
					break;
				case 4:
					{
					State = 135; enumDeclaration();
					}
					break;
				case 5:
					{
					State = 136; property();
					}
					break;
				case 6:
					{
					State = 137; typeDefine();
					}
					break;
				case 7:
					{
					State = 138; uDefine();
					}
					break;
				case 8:
					{
					State = 139; namespaceUnit();
					}
					break;
				case 9:
					{
					State = 140; comment();
					}
					break;
				case 10:
					{
					State = 141; preprocessDerective();
					}
					break;
				}
				}
				State = 146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 147; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceUnitContext : ParserRuleContext {
		public ITerminalNode Namespace() { return GetToken(UHeaderParser.Namespace, 0); }
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public TranslationUnitContext translationUnit() {
			return GetRuleContext<TranslationUnitContext>(0);
		}
		public NamespaceUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceUnit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceUnitContext namespaceUnit() {
		NamespaceUnitContext _localctx = new NamespaceUnitContext(Context, State);
		EnterRule(_localctx, 2, RULE_namespaceUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149; Match(Namespace);
			State = 150; namespaceName();
			State = 151; Match(BracketsOpen);
			State = 152; translationUnit();
			State = 153; Match(BracketsClose);
			State = 155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 154; Match(T__0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public NamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameContext namespaceName() {
		NamespaceNameContext _localctx = new NamespaceNameContext(Context, State);
		EnterRule(_localctx, 4, RULE_namespaceName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypePreDeclarationContext : ParserRuleContext {
		public ClassOrStructOrEnumContext classOrStructOrEnum() {
			return GetRuleContext<ClassOrStructOrEnumContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TemplateDefineContext templateDefine() {
			return GetRuleContext<TemplateDefineContext>(0);
		}
		public IsFriendContext isFriend() {
			return GetRuleContext<IsFriendContext>(0);
		}
		public TypePreDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typePreDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypePreDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypePreDeclarationContext typePreDeclaration() {
		TypePreDeclarationContext _localctx = new TypePreDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_typePreDeclaration);
		int _la;
		try {
			State = 173;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Class:
			case Struct:
			case Enum:
			case Template:
				EnterOuterAlt(_localctx, 1);
				{
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Template) {
					{
					State = 159; templateDefine();
					}
				}

				State = 162; classOrStructOrEnum();
				State = 163; type();
				State = 164; Match(T__0);
				}
				break;
			case Friend:
				EnterOuterAlt(_localctx, 2);
				{
				State = 166; isFriend();
				State = 168;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
				case 1:
					{
					State = 167; classOrStructOrEnum();
					}
					break;
				}
				State = 170; type();
				State = 171; Match(T__0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public ClassOrStructContext classOrStruct() {
			return GetRuleContext<ClassOrStructContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public TemplateDefineContext templateDefine() {
			return GetRuleContext<TemplateDefineContext>(0);
		}
		public IsFinalContext isFinal() {
			return GetRuleContext<IsFinalContext>(0);
		}
		public ITerminalNode DotDot() { return GetToken(UHeaderParser.DotDot, 0); }
		public ClassParentListContext classParentList() {
			return GetRuleContext<ClassParentListContext>(0);
		}
		public ClassAlignDefineContext classAlignDefine() {
			return GetRuleContext<ClassAlignDefineContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Template) {
				{
				State = 175; templateDefine();
				}
			}

			State = 178; classOrStruct();
			State = 179; type();
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Final) {
				{
				State = 180; isFinal();
				}
			}

			State = 185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DotDot) {
				{
				State = 183; Match(DotDot);
				State = 184; classParentList();
				}
			}

			State = 187; Match(BracketsOpen);
			State = 188; classBody();
			State = 189; Match(BracketsClose);
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GCC_ALIGN) {
				{
				State = 190; classAlignDefine();
				}
			}

			State = 193; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrStructOrEnumContext : ParserRuleContext {
		public ITerminalNode Class() { return GetToken(UHeaderParser.Class, 0); }
		public ITerminalNode Struct() { return GetToken(UHeaderParser.Struct, 0); }
		public ITerminalNode Enum() { return GetToken(UHeaderParser.Enum, 0); }
		public ClassOrStructOrEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrStructOrEnum; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassOrStructOrEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrStructOrEnumContext classOrStructOrEnum() {
		ClassOrStructOrEnumContext _localctx = new ClassOrStructOrEnumContext(Context, State);
		EnterRule(_localctx, 10, RULE_classOrStructOrEnum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << Struct) | (1L << Enum))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrStructContext : ParserRuleContext {
		public ITerminalNode Class() { return GetToken(UHeaderParser.Class, 0); }
		public ITerminalNode Struct() { return GetToken(UHeaderParser.Struct, 0); }
		public ClassOrStructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrStruct; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassOrStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrStructContext classOrStruct() {
		ClassOrStructContext _localctx = new ClassOrStructContext(Context, State);
		EnterRule(_localctx, 12, RULE_classOrStruct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			_la = TokenStream.LA(1);
			if ( !(_la==Class || _la==Struct) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassParentListContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public AccessSpecifierContext accessSpecifier() {
			return GetRuleContext<AccessSpecifierContext>(0);
		}
		public ClassParentListContext classParentList() {
			return GetRuleContext<ClassParentListContext>(0);
		}
		public ClassParentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classParentList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassParentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassParentListContext classParentList() {
		ClassParentListContext _localctx = new ClassParentListContext(Context, State);
		EnterRule(_localctx, 14, RULE_classParentList);
		int _la;
		try {
			State = 210;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Private) | (1L << Protected) | (1L << Public))) != 0)) {
					{
					State = 199; accessSpecifier();
					}
				}

				State = 202; type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Private) | (1L << Protected) | (1L << Public))) != 0)) {
					{
					State = 203; accessSpecifier();
					}
				}

				State = 206; type();
				State = 207; Match(T__1);
				State = 208; classParentList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassAlignDefineContext : ParserRuleContext {
		public ITerminalNode GCC_ALIGN() { return GetToken(UHeaderParser.GCC_ALIGN, 0); }
		public ClassAlignValueContext classAlignValue() {
			return GetRuleContext<ClassAlignValueContext>(0);
		}
		public ClassAlignDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classAlignDefine; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassAlignDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassAlignDefineContext classAlignDefine() {
		ClassAlignDefineContext _localctx = new ClassAlignDefineContext(Context, State);
		EnterRule(_localctx, 16, RULE_classAlignDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212; Match(GCC_ALIGN);
			State = 213; Match(T__2);
			State = 214; classAlignValue();
			State = 215; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassAlignValueContext : ParserRuleContext {
		public ITerminalNode[] Literal() { return GetTokens(UHeaderParser.Literal); }
		public ITerminalNode Literal(int i) {
			return GetToken(UHeaderParser.Literal, i);
		}
		public ClassAlignValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classAlignValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassAlignValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassAlignValueContext classAlignValue() {
		ClassAlignValueContext _localctx = new ClassAlignValueContext(Context, State);
		EnterRule(_localctx, 18, RULE_classAlignValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 217; Match(Literal);
				}
				}
				State = 220;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Literal );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public AccessSpecifierContainerContext[] accessSpecifierContainer() {
			return GetRuleContexts<AccessSpecifierContainerContext>();
		}
		public AccessSpecifierContainerContext accessSpecifierContainer(int i) {
			return GetRuleContext<AccessSpecifierContainerContext>(i);
		}
		public MethodContext[] method() {
			return GetRuleContexts<MethodContext>();
		}
		public MethodContext method(int i) {
			return GetRuleContext<MethodContext>(i);
		}
		public ConstructorContext[] constructor() {
			return GetRuleContexts<ConstructorContext>();
		}
		public ConstructorContext constructor(int i) {
			return GetRuleContext<ConstructorContext>(i);
		}
		public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		public UDefineContext[] uDefine() {
			return GetRuleContexts<UDefineContext>();
		}
		public UDefineContext uDefine(int i) {
			return GetRuleContext<UDefineContext>(i);
		}
		public TypeDefineContext[] typeDefine() {
			return GetRuleContexts<TypeDefineContext>();
		}
		public TypeDefineContext typeDefine(int i) {
			return GetRuleContext<TypeDefineContext>(i);
		}
		public ClassDeclarationContext[] classDeclaration() {
			return GetRuleContexts<ClassDeclarationContext>();
		}
		public ClassDeclarationContext classDeclaration(int i) {
			return GetRuleContext<ClassDeclarationContext>(i);
		}
		public EnumDeclarationContext[] enumDeclaration() {
			return GetRuleContexts<EnumDeclarationContext>();
		}
		public EnumDeclarationContext enumDeclaration(int i) {
			return GetRuleContext<EnumDeclarationContext>(i);
		}
		public TypePreDeclarationContext[] typePreDeclaration() {
			return GetRuleContexts<TypePreDeclarationContext>();
		}
		public TypePreDeclarationContext typePreDeclaration(int i) {
			return GetRuleContext<TypePreDeclarationContext>(i);
		}
		public UnionDeclarationContext[] unionDeclaration() {
			return GetRuleContexts<UnionDeclarationContext>();
		}
		public UnionDeclarationContext unionDeclaration(int i) {
			return GetRuleContext<UnionDeclarationContext>(i);
		}
		public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public PreprocessDerectiveContext[] preprocessDerective() {
			return GetRuleContexts<PreprocessDerectiveContext>();
		}
		public PreprocessDerectiveContext preprocessDerective(int i) {
			return GetRuleContext<PreprocessDerectiveContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 20, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PtrQuant) | (1L << RefQuant) | (1L << Private) | (1L << Protected) | (1L << Public) | (1L << Inline) | (1L << Explicit) | (1L << Virtual) | (1L << Class) | (1L << Struct) | (1L << Enum) | (1L << Union) | (1L << Const) | (1L << Static) | (1L << Extern) | (1L << Mutable) | (1L << Template) | (1L << Friend) | (1L << Operator) | (1L << Typedef) | (1L << Constexpr) | (1L << Tilda) | (1L << SingleLineDerective) | (1L << MultiLineDerective) | (1L << Identifier) | (1L << ExportComment))) != 0)) {
				{
				State = 234;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 222; accessSpecifierContainer();
					}
					break;
				case 2:
					{
					State = 223; method();
					}
					break;
				case 3:
					{
					State = 224; constructor();
					}
					break;
				case 4:
					{
					State = 225; property();
					}
					break;
				case 5:
					{
					State = 226; uDefine();
					}
					break;
				case 6:
					{
					State = 227; typeDefine();
					}
					break;
				case 7:
					{
					State = 228; classDeclaration();
					}
					break;
				case 8:
					{
					State = 229; enumDeclaration();
					}
					break;
				case 9:
					{
					State = 230; typePreDeclaration();
					}
					break;
				case 10:
					{
					State = 231; unionDeclaration();
					}
					break;
				case 11:
					{
					State = 232; comment();
					}
					break;
				case 12:
					{
					State = 233; preprocessDerective();
					}
					break;
				}
				}
				State = 238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		public ITerminalNode ExportComment() { return GetToken(UHeaderParser.ExportComment, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 22, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239; Match(ExportComment);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		public ITerminalNode Enum() { return GetToken(UHeaderParser.Enum, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode Class() { return GetToken(UHeaderParser.Class, 0); }
		public EnumParentContext enumParent() {
			return GetRuleContext<EnumParentContext>(0);
		}
		public EnumElementListContext enumElementList() {
			return GetRuleContext<EnumElementListContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_enumDeclaration);
		int _la;
		try {
			State = 263;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 241; Match(Enum);
				State = 243;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 242; Match(Class);
					}
					break;
				}
				State = 245; type();
				State = 247;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DotDot) {
					{
					State = 246; enumParent();
					}
				}

				State = 253;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BracketsOpen) {
					{
					State = 249; Match(BracketsOpen);
					State = 250; enumElementList();
					State = 251; Match(BracketsClose);
					}
				}

				State = 255; Match(T__0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 257; Match(Enum);
				State = 258; Match(BracketsOpen);
				State = 259; enumElementList();
				State = 260; Match(BracketsClose);
				State = 261; Match(T__0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumParentContext : ParserRuleContext {
		public ITerminalNode DotDot() { return GetToken(UHeaderParser.DotDot, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public EnumParentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumParent; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumParent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumParentContext enumParent() {
		EnumParentContext _localctx = new EnumParentContext(Context, State);
		EnterRule(_localctx, 26, RULE_enumParent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265; Match(DotDot);
			State = 266; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumElementListContext : ParserRuleContext {
		public EnumElementContext enumElement() {
			return GetRuleContext<EnumElementContext>(0);
		}
		public EnumElementListContext enumElementList() {
			return GetRuleContext<EnumElementListContext>(0);
		}
		public EnumElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumElementList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumElementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumElementListContext enumElementList() {
		EnumElementListContext _localctx = new EnumElementListContext(Context, State);
		EnterRule(_localctx, 28, RULE_enumElementList);
		try {
			State = 275;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 268; enumElement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 269; enumElement();
				State = 270; Match(T__1);
				State = 271; enumElementList();
				State = 273;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
				case 1:
					{
					State = 272; Match(T__1);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumElementContext : ParserRuleContext {
		public EnumElementNameContext enumElementName() {
			return GetRuleContext<EnumElementNameContext>(0);
		}
		public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public PropertyDefaultValueContext propertyDefaultValue() {
			return GetRuleContext<PropertyDefaultValueContext>(0);
		}
		public UDefineContext uDefine() {
			return GetRuleContext<UDefineContext>(0);
		}
		public ITerminalNode DotDot() { return GetToken(UHeaderParser.DotDot, 0); }
		public EnumElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumElement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumElementContext enumElement() {
		EnumElementContext _localctx = new EnumElementContext(Context, State);
		EnterRule(_localctx, 30, RULE_enumElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ExportComment) {
				{
				{
				State = 277; comment();
				}
				}
				State = 282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 283; enumElementName();
			State = 286;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4 || _la==DotDot) {
				{
				State = 284;
				_la = TokenStream.LA(1);
				if ( !(_la==T__4 || _la==DotDot) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 285; propertyDefaultValue();
				}
			}

			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 288; uDefine();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumElementNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public EnumElementNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumElementName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumElementName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumElementNameContext enumElementName() {
		EnumElementNameContext _localctx = new EnumElementNameContext(Context, State);
		EnterRule(_localctx, 32, RULE_enumElementName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionDeclarationContext : ParserRuleContext {
		public ITerminalNode Union() { return GetToken(UHeaderParser.Union, 0); }
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public UnionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionDeclarationContext unionDeclaration() {
		UnionDeclarationContext _localctx = new UnionDeclarationContext(Context, State);
		EnterRule(_localctx, 34, RULE_unionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293; Match(Union);
			State = 294; methodBody();
			State = 296;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 295; Match(T__0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefineContext : ParserRuleContext {
		public ITerminalNode Typedef() { return GetToken(UHeaderParser.Typedef, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDefine; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefineContext typeDefine() {
		TypeDefineContext _localctx = new TypeDefineContext(Context, State);
		EnterRule(_localctx, 36, RULE_typeDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298; Match(Typedef);
			State = 299; type();
			State = 300; typeName();
			State = 301; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UDefineContext : ParserRuleContext {
		public UDefineNameContext uDefineName() {
			return GetRuleContext<UDefineNameContext>(0);
		}
		public UMetaContext uMeta() {
			return GetRuleContext<UMetaContext>(0);
		}
		public UDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uDefine; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UDefineContext uDefine() {
		UDefineContext _localctx = new UDefineContext(Context, State);
		EnterRule(_localctx, 38, RULE_uDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303; uDefineName();
			State = 304; Match(T__2);
			State = 305; uMeta();
			State = 306; Match(T__3);
			State = 308;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 307; Match(T__0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UDefineNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public UDefineNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uDefineName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUDefineName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UDefineNameContext uDefineName() {
		UDefineNameContext _localctx = new UDefineNameContext(Context, State);
		EnterRule(_localctx, 40, RULE_uDefineName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 310; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UMetaContext : ParserRuleContext {
		public UMetaParametrListContext uMetaParametrList() {
			return GetRuleContext<UMetaParametrListContext>(0);
		}
		public UMetaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uMeta; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUMeta(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UMetaContext uMeta() {
		UMetaContext _localctx = new UMetaContext(Context, State);
		EnterRule(_localctx, 42, RULE_uMeta);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PtrQuant) | (1L << RefQuant) | (1L << Class) | (1L << Struct) | (1L << Enum) | (1L << Const) | (1L << Identifier) | (1L << Literal))) != 0)) {
				{
				State = 312; uMetaParametrList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UMetaParametrListContext : ParserRuleContext {
		public UMetaParametrContext uMetaParametr() {
			return GetRuleContext<UMetaParametrContext>(0);
		}
		public UMetaParametrListContext uMetaParametrList() {
			return GetRuleContext<UMetaParametrListContext>(0);
		}
		public UMetaParametrListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uMetaParametrList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUMetaParametrList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UMetaParametrListContext uMetaParametrList() {
		UMetaParametrListContext _localctx = new UMetaParametrListContext(Context, State);
		EnterRule(_localctx, 44, RULE_uMetaParametrList);
		try {
			State = 320;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 315; uMetaParametr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 316; uMetaParametr();
				State = 317; Match(T__1);
				State = 318; uMetaParametrList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UMetaParametrContext : ParserRuleContext {
		public UMetaParamKeyContext uMetaParamKey() {
			return GetRuleContext<UMetaParamKeyContext>(0);
		}
		public UMetaParamValueContext uMetaParamValue() {
			return GetRuleContext<UMetaParamValueContext>(0);
		}
		public UMetaParametrListContext uMetaParametrList() {
			return GetRuleContext<UMetaParametrListContext>(0);
		}
		public UMetaParametrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uMetaParametr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUMetaParametr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UMetaParametrContext uMetaParametr() {
		UMetaParametrContext _localctx = new UMetaParametrContext(Context, State);
		EnterRule(_localctx, 46, RULE_uMetaParametr);
		try {
			State = 333;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 322; uMetaParamKey(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 323; uMetaParamKey(0);
				State = 324; Match(T__4);
				State = 325; uMetaParamValue();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 327; uMetaParamKey(0);
				State = 328; Match(T__4);
				State = 329; Match(T__2);
				State = 330; uMetaParametrList();
				State = 331; Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UMetaParamKeyContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public UMetaParamKeyContext[] uMetaParamKey() {
			return GetRuleContexts<UMetaParamKeyContext>();
		}
		public UMetaParamKeyContext uMetaParamKey(int i) {
			return GetRuleContext<UMetaParamKeyContext>(i);
		}
		public UMetaParamKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uMetaParamKey; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUMetaParamKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UMetaParamKeyContext uMetaParamKey() {
		return uMetaParamKey(0);
	}

	private UMetaParamKeyContext uMetaParamKey(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		UMetaParamKeyContext _localctx = new UMetaParamKeyContext(Context, _parentState);
		UMetaParamKeyContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_uMetaParamKey, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 336; type();
				}
				break;
			case 2:
				{
				State = 337; value();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 345;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new UMetaParamKeyContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_uMetaParamKey);
					State = 340;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 341; Match(T__5);
					State = 342; uMetaParamKey(2);
					}
					} 
				}
				State = 347;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UMetaParamValueContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public UMetaParamValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uMetaParamValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUMetaParamValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UMetaParamValueContext uMetaParamValue() {
		UMetaParamValueContext _localctx = new UMetaParamValueContext(Context, State);
		EnterRule(_localctx, 50, RULE_uMetaParamValue);
		try {
			State = 350;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 348; type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 349; value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UndefineBlockContext : ParserRuleContext {
		public UndefineContentContext undefineContent() {
			return GetRuleContext<UndefineContentContext>(0);
		}
		public UndefineBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undefineBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUndefineBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UndefineBlockContext undefineBlock() {
		UndefineBlockContext _localctx = new UndefineBlockContext(Context, State);
		EnterRule(_localctx, 52, RULE_undefineBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352; Match(T__2);
			State = 353; undefineContent();
			State = 354; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UndefineContentContext : ParserRuleContext {
		public UndefineContentContext[] undefineContent() {
			return GetRuleContexts<UndefineContentContext>();
		}
		public UndefineContentContext undefineContent(int i) {
			return GetRuleContext<UndefineContentContext>(i);
		}
		public UndefineContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undefineContent; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUndefineContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UndefineContentContext undefineContent() {
		UndefineContentContext _localctx = new UndefineContentContext(Context, State);
		EnterRule(_localctx, 54, RULE_undefineContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << PtrQuant) | (1L << RefQuant) | (1L << Private) | (1L << Protected) | (1L << Public) | (1L << Inline) | (1L << Explicit) | (1L << Virtual) | (1L << Class) | (1L << Struct) | (1L << Enum) | (1L << Union) | (1L << Const) | (1L << Final) | (1L << Static) | (1L << Extern) | (1L << Mutable) | (1L << Override) | (1L << Template) | (1L << Friend) | (1L << Operator) | (1L << Typedef) | (1L << Constexpr) | (1L << BracketsOpen) | (1L << BracketsClose) | (1L << Tilda) | (1L << Delete) | (1L << GCC_ALIGN) | (1L << Namespace) | (1L << DotDot) | (1L << SingleLineDerective) | (1L << MultiLineDerective) | (1L << Identifier) | (1L << Literal) | (1L << SpecalSymbol) | (1L << Whitespace) | (1L << Newline) | (1L << ExportComment) | (1L << BlockComment) | (1L << LineComment))) != 0)) {
				{
				{
				State = 356;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==T__2 || _la==T__3) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 361;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			{
			State = 367;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 362; Match(T__2);
				State = 363; undefineContent();
				State = 364; Match(T__3);
				State = 365; undefineContent();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorContext : ParserRuleContext {
		public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		public ITerminalNode[] Explicit() { return GetTokens(UHeaderParser.Explicit); }
		public ITerminalNode Explicit(int i) {
			return GetToken(UHeaderParser.Explicit, i);
		}
		public ITerminalNode[] Inline() { return GetTokens(UHeaderParser.Inline); }
		public ITerminalNode Inline(int i) {
			return GetToken(UHeaderParser.Inline, i);
		}
		public IsVirtualContext[] isVirtual() {
			return GetRuleContexts<IsVirtualContext>();
		}
		public IsVirtualContext isVirtual(int i) {
			return GetRuleContext<IsVirtualContext>(i);
		}
		public IsDestructorContext isDestructor() {
			return GetRuleContext<IsDestructorContext>(0);
		}
		public MethodParamsListContext methodParamsList() {
			return GetRuleContext<MethodParamsListContext>(0);
		}
		public IsConstContext isConst() {
			return GetRuleContext<IsConstContext>(0);
		}
		public ConstructorInitializerListContext constructorInitializerList() {
			return GetRuleContext<ConstructorInitializerListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public IsDeleteContext isDelete() {
			return GetRuleContext<IsDeleteContext>(0);
		}
		public ConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorContext constructor() {
		ConstructorContext _localctx = new ConstructorContext(Context, State);
		EnterRule(_localctx, 56, RULE_constructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Inline) | (1L << Explicit) | (1L << Virtual))) != 0)) {
				{
				State = 372;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Explicit:
					{
					State = 369; Match(Explicit);
					}
					break;
				case Inline:
					{
					State = 370; Match(Inline);
					}
					break;
				case Virtual:
					{
					State = 371; isVirtual();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 376;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 378;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Tilda) {
				{
				State = 377; isDestructor();
				}
			}

			State = 380; methodName();
			State = 381; Match(T__2);
			State = 383;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PtrQuant) | (1L << RefQuant) | (1L << Class) | (1L << Struct) | (1L << Enum) | (1L << Const) | (1L << Identifier))) != 0)) {
				{
				State = 382; methodParamsList();
				}
			}

			State = 385; Match(T__3);
			State = 387;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 386; isConst();
				}
				break;
			}
			State = 391;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DotDot) {
				{
				State = 389; Match(DotDot);
				State = 390; constructorInitializerList();
				}
			}

			State = 395;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BracketsOpen:
				{
				State = 393; methodBody();
				}
				break;
			case T__4:
				{
				State = 394; isDelete();
				}
				break;
			case T__0:
			case PtrQuant:
			case RefQuant:
			case Private:
			case Protected:
			case Public:
			case Inline:
			case Explicit:
			case Virtual:
			case Class:
			case Struct:
			case Enum:
			case Union:
			case Const:
			case Static:
			case Extern:
			case Mutable:
			case Template:
			case Friend:
			case Operator:
			case Typedef:
			case Constexpr:
			case BracketsClose:
			case Tilda:
			case SingleLineDerective:
			case MultiLineDerective:
			case Identifier:
			case ExportComment:
				break;
			default:
				break;
			}
			State = 398;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 397; Match(T__0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorInitializerListContext : ParserRuleContext {
		public ConstructorInitializerContext constructorInitializer() {
			return GetRuleContext<ConstructorInitializerContext>(0);
		}
		public ConstructorInitializerListContext constructorInitializerList() {
			return GetRuleContext<ConstructorInitializerListContext>(0);
		}
		public ConstructorInitializerListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorInitializerList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorInitializerList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorInitializerListContext constructorInitializerList() {
		ConstructorInitializerListContext _localctx = new ConstructorInitializerListContext(Context, State);
		EnterRule(_localctx, 58, RULE_constructorInitializerList);
		try {
			State = 405;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 400; constructorInitializer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 401; constructorInitializer();
				State = 402; Match(T__1);
				State = 403; constructorInitializerList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorInitializerContext : ParserRuleContext {
		public MethodParametrNameContext methodParametrName() {
			return GetRuleContext<MethodParametrNameContext>(0);
		}
		public MethodParametrDefaultValueContext methodParametrDefaultValue() {
			return GetRuleContext<MethodParametrDefaultValueContext>(0);
		}
		public UndefineBlockContext undefineBlock() {
			return GetRuleContext<UndefineBlockContext>(0);
		}
		public ConstructorInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorInitializer; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorInitializerContext constructorInitializer() {
		ConstructorInitializerContext _localctx = new ConstructorInitializerContext(Context, State);
		EnterRule(_localctx, 60, RULE_constructorInitializer);
		int _la;
		try {
			State = 417;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 407; methodParametrName();
				State = 408; Match(T__2);
				State = 410;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PtrQuant) | (1L << RefQuant) | (1L << Identifier) | (1L << Literal))) != 0)) {
					{
					State = 409; methodParametrDefaultValue();
					}
				}

				State = 412; Match(T__3);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 414; methodParametrName();
				State = 415; undefineBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		public TemplateDefineContext templateDefine() {
			return GetRuleContext<TemplateDefineContext>(0);
		}
		public ITerminalNode[] Constexpr() { return GetTokens(UHeaderParser.Constexpr); }
		public ITerminalNode Constexpr(int i) {
			return GetToken(UHeaderParser.Constexpr, i);
		}
		public IsFriendContext[] isFriend() {
			return GetRuleContexts<IsFriendContext>();
		}
		public IsFriendContext isFriend(int i) {
			return GetRuleContext<IsFriendContext>(i);
		}
		public ITerminalNode[] Inline() { return GetTokens(UHeaderParser.Inline); }
		public ITerminalNode Inline(int i) {
			return GetToken(UHeaderParser.Inline, i);
		}
		public ITerminalNode[] Extern() { return GetTokens(UHeaderParser.Extern); }
		public ITerminalNode Extern(int i) {
			return GetToken(UHeaderParser.Extern, i);
		}
		public IsStaticContext[] isStatic() {
			return GetRuleContexts<IsStaticContext>();
		}
		public IsStaticContext isStatic(int i) {
			return GetRuleContext<IsStaticContext>(i);
		}
		public IsVirtualContext[] isVirtual() {
			return GetRuleContexts<IsVirtualContext>();
		}
		public IsVirtualContext isVirtual(int i) {
			return GetRuleContext<IsVirtualContext>(i);
		}
		public MethodParamsListContext methodParamsList() {
			return GetRuleContext<MethodParamsListContext>(0);
		}
		public IsConstContext isConst() {
			return GetRuleContext<IsConstContext>(0);
		}
		public IsOverrideContext isOverride() {
			return GetRuleContext<IsOverrideContext>(0);
		}
		public IsFinalContext isFinal() {
			return GetRuleContext<IsFinalContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public IsDeleteContext isDelete() {
			return GetRuleContext<IsDeleteContext>(0);
		}
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(Context, State);
		EnterRule(_localctx, 62, RULE_method);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Template) {
				{
				State = 419; templateDefine();
				}
			}

			State = 430;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Inline) | (1L << Virtual) | (1L << Static) | (1L << Extern) | (1L << Friend) | (1L << Constexpr))) != 0)) {
				{
				State = 428;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Constexpr:
					{
					State = 422; Match(Constexpr);
					}
					break;
				case Friend:
					{
					State = 423; isFriend();
					}
					break;
				case Inline:
					{
					State = 424; Match(Inline);
					}
					break;
				case Extern:
					{
					State = 425; Match(Extern);
					}
					break;
				case Static:
					{
					State = 426; isStatic();
					}
					break;
				case Virtual:
					{
					State = 427; isVirtual();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 432;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 433; type();
			State = 434; methodName();
			State = 435; Match(T__2);
			State = 437;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PtrQuant) | (1L << RefQuant) | (1L << Class) | (1L << Struct) | (1L << Enum) | (1L << Const) | (1L << Identifier))) != 0)) {
				{
				State = 436; methodParamsList();
				}
			}

			State = 439; Match(T__3);
			State = 441;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 440; isConst();
				}
				break;
			}
			State = 444;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Override) {
				{
				State = 443; isOverride();
				}
			}

			State = 447;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Final) {
				{
				State = 446; isFinal();
				}
			}

			State = 451;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BracketsOpen:
				{
				State = 449; methodBody();
				}
				break;
			case T__4:
				{
				State = 450; isDelete();
				}
				break;
			case Eof:
			case T__0:
			case PtrQuant:
			case RefQuant:
			case Private:
			case Protected:
			case Public:
			case Inline:
			case Explicit:
			case Virtual:
			case Class:
			case Struct:
			case Enum:
			case Union:
			case Const:
			case Static:
			case Extern:
			case Mutable:
			case Template:
			case Friend:
			case Operator:
			case Typedef:
			case Constexpr:
			case BracketsClose:
			case Tilda:
			case Namespace:
			case SingleLineDerective:
			case MultiLineDerective:
			case Identifier:
			case ExportComment:
				break;
			default:
				break;
			}
			State = 454;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 453; Match(T__0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParamsListContext : ParserRuleContext {
		public MethodParametrContext methodParametr() {
			return GetRuleContext<MethodParametrContext>(0);
		}
		public MethodParamsListContext methodParamsList() {
			return GetRuleContext<MethodParamsListContext>(0);
		}
		public MethodParamsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParamsList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParamsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParamsListContext methodParamsList() {
		MethodParamsListContext _localctx = new MethodParamsListContext(Context, State);
		EnterRule(_localctx, 64, RULE_methodParamsList);
		try {
			State = 461;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 456; methodParametr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 457; methodParametr();
				State = 458; Match(T__1);
				State = 459; methodParamsList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParametrContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MethodParametrNameContext methodParametrName() {
			return GetRuleContext<MethodParametrNameContext>(0);
		}
		public MethodParametrDefaultValueContext methodParametrDefaultValue() {
			return GetRuleContext<MethodParametrDefaultValueContext>(0);
		}
		public MethodParametrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParametr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParametr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParametrContext methodParametr() {
		MethodParametrContext _localctx = new MethodParametrContext(Context, State);
		EnterRule(_localctx, 66, RULE_methodParametr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463; type();
			State = 469;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 464; methodParametrName();
				State = 467;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__4) {
					{
					State = 465; Match(T__4);
					State = 466; methodParametrDefaultValue();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParametrNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public MethodParametrNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParametrName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParametrName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParametrNameContext methodParametrName() {
		MethodParametrNameContext _localctx = new MethodParametrNameContext(Context, State);
		EnterRule(_localctx, 68, RULE_methodParametrName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParametrDefaultValueContext : ParserRuleContext {
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public MethodParametrDefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParametrDefaultValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParametrDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParametrDefaultValueContext methodParametrDefaultValue() {
		MethodParametrDefaultValueContext _localctx = new MethodParametrDefaultValueContext(Context, State);
		EnterRule(_localctx, 70, RULE_methodParametrDefaultValue);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 473; value();
			State = 478;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 474; Match(T__1);
					State = 475; value();
					}
					} 
				}
				State = 480;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(UHeaderParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(UHeaderParser.Identifier, i);
		}
		public ITerminalNode[] Literal() { return GetTokens(UHeaderParser.Literal); }
		public ITerminalNode Literal(int i) {
			return GetToken(UHeaderParser.Literal, i);
		}
		public IsPtrQuantContext isPtrQuant() {
			return GetRuleContext<IsPtrQuantContext>(0);
		}
		public IsRefQuantContext isRefQuant() {
			return GetRuleContext<IsRefQuantContext>(0);
		}
		public MethodParametrDefaultValueContext methodParametrDefaultValue() {
			return GetRuleContext<MethodParametrDefaultValueContext>(0);
		}
		public ITerminalNode[] SpecalSymbol() { return GetTokens(UHeaderParser.SpecalSymbol); }
		public ITerminalNode SpecalSymbol(int i) {
			return GetToken(UHeaderParser.SpecalSymbol, i);
		}
		public ITerminalNode[] DotDot() { return GetTokens(UHeaderParser.DotDot); }
		public ITerminalNode DotDot(int i) {
			return GetToken(UHeaderParser.DotDot, i);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 72, RULE_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 483;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PtrQuant:
				{
				State = 481; isPtrQuant();
				}
				break;
			case RefQuant:
				{
				State = 482; isRefQuant();
				}
				break;
			case Identifier:
			case Literal:
				break;
			default:
				break;
			}
			State = 485;
			_la = TokenStream.LA(1);
			if ( !(_la==Identifier || _la==Literal) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 492;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				{
				State = 487;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 486;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << DotDot) | (1L << SpecalSymbol))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 489;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << DotDot) | (1L << SpecalSymbol))) != 0) );
				State = 491;
				_la = TokenStream.LA(1);
				if ( !(_la==Identifier || _la==Literal) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 499;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 494; Match(T__2);
				State = 496;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PtrQuant) | (1L << RefQuant) | (1L << Identifier) | (1L << Literal))) != 0)) {
					{
					State = 495; methodParametrDefaultValue();
					}
				}

				State = 498; Match(T__3);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public MethodBodyContentContext methodBodyContent() {
			return GetRuleContext<MethodBodyContentContext>(0);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 74, RULE_methodBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 501; Match(BracketsOpen);
			State = 502; methodBodyContent();
			State = 503; Match(BracketsClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContentContext : ParserRuleContext {
		public ITerminalNode[] BracketsOpen() { return GetTokens(UHeaderParser.BracketsOpen); }
		public ITerminalNode BracketsOpen(int i) {
			return GetToken(UHeaderParser.BracketsOpen, i);
		}
		public ITerminalNode[] BracketsClose() { return GetTokens(UHeaderParser.BracketsClose); }
		public ITerminalNode BracketsClose(int i) {
			return GetToken(UHeaderParser.BracketsClose, i);
		}
		public MethodBodyContentContext[] methodBodyContent() {
			return GetRuleContexts<MethodBodyContentContext>();
		}
		public MethodBodyContentContext methodBodyContent(int i) {
			return GetRuleContext<MethodBodyContentContext>(i);
		}
		public MethodBodyContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBodyContent; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBodyContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContentContext methodBodyContent() {
		MethodBodyContentContext _localctx = new MethodBodyContentContext(Context, State);
		EnterRule(_localctx, 76, RULE_methodBodyContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 508;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << PtrQuant) | (1L << RefQuant) | (1L << Private) | (1L << Protected) | (1L << Public) | (1L << Inline) | (1L << Explicit) | (1L << Virtual) | (1L << Class) | (1L << Struct) | (1L << Enum) | (1L << Union) | (1L << Const) | (1L << Final) | (1L << Static) | (1L << Extern) | (1L << Mutable) | (1L << Override) | (1L << Template) | (1L << Friend) | (1L << Operator) | (1L << Typedef) | (1L << Constexpr) | (1L << Tilda) | (1L << Delete) | (1L << GCC_ALIGN) | (1L << Namespace) | (1L << DotDot) | (1L << SingleLineDerective) | (1L << MultiLineDerective) | (1L << Identifier) | (1L << Literal) | (1L << SpecalSymbol) | (1L << Whitespace) | (1L << Newline) | (1L << ExportComment) | (1L << BlockComment) | (1L << LineComment))) != 0)) {
				{
				{
				State = 505;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==BracketsOpen || _la==BracketsClose) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 510;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			{
			State = 516;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BracketsOpen) {
				{
				State = 511; Match(BracketsOpen);
				State = 512; methodBodyContent();
				State = 513; Match(BracketsClose);
				State = 514; methodBodyContent();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public ITerminalNode[] DotDot() { return GetTokens(UHeaderParser.DotDot); }
		public ITerminalNode DotDot(int i) {
			return GetToken(UHeaderParser.DotDot, i);
		}
		public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		public ITerminalNode Operator() { return GetToken(UHeaderParser.Operator, 0); }
		public MethodOperatorContext methodOperator() {
			return GetRuleContext<MethodOperatorContext>(0);
		}
		public MethodNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodNameContext methodName() {
		MethodNameContext _localctx = new MethodNameContext(Context, State);
		EnterRule(_localctx, 78, RULE_methodName);
		int _la;
		try {
			State = 526;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 518; Match(Identifier);
				State = 522;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DotDot) {
					{
					State = 519; Match(DotDot);
					State = 520; Match(DotDot);
					State = 521; methodName();
					}
				}

				}
				break;
			case Operator:
				EnterOuterAlt(_localctx, 2);
				{
				State = 524; Match(Operator);
				State = 525; methodOperator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodOperatorContext : ParserRuleContext {
		public ITerminalNode[] PtrQuant() { return GetTokens(UHeaderParser.PtrQuant); }
		public ITerminalNode PtrQuant(int i) {
			return GetToken(UHeaderParser.PtrQuant, i);
		}
		public ITerminalNode[] SpecalSymbol() { return GetTokens(UHeaderParser.SpecalSymbol); }
		public ITerminalNode SpecalSymbol(int i) {
			return GetToken(UHeaderParser.SpecalSymbol, i);
		}
		public ITerminalNode[] Identifier() { return GetTokens(UHeaderParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(UHeaderParser.Identifier, i);
		}
		public MethodOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodOperator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodOperatorContext methodOperator() {
		MethodOperatorContext _localctx = new MethodOperatorContext(Context, State);
		EnterRule(_localctx, 80, RULE_methodOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 529;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 528;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PtrQuant) | (1L << RefQuant) | (1L << Identifier) | (1L << SpecalSymbol))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 531;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PtrQuant) | (1L << RefQuant) | (1L << Identifier) | (1L << SpecalSymbol))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public ITerminalNode[] Mutable() { return GetTokens(UHeaderParser.Mutable); }
		public ITerminalNode Mutable(int i) {
			return GetToken(UHeaderParser.Mutable, i);
		}
		public ITerminalNode[] Extern() { return GetTokens(UHeaderParser.Extern); }
		public ITerminalNode Extern(int i) {
			return GetToken(UHeaderParser.Extern, i);
		}
		public IsStaticContext[] isStatic() {
			return GetRuleContexts<IsStaticContext>();
		}
		public IsStaticContext isStatic(int i) {
			return GetRuleContext<IsStaticContext>(i);
		}
		public IsArrayContext isArray() {
			return GetRuleContext<IsArrayContext>(0);
		}
		public PropertyDefaultValueContext propertyDefaultValue() {
			return GetRuleContext<PropertyDefaultValueContext>(0);
		}
		public ITerminalNode DotDot() { return GetToken(UHeaderParser.DotDot, 0); }
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 82, RULE_property);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 538;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Static) | (1L << Extern) | (1L << Mutable))) != 0)) {
				{
				State = 536;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Mutable:
					{
					State = 533; Match(Mutable);
					}
					break;
				case Extern:
					{
					State = 534; Match(Extern);
					}
					break;
				case Static:
					{
					State = 535; isStatic();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 540;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 541; type();
			State = 542; propertyName();
			State = 544;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 543; isArray();
				}
			}

			State = 548;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4 || _la==DotDot) {
				{
				State = 546;
				_la = TokenStream.LA(1);
				if ( !(_la==T__4 || _la==DotDot) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 547; propertyDefaultValue();
				}
			}

			State = 550; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public PropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyNameContext propertyName() {
		PropertyNameContext _localctx = new PropertyNameContext(Context, State);
		EnterRule(_localctx, 84, RULE_propertyName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 552; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyDefaultValueContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public PropertyDefaultValueContext propertyDefaultValue() {
			return GetRuleContext<PropertyDefaultValueContext>(0);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public PropertyDefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyDefaultValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyDefaultValueContext propertyDefaultValue() {
		PropertyDefaultValueContext _localctx = new PropertyDefaultValueContext(Context, State);
		EnterRule(_localctx, 86, RULE_propertyDefaultValue);
		int _la;
		try {
			State = 562;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 554; Match(Identifier);
				State = 559;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 555; Match(T__2);
					State = 556; propertyDefaultValue();
					State = 557; Match(T__3);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 561; value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public IsConstContext[] isConst() {
			return GetRuleContexts<IsConstContext>();
		}
		public IsConstContext isConst(int i) {
			return GetRuleContext<IsConstContext>(i);
		}
		public ClassOrStructOrEnumContext classOrStructOrEnum() {
			return GetRuleContext<ClassOrStructOrEnumContext>(0);
		}
		public IsPtrQuantContext[] isPtrQuant() {
			return GetRuleContexts<IsPtrQuantContext>();
		}
		public IsPtrQuantContext isPtrQuant(int i) {
			return GetRuleContext<IsPtrQuantContext>(i);
		}
		public IsRefQuantContext[] isRefQuant() {
			return GetRuleContexts<IsRefQuantContext>();
		}
		public IsRefQuantContext isRefQuant(int i) {
			return GetRuleContext<IsRefQuantContext>(i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 88, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Const) {
				{
				State = 564; isConst();
				}
			}

			State = 568;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << Struct) | (1L << Enum))) != 0)) {
				{
				State = 567; classOrStructOrEnum();
				}
			}

			State = 572;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PtrQuant:
				{
				State = 570; isPtrQuant();
				}
				break;
			case RefQuant:
				{
				State = 571; isRefQuant();
				}
				break;
			case Identifier:
				break;
			default:
				break;
			}
			State = 574; typeName();
			State = 577;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				{
				State = 575; isPtrQuant();
				}
				break;
			case 2:
				{
				State = 576; isRefQuant();
				}
				break;
			}
			State = 580;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
			case 1:
				{
				State = 579; isConst();
				}
				break;
			}
			State = 584;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				{
				State = 582; isPtrQuant();
				}
				break;
			case 2:
				{
				State = 583; isRefQuant();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsPtrQuantContext : ParserRuleContext {
		public ITerminalNode PtrQuant() { return GetToken(UHeaderParser.PtrQuant, 0); }
		public IsPtrQuantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isPtrQuant; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsPtrQuant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsPtrQuantContext isPtrQuant() {
		IsPtrQuantContext _localctx = new IsPtrQuantContext(Context, State);
		EnterRule(_localctx, 90, RULE_isPtrQuant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 586; Match(PtrQuant);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsRefQuantContext : ParserRuleContext {
		public ITerminalNode RefQuant() { return GetToken(UHeaderParser.RefQuant, 0); }
		public IsRefQuantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isRefQuant; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsRefQuant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsRefQuantContext isRefQuant() {
		IsRefQuantContext _localctx = new IsRefQuantContext(Context, State);
		EnterRule(_localctx, 92, RULE_isRefQuant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 588; Match(RefQuant);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(UHeaderParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(UHeaderParser.Identifier, i);
		}
		public ITerminalNode[] DotDot() { return GetTokens(UHeaderParser.DotDot); }
		public ITerminalNode DotDot(int i) {
			return GetToken(UHeaderParser.DotDot, i);
		}
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode[] Literal() { return GetTokens(UHeaderParser.Literal); }
		public ITerminalNode Literal(int i) {
			return GetToken(UHeaderParser.Literal, i);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 94, RULE_typeName);
		int _la;
		try {
			State = 613;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 590; Match(Identifier);
				State = 594;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
				case 1:
					{
					State = 591; Match(DotDot);
					State = 592; Match(DotDot);
					State = 593; Match(Identifier);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 596; Match(Identifier);
				{
				State = 597; Match(T__6);
				State = 600;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PtrQuant:
				case RefQuant:
				case Class:
				case Struct:
				case Enum:
				case Const:
				case Identifier:
					{
					State = 598; type();
					}
					break;
				case Literal:
					{
					State = 599; Match(Literal);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 609;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 602; Match(T__1);
					State = 605;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case PtrQuant:
					case RefQuant:
					case Class:
					case Struct:
					case Enum:
					case Const:
					case Identifier:
						{
						State = 603; type();
						}
						break;
					case Literal:
						{
						State = 604; Match(Literal);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					State = 611;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 612; Match(T__7);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsVirtualContext : ParserRuleContext {
		public ITerminalNode Virtual() { return GetToken(UHeaderParser.Virtual, 0); }
		public IsVirtualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isVirtual; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsVirtual(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsVirtualContext isVirtual() {
		IsVirtualContext _localctx = new IsVirtualContext(Context, State);
		EnterRule(_localctx, 96, RULE_isVirtual);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 615; Match(Virtual);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsOverrideContext : ParserRuleContext {
		public ITerminalNode Override() { return GetToken(UHeaderParser.Override, 0); }
		public IsOverrideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isOverride; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsOverride(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsOverrideContext isOverride() {
		IsOverrideContext _localctx = new IsOverrideContext(Context, State);
		EnterRule(_localctx, 98, RULE_isOverride);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 617; Match(Override);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsConstContext : ParserRuleContext {
		public ITerminalNode Const() { return GetToken(UHeaderParser.Const, 0); }
		public IsConstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isConst; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsConst(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsConstContext isConst() {
		IsConstContext _localctx = new IsConstContext(Context, State);
		EnterRule(_localctx, 100, RULE_isConst);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 619; Match(Const);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsStaticContext : ParserRuleContext {
		public ITerminalNode Static() { return GetToken(UHeaderParser.Static, 0); }
		public IsStaticContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isStatic; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsStatic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsStaticContext isStatic() {
		IsStaticContext _localctx = new IsStaticContext(Context, State);
		EnterRule(_localctx, 102, RULE_isStatic);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 621; Match(Static);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsFriendContext : ParserRuleContext {
		public ITerminalNode Friend() { return GetToken(UHeaderParser.Friend, 0); }
		public IsFriendContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isFriend; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsFriend(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsFriendContext isFriend() {
		IsFriendContext _localctx = new IsFriendContext(Context, State);
		EnterRule(_localctx, 104, RULE_isFriend);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 623; Match(Friend);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsFinalContext : ParserRuleContext {
		public ITerminalNode Final() { return GetToken(UHeaderParser.Final, 0); }
		public IsFinalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isFinal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsFinal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsFinalContext isFinal() {
		IsFinalContext _localctx = new IsFinalContext(Context, State);
		EnterRule(_localctx, 106, RULE_isFinal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 625; Match(Final);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsDestructorContext : ParserRuleContext {
		public ITerminalNode Tilda() { return GetToken(UHeaderParser.Tilda, 0); }
		public IsDestructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isDestructor; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsDestructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsDestructorContext isDestructor() {
		IsDestructorContext _localctx = new IsDestructorContext(Context, State);
		EnterRule(_localctx, 108, RULE_isDestructor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 627; Match(Tilda);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsDeleteContext : ParserRuleContext {
		public ITerminalNode Delete() { return GetToken(UHeaderParser.Delete, 0); }
		public IsDeleteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isDelete; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsDelete(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsDeleteContext isDelete() {
		IsDeleteContext _localctx = new IsDeleteContext(Context, State);
		EnterRule(_localctx, 110, RULE_isDelete);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 629; Match(T__4);
			State = 630; Match(Delete);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsArrayContext : ParserRuleContext {
		public ArrayLenContext arrayLen() {
			return GetRuleContext<ArrayLenContext>(0);
		}
		public IsArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isArray; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsArrayContext isArray() {
		IsArrayContext _localctx = new IsArrayContext(Context, State);
		EnterRule(_localctx, 112, RULE_isArray);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632; Match(T__8);
			State = 633; arrayLen();
			State = 634; Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLenContext : ParserRuleContext {
		public ITerminalNode Literal() { return GetToken(UHeaderParser.Literal, 0); }
		public ArrayLenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLen; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLenContext arrayLen() {
		ArrayLenContext _localctx = new ArrayLenContext(Context, State);
		EnterRule(_localctx, 114, RULE_arrayLen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 636; Match(Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateDefineContext : ParserRuleContext {
		public ITerminalNode Template() { return GetToken(UHeaderParser.Template, 0); }
		public TemplateParamListContext templateParamList() {
			return GetRuleContext<TemplateParamListContext>(0);
		}
		public TemplateDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateDefine; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateDefineContext templateDefine() {
		TemplateDefineContext _localctx = new TemplateDefineContext(Context, State);
		EnterRule(_localctx, 116, RULE_templateDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 638; Match(Template);
			State = 639; Match(T__6);
			State = 641;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << Struct) | (1L << Enum) | (1L << Identifier))) != 0)) {
				{
				State = 640; templateParamList();
				}
			}

			State = 643; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateParamListContext : ParserRuleContext {
		public TemplateParamContext templateParam() {
			return GetRuleContext<TemplateParamContext>(0);
		}
		public TemplateParamListContext templateParamList() {
			return GetRuleContext<TemplateParamListContext>(0);
		}
		public TemplateParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateParamList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateParamListContext templateParamList() {
		TemplateParamListContext _localctx = new TemplateParamListContext(Context, State);
		EnterRule(_localctx, 118, RULE_templateParamList);
		try {
			State = 650;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 645; templateParam();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 646; templateParam();
				State = 647; Match(T__1);
				State = 648; templateParamList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateParamContext : ParserRuleContext {
		public TemplateParamTypeContext templateParamType() {
			return GetRuleContext<TemplateParamTypeContext>(0);
		}
		public TemplateParamLiterContext templateParamLiter() {
			return GetRuleContext<TemplateParamLiterContext>(0);
		}
		public PropertyDefaultValueContext propertyDefaultValue() {
			return GetRuleContext<PropertyDefaultValueContext>(0);
		}
		public TemplateParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateParam; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateParamContext templateParam() {
		TemplateParamContext _localctx = new TemplateParamContext(Context, State);
		EnterRule(_localctx, 120, RULE_templateParam);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652; templateParamType();
			State = 654;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 653; templateParamLiter();
				}
			}

			State = 658;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 656; Match(T__4);
				State = 657; propertyDefaultValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateParamTypeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public ITerminalNode Class() { return GetToken(UHeaderParser.Class, 0); }
		public ITerminalNode Struct() { return GetToken(UHeaderParser.Struct, 0); }
		public ITerminalNode Enum() { return GetToken(UHeaderParser.Enum, 0); }
		public TemplateParamTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateParamType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateParamType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateParamTypeContext templateParamType() {
		TemplateParamTypeContext _localctx = new TemplateParamTypeContext(Context, State);
		EnterRule(_localctx, 122, RULE_templateParamType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 660;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << Struct) | (1L << Enum) | (1L << Identifier))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateParamLiterContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public TemplateParamLiterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateParamLiter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateParamLiter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateParamLiterContext templateParamLiter() {
		TemplateParamLiterContext _localctx = new TemplateParamLiterContext(Context, State);
		EnterRule(_localctx, 124, RULE_templateParamLiter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 662; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessSpecifierContainerContext : ParserRuleContext {
		public AccessSpecifierContext accessSpecifier() {
			return GetRuleContext<AccessSpecifierContext>(0);
		}
		public ITerminalNode DotDot() { return GetToken(UHeaderParser.DotDot, 0); }
		public AccessSpecifierContainerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessSpecifierContainer; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessSpecifierContainer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessSpecifierContainerContext accessSpecifierContainer() {
		AccessSpecifierContainerContext _localctx = new AccessSpecifierContainerContext(Context, State);
		EnterRule(_localctx, 126, RULE_accessSpecifierContainer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 664; accessSpecifier();
			State = 665; Match(DotDot);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessSpecifierContext : ParserRuleContext {
		public ITerminalNode Private() { return GetToken(UHeaderParser.Private, 0); }
		public ITerminalNode Protected() { return GetToken(UHeaderParser.Protected, 0); }
		public ITerminalNode Public() { return GetToken(UHeaderParser.Public, 0); }
		public AccessSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessSpecifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessSpecifierContext accessSpecifier() {
		AccessSpecifierContext _localctx = new AccessSpecifierContext(Context, State);
		EnterRule(_localctx, 128, RULE_accessSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 667;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Private) | (1L << Protected) | (1L << Public))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessDerectiveContext : ParserRuleContext {
		public ITerminalNode SingleLineDerective() { return GetToken(UHeaderParser.SingleLineDerective, 0); }
		public ITerminalNode MultiLineDerective() { return GetToken(UHeaderParser.MultiLineDerective, 0); }
		public PreprocessDerectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessDerective; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessDerective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessDerectiveContext preprocessDerective() {
		PreprocessDerectiveContext _localctx = new PreprocessDerectiveContext(Context, State);
		EnterRule(_localctx, 130, RULE_preprocessDerective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 669;
			_la = TokenStream.LA(1);
			if ( !(_la==SingleLineDerective || _la==MultiLineDerective) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 24: return uMetaParamKey_sempred((UMetaParamKeyContext)_localctx, predIndex);
		}
		return true;
	}
	private bool uMetaParamKey_sempred(UMetaParamKeyContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x34', '\x2A2', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\a', '\x2', '\x91', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '\x94', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '\x9E', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x5', '\x5', '\xA3', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\xAB', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\xB0', '\n', '\x5', '\x3', '\x6', '\x5', '\x6', '\xB3', '\n', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\xB8', 
		'\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\xBC', '\n', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'\xC2', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x5', '\t', '\xCB', '\n', '\t', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', '\xCF', '\n', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xD5', '\n', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\v', '\x6', '\v', '\xDD', '\n', '\v', '\r', '\v', '\xE', '\v', '\xDE', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\a', '\f', '\xED', '\n', '\f', '\f', '\f', '\xE', '\f', 
		'\xF0', '\v', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '\xF6', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\xFA', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x5', '\xE', '\x100', '\n', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x5', '\xE', '\x10A', '\n', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x114', '\n', '\x10', '\x5', 
		'\x10', '\x116', '\n', '\x10', '\x3', '\x11', '\a', '\x11', '\x119', '\n', 
		'\x11', '\f', '\x11', '\xE', '\x11', '\x11C', '\v', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x121', '\n', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\x124', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x12B', '\n', 
		'\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x5', '\x15', '\x137', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x17', '\x5', '\x17', '\x13C', '\n', '\x17', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x143', 
		'\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x150', '\n', '\x19', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x155', '\n', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\x15A', '\n', 
		'\x1A', '\f', '\x1A', '\xE', '\x1A', '\x15D', '\v', '\x1A', '\x3', '\x1B', 
		'\x3', '\x1B', '\x5', '\x1B', '\x161', '\n', '\x1B', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\a', '\x1D', '\x168', 
		'\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', '\x16B', '\v', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', 
		'\x1D', '\x172', '\n', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\a', '\x1E', '\x177', '\n', '\x1E', '\f', '\x1E', '\xE', '\x1E', '\x17A', 
		'\v', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x17D', '\n', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x182', '\n', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x186', '\n', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x18A', '\n', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x5', '\x1E', '\x18E', '\n', '\x1E', '\x3', '\x1E', '\x5', 
		'\x1E', '\x191', '\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x198', '\n', '\x1F', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x19D', '\n', ' ', '\x3', ' ', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x1A4', '\n', 
		' ', '\x3', '!', '\x5', '!', '\x1A7', '\n', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\a', '!', '\x1AF', '\n', 
		'!', '\f', '!', '\xE', '!', '\x1B2', '\v', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x3', '!', '\x5', '!', '\x1B8', '\n', '!', '\x3', '!', '\x3', 
		'!', '\x5', '!', '\x1BC', '\n', '!', '\x3', '!', '\x5', '!', '\x1BF', 
		'\n', '!', '\x3', '!', '\x5', '!', '\x1C2', '\n', '!', '\x3', '!', '\x3', 
		'!', '\x5', '!', '\x1C6', '\n', '!', '\x3', '!', '\x5', '!', '\x1C9', 
		'\n', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x5', '\"', '\x1D0', '\n', '\"', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x5', '#', '\x1D6', '\n', '#', '\x5', '#', '\x1D8', 
		'\n', '#', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\a', '%', '\x1DF', '\n', '%', '\f', '%', '\xE', '%', '\x1E2', '\v', '%', 
		'\x3', '&', '\x3', '&', '\x5', '&', '\x1E6', '\n', '&', '\x3', '&', '\x3', 
		'&', '\x6', '&', '\x1EA', '\n', '&', '\r', '&', '\xE', '&', '\x1EB', '\x3', 
		'&', '\x5', '&', '\x1EF', '\n', '&', '\x3', '&', '\x3', '&', '\x5', '&', 
		'\x1F3', '\n', '&', '\x3', '&', '\x5', '&', '\x1F6', '\n', '&', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '(', '\a', '(', '\x1FD', 
		'\n', '(', '\f', '(', '\xE', '(', '\x200', '\v', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x5', '(', '\x207', '\n', '(', 
		'\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x5', ')', '\x20D', '\n', 
		')', '\x3', ')', '\x3', ')', '\x5', ')', '\x211', '\n', ')', '\x3', '*', 
		'\x6', '*', '\x214', '\n', '*', '\r', '*', '\xE', '*', '\x215', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\a', '+', '\x21B', '\n', '+', '\f', '+', 
		'\xE', '+', '\x21E', '\v', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x5', 
		'+', '\x223', '\n', '+', '\x3', '+', '\x3', '+', '\x5', '+', '\x227', 
		'\n', '+', '\x3', '+', '\x3', '+', '\x3', ',', '\x3', ',', '\x3', '-', 
		'\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x5', '-', '\x232', '\n', 
		'-', '\x3', '-', '\x5', '-', '\x235', '\n', '-', '\x3', '.', '\x5', '.', 
		'\x238', '\n', '.', '\x3', '.', '\x5', '.', '\x23B', '\n', '.', '\x3', 
		'.', '\x3', '.', '\x5', '.', '\x23F', '\n', '.', '\x3', '.', '\x3', '.', 
		'\x3', '.', '\x5', '.', '\x244', '\n', '.', '\x3', '.', '\x5', '.', '\x247', 
		'\n', '.', '\x3', '.', '\x3', '.', '\x5', '.', '\x24B', '\n', '.', '\x3', 
		'/', '\x3', '/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x31', '\x3', '\x31', 
		'\x3', '\x31', '\x3', '\x31', '\x5', '\x31', '\x255', '\n', '\x31', '\x3', 
		'\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x5', '\x31', '\x25B', 
		'\n', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x5', '\x31', 
		'\x260', '\n', '\x31', '\a', '\x31', '\x262', '\n', '\x31', '\f', '\x31', 
		'\xE', '\x31', '\x265', '\v', '\x31', '\x3', '\x31', '\x5', '\x31', '\x268', 
		'\n', '\x31', '\x3', '\x32', '\x3', '\x32', '\x3', '\x33', '\x3', '\x33', 
		'\x3', '\x34', '\x3', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x37', '\x3', '\x37', '\x3', '\x38', '\x3', '\x38', 
		'\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', ':', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ';', '\x3', ';', '\x3', '<', '\x3', '<', '\x3', 
		'<', '\x5', '<', '\x284', '\n', '<', '\x3', '<', '\x3', '<', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x5', '=', '\x28D', '\n', 
		'=', '\x3', '>', '\x3', '>', '\x5', '>', '\x291', '\n', '>', '\x3', '>', 
		'\x3', '>', '\x5', '>', '\x295', '\n', '>', '\x3', '?', '\x3', '?', '\x3', 
		'@', '\x3', '@', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x42', 
		'\x3', '\x42', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x2', '\x3', 
		'\x32', '\x44', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', 
		'<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 
		'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 'l', 
		'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', '\x2', 
		'\r', '\x3', '\x2', '\x15', '\x17', '\x3', '\x2', '\x15', '\x16', '\x4', 
		'\x2', '\a', '\a', '*', '*', '\x3', '\x2', '\x5', '\x6', '\x3', '\x2', 
		'-', '.', '\x5', '\x2', '\b', '\n', '*', '*', '/', '/', '\x3', '\x2', 
		'$', '%', '\x5', '\x2', '\r', '\xE', '-', '-', '/', '/', '\x4', '\x2', 
		'\x15', '\x17', '-', '-', '\x3', '\x2', '\xF', '\x11', '\x3', '\x2', '+', 
		',', '\x2', '\x2D8', '\x2', '\x92', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x6', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\xAF', '\x3', '\x2', '\x2', '\x2', '\n', '\xB2', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\xC7', '\x3', '\x2', '\x2', '\x2', '\x10', '\xD4', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\xD6', '\x3', '\x2', '\x2', '\x2', '\x14', '\xDC', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\xEE', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\xF1', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x109', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x115', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\x11A', '\x3', '\x2', '\x2', '\x2', '\"', '\x125', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x127', '\x3', '\x2', '\x2', '\x2', 
		'&', '\x12C', '\x3', '\x2', '\x2', '\x2', '(', '\x131', '\x3', '\x2', 
		'\x2', '\x2', '*', '\x138', '\x3', '\x2', '\x2', '\x2', ',', '\x13B', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x142', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x32', '\x154', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x160', '\x3', '\x2', '\x2', '\x2', '\x36', '\x162', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x169', '\x3', '\x2', '\x2', '\x2', 
		':', '\x178', '\x3', '\x2', '\x2', '\x2', '<', '\x197', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x1A3', '\x3', '\x2', '\x2', '\x2', '@', '\x1A6', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x1CF', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x1D1', '\x3', '\x2', '\x2', '\x2', '\x46', '\x1D9', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x1DB', '\x3', '\x2', '\x2', '\x2', 'J', '\x1E5', 
		'\x3', '\x2', '\x2', '\x2', 'L', '\x1F7', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x1FE', '\x3', '\x2', '\x2', '\x2', 'P', '\x210', '\x3', '\x2', 
		'\x2', '\x2', 'R', '\x213', '\x3', '\x2', '\x2', '\x2', 'T', '\x21C', 
		'\x3', '\x2', '\x2', '\x2', 'V', '\x22A', '\x3', '\x2', '\x2', '\x2', 
		'X', '\x234', '\x3', '\x2', '\x2', '\x2', 'Z', '\x237', '\x3', '\x2', 
		'\x2', '\x2', '\\', '\x24C', '\x3', '\x2', '\x2', '\x2', '^', '\x24E', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x267', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x269', '\x3', '\x2', '\x2', '\x2', '\x64', '\x26B', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x26D', '\x3', '\x2', '\x2', '\x2', 'h', '\x26F', 
		'\x3', '\x2', '\x2', '\x2', 'j', '\x271', '\x3', '\x2', '\x2', '\x2', 
		'l', '\x273', '\x3', '\x2', '\x2', '\x2', 'n', '\x275', '\x3', '\x2', 
		'\x2', '\x2', 'p', '\x277', '\x3', '\x2', '\x2', '\x2', 'r', '\x27A', 
		'\x3', '\x2', '\x2', '\x2', 't', '\x27E', '\x3', '\x2', '\x2', '\x2', 
		'v', '\x280', '\x3', '\x2', '\x2', '\x2', 'x', '\x28C', '\x3', '\x2', 
		'\x2', '\x2', 'z', '\x28E', '\x3', '\x2', '\x2', '\x2', '|', '\x296', 
		'\x3', '\x2', '\x2', '\x2', '~', '\x298', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\x29A', '\x3', '\x2', '\x2', '\x2', '\x82', '\x29D', '\x3', '\x2', 
		'\x2', '\x2', '\x84', '\x29F', '\x3', '\x2', '\x2', '\x2', '\x86', '\x91', 
		'\x5', '\b', '\x5', '\x2', '\x87', '\x91', '\x5', '@', '!', '\x2', '\x88', 
		'\x91', '\x5', '\n', '\x6', '\x2', '\x89', '\x91', '\x5', '\x1A', '\xE', 
		'\x2', '\x8A', '\x91', '\x5', 'T', '+', '\x2', '\x8B', '\x91', '\x5', 
		'&', '\x14', '\x2', '\x8C', '\x91', '\x5', '(', '\x15', '\x2', '\x8D', 
		'\x91', '\x5', '\x4', '\x3', '\x2', '\x8E', '\x91', '\x5', '\x18', '\r', 
		'\x2', '\x8F', '\x91', '\x5', '\x84', '\x43', '\x2', '\x90', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x90', '\x87', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x88', '\x3', '\x2', '\x2', '\x2', '\x90', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x90', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x90', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\x90', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x90', '\x8E', '\x3', '\x2', '\x2', 
		'\x2', '\x90', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x91', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x92', '\x90', '\x3', '\x2', '\x2', '\x2', '\x92', 
		'\x93', '\x3', '\x2', '\x2', '\x2', '\x93', '\x95', '\x3', '\x2', '\x2', 
		'\x2', '\x94', '\x92', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\a', 
		'\x2', '\x2', '\x3', '\x96', '\x3', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'\x98', '\a', ')', '\x2', '\x2', '\x98', '\x99', '\x5', '\x6', '\x4', 
		'\x2', '\x99', '\x9A', '\a', '$', '\x2', '\x2', '\x9A', '\x9B', '\x5', 
		'\x2', '\x2', '\x2', '\x9B', '\x9D', '\a', '%', '\x2', '\x2', '\x9C', 
		'\x9E', '\a', '\x3', '\x2', '\x2', '\x9D', '\x9C', '\x3', '\x2', '\x2', 
		'\x2', '\x9D', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '\xA0', '\a', '-', '\x2', '\x2', '\xA0', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA3', '\x5', 'v', '<', '\x2', 
		'\xA2', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\x3', '\x2', 
		'\x2', '\x2', '\xA3', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', 
		'\x5', '\f', '\a', '\x2', '\xA5', '\xA6', '\x5', 'Z', '.', '\x2', '\xA6', 
		'\xA7', '\a', '\x3', '\x2', '\x2', '\xA7', '\xB0', '\x3', '\x2', '\x2', 
		'\x2', '\xA8', '\xAA', '\x5', 'j', '\x36', '\x2', '\xA9', '\xAB', '\x5', 
		'\f', '\a', '\x2', '\xAA', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAA', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\x3', '\x2', '\x2', 
		'\x2', '\xAC', '\xAD', '\x5', 'Z', '.', '\x2', '\xAD', '\xAE', '\a', '\x3', 
		'\x2', '\x2', '\xAE', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xA2', 
		'\x3', '\x2', '\x2', '\x2', '\xAF', '\xA8', '\x3', '\x2', '\x2', '\x2', 
		'\xB0', '\t', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB3', '\x5', 'v', 
		'<', '\x2', '\xB2', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\x3', '\x2', '\x2', '\x2', 
		'\xB4', '\xB5', '\x5', '\xE', '\b', '\x2', '\xB5', '\xB7', '\x5', 'Z', 
		'.', '\x2', '\xB6', '\xB8', '\x5', 'l', '\x37', '\x2', '\xB7', '\xB6', 
		'\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\x3', '\x2', '\x2', '\x2', 
		'\xB8', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\a', '*', 
		'\x2', '\x2', '\xBA', '\xBC', '\x5', '\x10', '\t', '\x2', '\xBB', '\xB9', 
		'\x3', '\x2', '\x2', '\x2', '\xBB', '\xBC', '\x3', '\x2', '\x2', '\x2', 
		'\xBC', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\a', '$', 
		'\x2', '\x2', '\xBE', '\xBF', '\x5', '\x16', '\f', '\x2', '\xBF', '\xC1', 
		'\a', '%', '\x2', '\x2', '\xC0', '\xC2', '\x5', '\x12', '\n', '\x2', '\xC1', 
		'\xC0', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\x3', '\x2', '\x2', 
		'\x2', '\xC2', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\a', 
		'\x3', '\x2', '\x2', '\xC4', '\v', '\x3', '\x2', '\x2', '\x2', '\xC5', 
		'\xC6', '\t', '\x2', '\x2', '\x2', '\xC6', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\xC7', '\xC8', '\t', '\x3', '\x2', '\x2', '\xC8', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\xC9', '\xCB', '\x5', '\x82', '\x42', '\x2', '\xCA', 
		'\xC9', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', '\x3', '\x2', '\x2', 
		'\x2', '\xCB', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xD5', '\x5', 
		'Z', '.', '\x2', '\xCD', '\xCF', '\x5', '\x82', '\x42', '\x2', '\xCE', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', '\x3', '\x2', '\x2', 
		'\x2', '\xCF', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', '\x5', 
		'Z', '.', '\x2', '\xD1', '\xD2', '\a', '\x4', '\x2', '\x2', '\xD2', '\xD3', 
		'\x5', '\x10', '\t', '\x2', '\xD3', '\xD5', '\x3', '\x2', '\x2', '\x2', 
		'\xD4', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xCE', '\x3', '\x2', 
		'\x2', '\x2', '\xD5', '\x11', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', 
		'\a', '(', '\x2', '\x2', '\xD7', '\xD8', '\a', '\x5', '\x2', '\x2', '\xD8', 
		'\xD9', '\x5', '\x14', '\v', '\x2', '\xD9', '\xDA', '\a', '\x6', '\x2', 
		'\x2', '\xDA', '\x13', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDD', '\a', 
		'.', '\x2', '\x2', '\xDC', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDD', 
		'\xDE', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDC', '\x3', '\x2', '\x2', 
		'\x2', '\xDE', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xDF', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\xE0', '\xED', '\x5', '\x80', '\x41', '\x2', '\xE1', 
		'\xED', '\x5', '@', '!', '\x2', '\xE2', '\xED', '\x5', ':', '\x1E', '\x2', 
		'\xE3', '\xED', '\x5', 'T', '+', '\x2', '\xE4', '\xED', '\x5', '(', '\x15', 
		'\x2', '\xE5', '\xED', '\x5', '&', '\x14', '\x2', '\xE6', '\xED', '\x5', 
		'\n', '\x6', '\x2', '\xE7', '\xED', '\x5', '\x1A', '\xE', '\x2', '\xE8', 
		'\xED', '\x5', '\b', '\x5', '\x2', '\xE9', '\xED', '\x5', '$', '\x13', 
		'\x2', '\xEA', '\xED', '\x5', '\x18', '\r', '\x2', '\xEB', '\xED', '\x5', 
		'\x84', '\x43', '\x2', '\xEC', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xEC', 
		'\xE1', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xE2', '\x3', '\x2', '\x2', 
		'\x2', '\xEC', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xE4', '\x3', 
		'\x2', '\x2', '\x2', '\xEC', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xEC', 
		'\xE6', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xE7', '\x3', '\x2', '\x2', 
		'\x2', '\xEC', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xE9', '\x3', 
		'\x2', '\x2', '\x2', '\xEC', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEC', 
		'\xEB', '\x3', '\x2', '\x2', '\x2', '\xED', '\xF0', '\x3', '\x2', '\x2', 
		'\x2', '\xEE', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', '\x3', 
		'\x2', '\x2', '\x2', '\xEF', '\x17', '\x3', '\x2', '\x2', '\x2', '\xF0', 
		'\xEE', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF2', '\a', '\x32', '\x2', 
		'\x2', '\xF2', '\x19', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF5', '\a', 
		'\x17', '\x2', '\x2', '\xF4', '\xF6', '\a', '\x15', '\x2', '\x2', '\xF5', 
		'\xF4', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF6', '\x3', '\x2', '\x2', 
		'\x2', '\xF6', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF9', '\x5', 
		'Z', '.', '\x2', '\xF8', '\xFA', '\x5', '\x1C', '\xF', '\x2', '\xF9', 
		'\xF8', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFA', '\x3', '\x2', '\x2', 
		'\x2', '\xFA', '\xFF', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', '\a', 
		'$', '\x2', '\x2', '\xFC', '\xFD', '\x5', '\x1E', '\x10', '\x2', '\xFD', 
		'\xFE', '\a', '%', '\x2', '\x2', '\xFE', '\x100', '\x3', '\x2', '\x2', 
		'\x2', '\xFF', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x100', '\x3', 
		'\x2', '\x2', '\x2', '\x100', '\x101', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\x102', '\a', '\x3', '\x2', '\x2', '\x102', '\x10A', '\x3', '\x2', '\x2', 
		'\x2', '\x103', '\x104', '\a', '\x17', '\x2', '\x2', '\x104', '\x105', 
		'\a', '$', '\x2', '\x2', '\x105', '\x106', '\x5', '\x1E', '\x10', '\x2', 
		'\x106', '\x107', '\a', '%', '\x2', '\x2', '\x107', '\x108', '\a', '\x3', 
		'\x2', '\x2', '\x108', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x109', '\xF3', 
		'\x3', '\x2', '\x2', '\x2', '\x109', '\x103', '\x3', '\x2', '\x2', '\x2', 
		'\x10A', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10C', '\a', '*', 
		'\x2', '\x2', '\x10C', '\x10D', '\x5', 'Z', '.', '\x2', '\x10D', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x10E', '\x116', '\x5', ' ', '\x11', '\x2', 
		'\x10F', '\x110', '\x5', ' ', '\x11', '\x2', '\x110', '\x111', '\a', '\x4', 
		'\x2', '\x2', '\x111', '\x113', '\x5', '\x1E', '\x10', '\x2', '\x112', 
		'\x114', '\a', '\x4', '\x2', '\x2', '\x113', '\x112', '\x3', '\x2', '\x2', 
		'\x2', '\x113', '\x114', '\x3', '\x2', '\x2', '\x2', '\x114', '\x116', 
		'\x3', '\x2', '\x2', '\x2', '\x115', '\x10E', '\x3', '\x2', '\x2', '\x2', 
		'\x115', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x116', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x117', '\x119', '\x5', '\x18', '\r', '\x2', '\x118', 
		'\x117', '\x3', '\x2', '\x2', '\x2', '\x119', '\x11C', '\x3', '\x2', '\x2', 
		'\x2', '\x11A', '\x118', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11B', 
		'\x3', '\x2', '\x2', '\x2', '\x11B', '\x11D', '\x3', '\x2', '\x2', '\x2', 
		'\x11C', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x120', '\x5', 
		'\"', '\x12', '\x2', '\x11E', '\x11F', '\t', '\x4', '\x2', '\x2', '\x11F', 
		'\x121', '\x5', 'X', '-', '\x2', '\x120', '\x11E', '\x3', '\x2', '\x2', 
		'\x2', '\x120', '\x121', '\x3', '\x2', '\x2', '\x2', '\x121', '\x123', 
		'\x3', '\x2', '\x2', '\x2', '\x122', '\x124', '\x5', '(', '\x15', '\x2', 
		'\x123', '\x122', '\x3', '\x2', '\x2', '\x2', '\x123', '\x124', '\x3', 
		'\x2', '\x2', '\x2', '\x124', '!', '\x3', '\x2', '\x2', '\x2', '\x125', 
		'\x126', '\a', '-', '\x2', '\x2', '\x126', '#', '\x3', '\x2', '\x2', '\x2', 
		'\x127', '\x128', '\a', '\x18', '\x2', '\x2', '\x128', '\x12A', '\x5', 
		'L', '\'', '\x2', '\x129', '\x12B', '\a', '\x3', '\x2', '\x2', '\x12A', 
		'\x129', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x12B', '\x3', '\x2', '\x2', 
		'\x2', '\x12B', '%', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12D', '\a', 
		'\"', '\x2', '\x2', '\x12D', '\x12E', '\x5', 'Z', '.', '\x2', '\x12E', 
		'\x12F', '\x5', '`', '\x31', '\x2', '\x12F', '\x130', '\a', '\x3', '\x2', 
		'\x2', '\x130', '\'', '\x3', '\x2', '\x2', '\x2', '\x131', '\x132', '\x5', 
		'*', '\x16', '\x2', '\x132', '\x133', '\a', '\x5', '\x2', '\x2', '\x133', 
		'\x134', '\x5', ',', '\x17', '\x2', '\x134', '\x136', '\a', '\x6', '\x2', 
		'\x2', '\x135', '\x137', '\a', '\x3', '\x2', '\x2', '\x136', '\x135', 
		'\x3', '\x2', '\x2', '\x2', '\x136', '\x137', '\x3', '\x2', '\x2', '\x2', 
		'\x137', ')', '\x3', '\x2', '\x2', '\x2', '\x138', '\x139', '\a', '-', 
		'\x2', '\x2', '\x139', '+', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13C', 
		'\x5', '.', '\x18', '\x2', '\x13B', '\x13A', '\x3', '\x2', '\x2', '\x2', 
		'\x13B', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x13C', '-', '\x3', '\x2', 
		'\x2', '\x2', '\x13D', '\x143', '\x5', '\x30', '\x19', '\x2', '\x13E', 
		'\x13F', '\x5', '\x30', '\x19', '\x2', '\x13F', '\x140', '\a', '\x4', 
		'\x2', '\x2', '\x140', '\x141', '\x5', '.', '\x18', '\x2', '\x141', '\x143', 
		'\x3', '\x2', '\x2', '\x2', '\x142', '\x13D', '\x3', '\x2', '\x2', '\x2', 
		'\x142', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x143', '/', '\x3', '\x2', 
		'\x2', '\x2', '\x144', '\x150', '\x5', '\x32', '\x1A', '\x2', '\x145', 
		'\x146', '\x5', '\x32', '\x1A', '\x2', '\x146', '\x147', '\a', '\a', '\x2', 
		'\x2', '\x147', '\x148', '\x5', '\x34', '\x1B', '\x2', '\x148', '\x150', 
		'\x3', '\x2', '\x2', '\x2', '\x149', '\x14A', '\x5', '\x32', '\x1A', '\x2', 
		'\x14A', '\x14B', '\a', '\a', '\x2', '\x2', '\x14B', '\x14C', '\a', '\x5', 
		'\x2', '\x2', '\x14C', '\x14D', '\x5', '.', '\x18', '\x2', '\x14D', '\x14E', 
		'\a', '\x6', '\x2', '\x2', '\x14E', '\x150', '\x3', '\x2', '\x2', '\x2', 
		'\x14F', '\x144', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x145', '\x3', 
		'\x2', '\x2', '\x2', '\x14F', '\x149', '\x3', '\x2', '\x2', '\x2', '\x150', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x151', '\x152', '\b', '\x1A', '\x1', 
		'\x2', '\x152', '\x155', '\x5', 'Z', '.', '\x2', '\x153', '\x155', '\x5', 
		'J', '&', '\x2', '\x154', '\x151', '\x3', '\x2', '\x2', '\x2', '\x154', 
		'\x153', '\x3', '\x2', '\x2', '\x2', '\x155', '\x15B', '\x3', '\x2', '\x2', 
		'\x2', '\x156', '\x157', '\f', '\x3', '\x2', '\x2', '\x157', '\x158', 
		'\a', '\b', '\x2', '\x2', '\x158', '\x15A', '\x5', '\x32', '\x1A', '\x4', 
		'\x159', '\x156', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x15D', '\x3', 
		'\x2', '\x2', '\x2', '\x15B', '\x159', '\x3', '\x2', '\x2', '\x2', '\x15B', 
		'\x15C', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x15D', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x161', 
		'\x5', 'Z', '.', '\x2', '\x15F', '\x161', '\x5', 'J', '&', '\x2', '\x160', 
		'\x15E', '\x3', '\x2', '\x2', '\x2', '\x160', '\x15F', '\x3', '\x2', '\x2', 
		'\x2', '\x161', '\x35', '\x3', '\x2', '\x2', '\x2', '\x162', '\x163', 
		'\a', '\x5', '\x2', '\x2', '\x163', '\x164', '\x5', '\x38', '\x1D', '\x2', 
		'\x164', '\x165', '\a', '\x6', '\x2', '\x2', '\x165', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x166', '\x168', '\n', '\x5', '\x2', '\x2', '\x167', '\x166', 
		'\x3', '\x2', '\x2', '\x2', '\x168', '\x16B', '\x3', '\x2', '\x2', '\x2', 
		'\x169', '\x167', '\x3', '\x2', '\x2', '\x2', '\x169', '\x16A', '\x3', 
		'\x2', '\x2', '\x2', '\x16A', '\x171', '\x3', '\x2', '\x2', '\x2', '\x16B', 
		'\x169', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x16D', '\a', '\x5', '\x2', 
		'\x2', '\x16D', '\x16E', '\x5', '\x38', '\x1D', '\x2', '\x16E', '\x16F', 
		'\a', '\x6', '\x2', '\x2', '\x16F', '\x170', '\x5', '\x38', '\x1D', '\x2', 
		'\x170', '\x172', '\x3', '\x2', '\x2', '\x2', '\x171', '\x16C', '\x3', 
		'\x2', '\x2', '\x2', '\x171', '\x172', '\x3', '\x2', '\x2', '\x2', '\x172', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x173', '\x177', '\a', '\x13', '\x2', 
		'\x2', '\x174', '\x177', '\a', '\x12', '\x2', '\x2', '\x175', '\x177', 
		'\x5', '\x62', '\x32', '\x2', '\x176', '\x173', '\x3', '\x2', '\x2', '\x2', 
		'\x176', '\x174', '\x3', '\x2', '\x2', '\x2', '\x176', '\x175', '\x3', 
		'\x2', '\x2', '\x2', '\x177', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x178', 
		'\x176', '\x3', '\x2', '\x2', '\x2', '\x178', '\x179', '\x3', '\x2', '\x2', 
		'\x2', '\x179', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x178', 
		'\x3', '\x2', '\x2', '\x2', '\x17B', '\x17D', '\x5', 'n', '\x38', '\x2', 
		'\x17C', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x17D', '\x3', 
		'\x2', '\x2', '\x2', '\x17D', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x17E', 
		'\x17F', '\x5', 'P', ')', '\x2', '\x17F', '\x181', '\a', '\x5', '\x2', 
		'\x2', '\x180', '\x182', '\x5', '\x42', '\"', '\x2', '\x181', '\x180', 
		'\x3', '\x2', '\x2', '\x2', '\x181', '\x182', '\x3', '\x2', '\x2', '\x2', 
		'\x182', '\x183', '\x3', '\x2', '\x2', '\x2', '\x183', '\x185', '\a', 
		'\x6', '\x2', '\x2', '\x184', '\x186', '\x5', '\x66', '\x34', '\x2', '\x185', 
		'\x184', '\x3', '\x2', '\x2', '\x2', '\x185', '\x186', '\x3', '\x2', '\x2', 
		'\x2', '\x186', '\x189', '\x3', '\x2', '\x2', '\x2', '\x187', '\x188', 
		'\a', '*', '\x2', '\x2', '\x188', '\x18A', '\x5', '<', '\x1F', '\x2', 
		'\x189', '\x187', '\x3', '\x2', '\x2', '\x2', '\x189', '\x18A', '\x3', 
		'\x2', '\x2', '\x2', '\x18A', '\x18D', '\x3', '\x2', '\x2', '\x2', '\x18B', 
		'\x18E', '\x5', 'L', '\'', '\x2', '\x18C', '\x18E', '\x5', 'p', '\x39', 
		'\x2', '\x18D', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x18C', 
		'\x3', '\x2', '\x2', '\x2', '\x18D', '\x18E', '\x3', '\x2', '\x2', '\x2', 
		'\x18E', '\x190', '\x3', '\x2', '\x2', '\x2', '\x18F', '\x191', '\a', 
		'\x3', '\x2', '\x2', '\x190', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x190', 
		'\x191', '\x3', '\x2', '\x2', '\x2', '\x191', ';', '\x3', '\x2', '\x2', 
		'\x2', '\x192', '\x198', '\x5', '>', ' ', '\x2', '\x193', '\x194', '\x5', 
		'>', ' ', '\x2', '\x194', '\x195', '\a', '\x4', '\x2', '\x2', '\x195', 
		'\x196', '\x5', '<', '\x1F', '\x2', '\x196', '\x198', '\x3', '\x2', '\x2', 
		'\x2', '\x197', '\x192', '\x3', '\x2', '\x2', '\x2', '\x197', '\x193', 
		'\x3', '\x2', '\x2', '\x2', '\x198', '=', '\x3', '\x2', '\x2', '\x2', 
		'\x199', '\x19A', '\x5', '\x46', '$', '\x2', '\x19A', '\x19C', '\a', '\x5', 
		'\x2', '\x2', '\x19B', '\x19D', '\x5', 'H', '%', '\x2', '\x19C', '\x19B', 
		'\x3', '\x2', '\x2', '\x2', '\x19C', '\x19D', '\x3', '\x2', '\x2', '\x2', 
		'\x19D', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x19E', '\x19F', '\a', 
		'\x6', '\x2', '\x2', '\x19F', '\x1A4', '\x3', '\x2', '\x2', '\x2', '\x1A0', 
		'\x1A1', '\x5', '\x46', '$', '\x2', '\x1A1', '\x1A2', '\x5', '\x36', '\x1C', 
		'\x2', '\x1A2', '\x1A4', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x199', 
		'\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A0', '\x3', '\x2', '\x2', '\x2', 
		'\x1A4', '?', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A7', '\x5', 'v', 
		'<', '\x2', '\x1A6', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1A7', 
		'\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1B0', '\x3', '\x2', '\x2', '\x2', 
		'\x1A8', '\x1AF', '\a', '#', '\x2', '\x2', '\x1A9', '\x1AF', '\x5', 'j', 
		'\x36', '\x2', '\x1AA', '\x1AF', '\a', '\x12', '\x2', '\x2', '\x1AB', 
		'\x1AF', '\a', '\x1C', '\x2', '\x2', '\x1AC', '\x1AF', '\x5', 'h', '\x35', 
		'\x2', '\x1AD', '\x1AF', '\x5', '\x62', '\x32', '\x2', '\x1AE', '\x1A8', 
		'\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1A9', '\x3', '\x2', '\x2', '\x2', 
		'\x1AE', '\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1AB', '\x3', 
		'\x2', '\x2', '\x2', '\x1AE', '\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1AE', 
		'\x1AD', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1B2', '\x3', '\x2', '\x2', 
		'\x2', '\x1B0', '\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1B1', 
		'\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1B3', '\x3', '\x2', '\x2', '\x2', 
		'\x1B2', '\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B4', '\x5', 
		'Z', '.', '\x2', '\x1B4', '\x1B5', '\x5', 'P', ')', '\x2', '\x1B5', '\x1B7', 
		'\a', '\x5', '\x2', '\x2', '\x1B6', '\x1B8', '\x5', '\x42', '\"', '\x2', 
		'\x1B7', '\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1B8', '\x3', 
		'\x2', '\x2', '\x2', '\x1B8', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x1B9', 
		'\x1BB', '\a', '\x6', '\x2', '\x2', '\x1BA', '\x1BC', '\x5', '\x66', '\x34', 
		'\x2', '\x1BB', '\x1BA', '\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1BC', 
		'\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1BE', '\x3', '\x2', '\x2', '\x2', 
		'\x1BD', '\x1BF', '\x5', '\x64', '\x33', '\x2', '\x1BE', '\x1BD', '\x3', 
		'\x2', '\x2', '\x2', '\x1BE', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1BF', 
		'\x1C1', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x1C2', '\x5', 'l', '\x37', 
		'\x2', '\x1C1', '\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1C2', 
		'\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C5', '\x3', '\x2', '\x2', '\x2', 
		'\x1C3', '\x1C6', '\x5', 'L', '\'', '\x2', '\x1C4', '\x1C6', '\x5', 'p', 
		'\x39', '\x2', '\x1C5', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x1C5', 
		'\x1C4', '\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1C6', '\x3', '\x2', '\x2', 
		'\x2', '\x1C6', '\x1C8', '\x3', '\x2', '\x2', '\x2', '\x1C7', '\x1C9', 
		'\a', '\x3', '\x2', '\x2', '\x1C8', '\x1C7', '\x3', '\x2', '\x2', '\x2', 
		'\x1C8', '\x1C9', '\x3', '\x2', '\x2', '\x2', '\x1C9', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x1CA', '\x1D0', '\x5', '\x44', '#', '\x2', '\x1CB', 
		'\x1CC', '\x5', '\x44', '#', '\x2', '\x1CC', '\x1CD', '\a', '\x4', '\x2', 
		'\x2', '\x1CD', '\x1CE', '\x5', '\x42', '\"', '\x2', '\x1CE', '\x1D0', 
		'\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1CA', '\x3', '\x2', '\x2', '\x2', 
		'\x1CF', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x1D1', '\x1D7', '\x5', 'Z', '.', '\x2', '\x1D2', 
		'\x1D5', '\x5', '\x46', '$', '\x2', '\x1D3', '\x1D4', '\a', '\a', '\x2', 
		'\x2', '\x1D4', '\x1D6', '\x5', 'H', '%', '\x2', '\x1D5', '\x1D3', '\x3', 
		'\x2', '\x2', '\x2', '\x1D5', '\x1D6', '\x3', '\x2', '\x2', '\x2', '\x1D6', 
		'\x1D8', '\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1D2', '\x3', '\x2', '\x2', 
		'\x2', '\x1D7', '\x1D8', '\x3', '\x2', '\x2', '\x2', '\x1D8', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1DA', '\a', '-', '\x2', '\x2', 
		'\x1DA', 'G', '\x3', '\x2', '\x2', '\x2', '\x1DB', '\x1E0', '\x5', 'J', 
		'&', '\x2', '\x1DC', '\x1DD', '\a', '\x4', '\x2', '\x2', '\x1DD', '\x1DF', 
		'\x5', 'J', '&', '\x2', '\x1DE', '\x1DC', '\x3', '\x2', '\x2', '\x2', 
		'\x1DF', '\x1E2', '\x3', '\x2', '\x2', '\x2', '\x1E0', '\x1DE', '\x3', 
		'\x2', '\x2', '\x2', '\x1E0', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\x1E1', 
		'I', '\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1E0', '\x3', '\x2', '\x2', 
		'\x2', '\x1E3', '\x1E6', '\x5', '\\', '/', '\x2', '\x1E4', '\x1E6', '\x5', 
		'^', '\x30', '\x2', '\x1E5', '\x1E3', '\x3', '\x2', '\x2', '\x2', '\x1E5', 
		'\x1E4', '\x3', '\x2', '\x2', '\x2', '\x1E5', '\x1E6', '\x3', '\x2', '\x2', 
		'\x2', '\x1E6', '\x1E7', '\x3', '\x2', '\x2', '\x2', '\x1E7', '\x1EE', 
		'\t', '\x6', '\x2', '\x2', '\x1E8', '\x1EA', '\t', '\a', '\x2', '\x2', 
		'\x1E9', '\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1EA', '\x1EB', '\x3', 
		'\x2', '\x2', '\x2', '\x1EB', '\x1E9', '\x3', '\x2', '\x2', '\x2', '\x1EB', 
		'\x1EC', '\x3', '\x2', '\x2', '\x2', '\x1EC', '\x1ED', '\x3', '\x2', '\x2', 
		'\x2', '\x1ED', '\x1EF', '\t', '\x6', '\x2', '\x2', '\x1EE', '\x1E9', 
		'\x3', '\x2', '\x2', '\x2', '\x1EE', '\x1EF', '\x3', '\x2', '\x2', '\x2', 
		'\x1EF', '\x1F5', '\x3', '\x2', '\x2', '\x2', '\x1F0', '\x1F2', '\a', 
		'\x5', '\x2', '\x2', '\x1F1', '\x1F3', '\x5', 'H', '%', '\x2', '\x1F2', 
		'\x1F1', '\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1F3', '\x3', '\x2', '\x2', 
		'\x2', '\x1F3', '\x1F4', '\x3', '\x2', '\x2', '\x2', '\x1F4', '\x1F6', 
		'\a', '\x6', '\x2', '\x2', '\x1F5', '\x1F0', '\x3', '\x2', '\x2', '\x2', 
		'\x1F5', '\x1F6', '\x3', '\x2', '\x2', '\x2', '\x1F6', 'K', '\x3', '\x2', 
		'\x2', '\x2', '\x1F7', '\x1F8', '\a', '$', '\x2', '\x2', '\x1F8', '\x1F9', 
		'\x5', 'N', '(', '\x2', '\x1F9', '\x1FA', '\a', '%', '\x2', '\x2', '\x1FA', 
		'M', '\x3', '\x2', '\x2', '\x2', '\x1FB', '\x1FD', '\n', '\b', '\x2', 
		'\x2', '\x1FC', '\x1FB', '\x3', '\x2', '\x2', '\x2', '\x1FD', '\x200', 
		'\x3', '\x2', '\x2', '\x2', '\x1FE', '\x1FC', '\x3', '\x2', '\x2', '\x2', 
		'\x1FE', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x1FF', '\x206', '\x3', 
		'\x2', '\x2', '\x2', '\x200', '\x1FE', '\x3', '\x2', '\x2', '\x2', '\x201', 
		'\x202', '\a', '$', '\x2', '\x2', '\x202', '\x203', '\x5', 'N', '(', '\x2', 
		'\x203', '\x204', '\a', '%', '\x2', '\x2', '\x204', '\x205', '\x5', 'N', 
		'(', '\x2', '\x205', '\x207', '\x3', '\x2', '\x2', '\x2', '\x206', '\x201', 
		'\x3', '\x2', '\x2', '\x2', '\x206', '\x207', '\x3', '\x2', '\x2', '\x2', 
		'\x207', 'O', '\x3', '\x2', '\x2', '\x2', '\x208', '\x20C', '\a', '-', 
		'\x2', '\x2', '\x209', '\x20A', '\a', '*', '\x2', '\x2', '\x20A', '\x20B', 
		'\a', '*', '\x2', '\x2', '\x20B', '\x20D', '\x5', 'P', ')', '\x2', '\x20C', 
		'\x209', '\x3', '\x2', '\x2', '\x2', '\x20C', '\x20D', '\x3', '\x2', '\x2', 
		'\x2', '\x20D', '\x211', '\x3', '\x2', '\x2', '\x2', '\x20E', '\x20F', 
		'\a', '!', '\x2', '\x2', '\x20F', '\x211', '\x5', 'R', '*', '\x2', '\x210', 
		'\x208', '\x3', '\x2', '\x2', '\x2', '\x210', '\x20E', '\x3', '\x2', '\x2', 
		'\x2', '\x211', 'Q', '\x3', '\x2', '\x2', '\x2', '\x212', '\x214', '\t', 
		'\t', '\x2', '\x2', '\x213', '\x212', '\x3', '\x2', '\x2', '\x2', '\x214', 
		'\x215', '\x3', '\x2', '\x2', '\x2', '\x215', '\x213', '\x3', '\x2', '\x2', 
		'\x2', '\x215', '\x216', '\x3', '\x2', '\x2', '\x2', '\x216', 'S', '\x3', 
		'\x2', '\x2', '\x2', '\x217', '\x21B', '\a', '\x1D', '\x2', '\x2', '\x218', 
		'\x21B', '\a', '\x1C', '\x2', '\x2', '\x219', '\x21B', '\x5', 'h', '\x35', 
		'\x2', '\x21A', '\x217', '\x3', '\x2', '\x2', '\x2', '\x21A', '\x218', 
		'\x3', '\x2', '\x2', '\x2', '\x21A', '\x219', '\x3', '\x2', '\x2', '\x2', 
		'\x21B', '\x21E', '\x3', '\x2', '\x2', '\x2', '\x21C', '\x21A', '\x3', 
		'\x2', '\x2', '\x2', '\x21C', '\x21D', '\x3', '\x2', '\x2', '\x2', '\x21D', 
		'\x21F', '\x3', '\x2', '\x2', '\x2', '\x21E', '\x21C', '\x3', '\x2', '\x2', 
		'\x2', '\x21F', '\x220', '\x5', 'Z', '.', '\x2', '\x220', '\x222', '\x5', 
		'V', ',', '\x2', '\x221', '\x223', '\x5', 'r', ':', '\x2', '\x222', '\x221', 
		'\x3', '\x2', '\x2', '\x2', '\x222', '\x223', '\x3', '\x2', '\x2', '\x2', 
		'\x223', '\x226', '\x3', '\x2', '\x2', '\x2', '\x224', '\x225', '\t', 
		'\x4', '\x2', '\x2', '\x225', '\x227', '\x5', 'X', '-', '\x2', '\x226', 
		'\x224', '\x3', '\x2', '\x2', '\x2', '\x226', '\x227', '\x3', '\x2', '\x2', 
		'\x2', '\x227', '\x228', '\x3', '\x2', '\x2', '\x2', '\x228', '\x229', 
		'\a', '\x3', '\x2', '\x2', '\x229', 'U', '\x3', '\x2', '\x2', '\x2', '\x22A', 
		'\x22B', '\a', '-', '\x2', '\x2', '\x22B', 'W', '\x3', '\x2', '\x2', '\x2', 
		'\x22C', '\x231', '\a', '-', '\x2', '\x2', '\x22D', '\x22E', '\a', '\x5', 
		'\x2', '\x2', '\x22E', '\x22F', '\x5', 'X', '-', '\x2', '\x22F', '\x230', 
		'\a', '\x6', '\x2', '\x2', '\x230', '\x232', '\x3', '\x2', '\x2', '\x2', 
		'\x231', '\x22D', '\x3', '\x2', '\x2', '\x2', '\x231', '\x232', '\x3', 
		'\x2', '\x2', '\x2', '\x232', '\x235', '\x3', '\x2', '\x2', '\x2', '\x233', 
		'\x235', '\x5', 'J', '&', '\x2', '\x234', '\x22C', '\x3', '\x2', '\x2', 
		'\x2', '\x234', '\x233', '\x3', '\x2', '\x2', '\x2', '\x235', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '\x236', '\x238', '\x5', '\x66', '\x34', '\x2', '\x237', 
		'\x236', '\x3', '\x2', '\x2', '\x2', '\x237', '\x238', '\x3', '\x2', '\x2', 
		'\x2', '\x238', '\x23A', '\x3', '\x2', '\x2', '\x2', '\x239', '\x23B', 
		'\x5', '\f', '\a', '\x2', '\x23A', '\x239', '\x3', '\x2', '\x2', '\x2', 
		'\x23A', '\x23B', '\x3', '\x2', '\x2', '\x2', '\x23B', '\x23E', '\x3', 
		'\x2', '\x2', '\x2', '\x23C', '\x23F', '\x5', '\\', '/', '\x2', '\x23D', 
		'\x23F', '\x5', '^', '\x30', '\x2', '\x23E', '\x23C', '\x3', '\x2', '\x2', 
		'\x2', '\x23E', '\x23D', '\x3', '\x2', '\x2', '\x2', '\x23E', '\x23F', 
		'\x3', '\x2', '\x2', '\x2', '\x23F', '\x240', '\x3', '\x2', '\x2', '\x2', 
		'\x240', '\x243', '\x5', '`', '\x31', '\x2', '\x241', '\x244', '\x5', 
		'\\', '/', '\x2', '\x242', '\x244', '\x5', '^', '\x30', '\x2', '\x243', 
		'\x241', '\x3', '\x2', '\x2', '\x2', '\x243', '\x242', '\x3', '\x2', '\x2', 
		'\x2', '\x243', '\x244', '\x3', '\x2', '\x2', '\x2', '\x244', '\x246', 
		'\x3', '\x2', '\x2', '\x2', '\x245', '\x247', '\x5', '\x66', '\x34', '\x2', 
		'\x246', '\x245', '\x3', '\x2', '\x2', '\x2', '\x246', '\x247', '\x3', 
		'\x2', '\x2', '\x2', '\x247', '\x24A', '\x3', '\x2', '\x2', '\x2', '\x248', 
		'\x24B', '\x5', '\\', '/', '\x2', '\x249', '\x24B', '\x5', '^', '\x30', 
		'\x2', '\x24A', '\x248', '\x3', '\x2', '\x2', '\x2', '\x24A', '\x249', 
		'\x3', '\x2', '\x2', '\x2', '\x24A', '\x24B', '\x3', '\x2', '\x2', '\x2', 
		'\x24B', '[', '\x3', '\x2', '\x2', '\x2', '\x24C', '\x24D', '\a', '\r', 
		'\x2', '\x2', '\x24D', ']', '\x3', '\x2', '\x2', '\x2', '\x24E', '\x24F', 
		'\a', '\xE', '\x2', '\x2', '\x24F', '_', '\x3', '\x2', '\x2', '\x2', '\x250', 
		'\x254', '\a', '-', '\x2', '\x2', '\x251', '\x252', '\a', '*', '\x2', 
		'\x2', '\x252', '\x253', '\a', '*', '\x2', '\x2', '\x253', '\x255', '\a', 
		'-', '\x2', '\x2', '\x254', '\x251', '\x3', '\x2', '\x2', '\x2', '\x254', 
		'\x255', '\x3', '\x2', '\x2', '\x2', '\x255', '\x268', '\x3', '\x2', '\x2', 
		'\x2', '\x256', '\x257', '\a', '-', '\x2', '\x2', '\x257', '\x25A', '\a', 
		'\t', '\x2', '\x2', '\x258', '\x25B', '\x5', 'Z', '.', '\x2', '\x259', 
		'\x25B', '\a', '.', '\x2', '\x2', '\x25A', '\x258', '\x3', '\x2', '\x2', 
		'\x2', '\x25A', '\x259', '\x3', '\x2', '\x2', '\x2', '\x25B', '\x263', 
		'\x3', '\x2', '\x2', '\x2', '\x25C', '\x25F', '\a', '\x4', '\x2', '\x2', 
		'\x25D', '\x260', '\x5', 'Z', '.', '\x2', '\x25E', '\x260', '\a', '.', 
		'\x2', '\x2', '\x25F', '\x25D', '\x3', '\x2', '\x2', '\x2', '\x25F', '\x25E', 
		'\x3', '\x2', '\x2', '\x2', '\x260', '\x262', '\x3', '\x2', '\x2', '\x2', 
		'\x261', '\x25C', '\x3', '\x2', '\x2', '\x2', '\x262', '\x265', '\x3', 
		'\x2', '\x2', '\x2', '\x263', '\x261', '\x3', '\x2', '\x2', '\x2', '\x263', 
		'\x264', '\x3', '\x2', '\x2', '\x2', '\x264', '\x266', '\x3', '\x2', '\x2', 
		'\x2', '\x265', '\x263', '\x3', '\x2', '\x2', '\x2', '\x266', '\x268', 
		'\a', '\n', '\x2', '\x2', '\x267', '\x250', '\x3', '\x2', '\x2', '\x2', 
		'\x267', '\x256', '\x3', '\x2', '\x2', '\x2', '\x268', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x269', '\x26A', '\a', '\x14', '\x2', '\x2', '\x26A', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x26B', '\x26C', '\a', '\x1E', '\x2', 
		'\x2', '\x26C', '\x65', '\x3', '\x2', '\x2', '\x2', '\x26D', '\x26E', 
		'\a', '\x19', '\x2', '\x2', '\x26E', 'g', '\x3', '\x2', '\x2', '\x2', 
		'\x26F', '\x270', '\a', '\x1B', '\x2', '\x2', '\x270', 'i', '\x3', '\x2', 
		'\x2', '\x2', '\x271', '\x272', '\a', ' ', '\x2', '\x2', '\x272', 'k', 
		'\x3', '\x2', '\x2', '\x2', '\x273', '\x274', '\a', '\x1A', '\x2', '\x2', 
		'\x274', 'm', '\x3', '\x2', '\x2', '\x2', '\x275', '\x276', '\a', '&', 
		'\x2', '\x2', '\x276', 'o', '\x3', '\x2', '\x2', '\x2', '\x277', '\x278', 
		'\a', '\a', '\x2', '\x2', '\x278', '\x279', '\a', '\'', '\x2', '\x2', 
		'\x279', 'q', '\x3', '\x2', '\x2', '\x2', '\x27A', '\x27B', '\a', '\v', 
		'\x2', '\x2', '\x27B', '\x27C', '\x5', 't', ';', '\x2', '\x27C', '\x27D', 
		'\a', '\f', '\x2', '\x2', '\x27D', 's', '\x3', '\x2', '\x2', '\x2', '\x27E', 
		'\x27F', '\a', '.', '\x2', '\x2', '\x27F', 'u', '\x3', '\x2', '\x2', '\x2', 
		'\x280', '\x281', '\a', '\x1F', '\x2', '\x2', '\x281', '\x283', '\a', 
		'\t', '\x2', '\x2', '\x282', '\x284', '\x5', 'x', '=', '\x2', '\x283', 
		'\x282', '\x3', '\x2', '\x2', '\x2', '\x283', '\x284', '\x3', '\x2', '\x2', 
		'\x2', '\x284', '\x285', '\x3', '\x2', '\x2', '\x2', '\x285', '\x286', 
		'\a', '\n', '\x2', '\x2', '\x286', 'w', '\x3', '\x2', '\x2', '\x2', '\x287', 
		'\x28D', '\x5', 'z', '>', '\x2', '\x288', '\x289', '\x5', 'z', '>', '\x2', 
		'\x289', '\x28A', '\a', '\x4', '\x2', '\x2', '\x28A', '\x28B', '\x5', 
		'x', '=', '\x2', '\x28B', '\x28D', '\x3', '\x2', '\x2', '\x2', '\x28C', 
		'\x287', '\x3', '\x2', '\x2', '\x2', '\x28C', '\x288', '\x3', '\x2', '\x2', 
		'\x2', '\x28D', 'y', '\x3', '\x2', '\x2', '\x2', '\x28E', '\x290', '\x5', 
		'|', '?', '\x2', '\x28F', '\x291', '\x5', '~', '@', '\x2', '\x290', '\x28F', 
		'\x3', '\x2', '\x2', '\x2', '\x290', '\x291', '\x3', '\x2', '\x2', '\x2', 
		'\x291', '\x294', '\x3', '\x2', '\x2', '\x2', '\x292', '\x293', '\a', 
		'\a', '\x2', '\x2', '\x293', '\x295', '\x5', 'X', '-', '\x2', '\x294', 
		'\x292', '\x3', '\x2', '\x2', '\x2', '\x294', '\x295', '\x3', '\x2', '\x2', 
		'\x2', '\x295', '{', '\x3', '\x2', '\x2', '\x2', '\x296', '\x297', '\t', 
		'\n', '\x2', '\x2', '\x297', '}', '\x3', '\x2', '\x2', '\x2', '\x298', 
		'\x299', '\a', '-', '\x2', '\x2', '\x299', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x29A', '\x29B', '\x5', '\x82', '\x42', '\x2', '\x29B', '\x29C', 
		'\a', '*', '\x2', '\x2', '\x29C', '\x81', '\x3', '\x2', '\x2', '\x2', 
		'\x29D', '\x29E', '\t', '\v', '\x2', '\x2', '\x29E', '\x83', '\x3', '\x2', 
		'\x2', '\x2', '\x29F', '\x2A0', '\t', '\f', '\x2', '\x2', '\x2A0', '\x85', 
		'\x3', '\x2', '\x2', '\x2', '\\', '\x90', '\x92', '\x9D', '\xA2', '\xAA', 
		'\xAF', '\xB2', '\xB7', '\xBB', '\xC1', '\xCA', '\xCE', '\xD4', '\xDE', 
		'\xEC', '\xEE', '\xF5', '\xF9', '\xFF', '\x109', '\x113', '\x115', '\x11A', 
		'\x120', '\x123', '\x12A', '\x136', '\x13B', '\x142', '\x14F', '\x154', 
		'\x15B', '\x160', '\x169', '\x171', '\x176', '\x178', '\x17C', '\x181', 
		'\x185', '\x189', '\x18D', '\x190', '\x197', '\x19C', '\x1A3', '\x1A6', 
		'\x1AE', '\x1B0', '\x1B7', '\x1BB', '\x1BE', '\x1C1', '\x1C5', '\x1C8', 
		'\x1CF', '\x1D5', '\x1D7', '\x1E0', '\x1E5', '\x1EB', '\x1EE', '\x1F2', 
		'\x1F5', '\x1FE', '\x206', '\x20C', '\x210', '\x215', '\x21A', '\x21C', 
		'\x222', '\x226', '\x231', '\x234', '\x237', '\x23A', '\x23E', '\x243', 
		'\x246', '\x24A', '\x254', '\x25A', '\x25F', '\x263', '\x267', '\x283', 
		'\x28C', '\x290', '\x294',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
